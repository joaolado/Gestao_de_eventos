// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum UsersType {
  UserClient
  UserAdmin
  UserSuperAdmin
}

enum StatusEvents {
  Active
  Scheduled
  Completed
  Cancelled
}

enum StatusTicketsType {
  Active
  Disabled
}

enum StatusTicketsInfo {
  Available
  Sold_Out
  Coming_Soon
}

enum StatusOnCart {
  Active
  Scheduled
  Cancelled
}

enum StatusOrderDetails {
  Pending
  Completed
  Cancelled
}

enum StatusPaymentDetails {
  Paid
  Failed
  Refunded
}

// Models
model UsersAddress {
  id           Int      @id @default(autoincrement())
  addressLine1 String?  @map("address_line1")
  addressLine2 String?  @map("address_line2")
  postalCode   String?  @map("postal_code")
  city         String?
  region       String?
  country      String?
  users        Users[]
}

model Users {
  id           Int             @id @default(autoincrement())
  profilePic   String?         @map("profile_pic")
  userName     String?         @unique @map("user_name")      // @unique Can't Repeat same User Name
  userPassword String          @map("user_password")
  usersType    UsersType       @default(UserClient)
  firstName    String?
  lastName     String?
  phone        String?
  email        String          @unique
  addressId    Int?
  address      UsersAddress?   @relation(fields: [addressId], references: [id])
  created      DateTime        @default(now())
  modified     DateTime        @updatedAt
  deleted      DateTime?
  payments     UsersPayments[]
  orders       OrderDetails[]
}

model UsersPayments {
  id              Int      @id @default(autoincrement())
  usersId         Int      @map("users_id")
  paymentType     String   @map("payment_type")
  paymentProvider String   @map("payment_provider")
  created         DateTime @default(now())
  modified        DateTime @updatedAt
  user            Users    @relation(fields: [usersId], references: [id])
  paymentDetails  PaymentDetails[]
}

model EventsCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created     DateTime  @default(now())
  modified    DateTime  @updatedAt
  deleted     DateTime?
  events      Events[]
}

model Events {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  cover        String?
  startDate    DateTime        @map("start_date")
  endDate      DateTime        @map("end_date")
  capacity     Int
  addressLine1 String          @map("address_line1")
  addressLine2 String?         @map("address_line2")
  postalCode   String          @map("postal_code")
  city         String
  region       String
  country      String
  categoryId   Int?
  status       StatusEvents    @default(Scheduled)
  created      DateTime        @default(now())
  modified     DateTime        @updatedAt
  deleted      DateTime?
  category     EventsCategory? @relation(fields: [categoryId], references: [id])
  tickets      TicketsInfo[]
}

model TicketsType {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  status      StatusTicketsType @default(Active)
  created     DateTime          @default(now())
  modified    DateTime          @updatedAt
  deleted     DateTime?
  tickets     TicketsInfo[]
}

model TicketsInfo {
  id             Int               @id @default(autoincrement())
  eventsId       Int               @map("events_id")
  typeId         Int?              
  SKU            String
  price          Float
  quantity       Int
  status         StatusTicketsInfo @default(Available)
  created        DateTime          @default(now())
  modified       DateTime          @updatedAt
  deleted        DateTime?
  event          Events            @relation(fields: [eventsId], references: [id])
  type           TicketsType?      @relation(fields: [typeId], references: [id])
  orderedTickets OrderedTickets[]
}

model OrderedTickets {
  id            Int           @id @default(autoincrement())
  ticketsInfoId Int           @map("tickets_info_id")
  quantity      Int
  created       DateTime      @default(now())
  modified      DateTime      @updatedAt
  ticketsInfo   TicketsInfo   @relation(fields: [ticketsInfoId], references: [id])
  orders        OrderDetails[]
}

model OrderDetails {
  id                Int                 @id @default(autoincrement())
  usersId           Int                 @map("users_id")
  orderedTicketsId  Int                 @map("ordered_tickets_id")
  orderTotal        Float               @map("order_total")
  orderDate         DateTime            @map("order_date") @default(now())
  statusCart        StatusOnCart        @default(Scheduled)
  statusOrder       StatusOrderDetails  @default(Pending)
  created           DateTime            @default(now())
  modified          DateTime            @updatedAt
  user              Users               @relation(fields: [usersId], references: [id])
  orderedTickets    OrderedTickets      @relation(fields: [orderedTicketsId], references: [id])
  paymentDetails    PaymentDetails[]
}

model PaymentDetails {
  id             Int                  @id @default(autoincrement())
  orderId        Int                  @map("order_id")
  usersPaymentsId Int                 @map("users_payments_id")
  paymentAmount  Float                @map("payment_amount")
  paymentDate    DateTime             @map("payment_date") @default(now())
  status         StatusPaymentDetails @default(Paid)
  order          OrderDetails         @relation(fields: [orderId], references: [id])
  usersPayments  UsersPayments        @relation(fields: [usersPaymentsId], references: [id])
}