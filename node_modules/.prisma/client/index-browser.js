
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersTypeScalarFieldEnum = {
  id: 'id',
  usersType: 'usersType',
  created: 'created',
  modified: 'modified',
  deleted: 'deleted'
};

exports.Prisma.UsersAddressScalarFieldEnum = {
  id: 'id',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  postalCode: 'postalCode',
  city: 'city',
  region: 'region',
  country: 'country'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  userName: 'userName',
  userPassword: 'userPassword',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  addressId: 'addressId',
  created: 'created',
  modified: 'modified',
  deleted: 'deleted'
};

exports.Prisma.UsersTypeUsersScalarFieldEnum = {
  usersId: 'usersId',
  usersTypeId: 'usersTypeId'
};

exports.Prisma.UsersPaymentsScalarFieldEnum = {
  id: 'id',
  usersId: 'usersId',
  paymentType: 'paymentType',
  paymentProvider: 'paymentProvider',
  created: 'created',
  modified: 'modified'
};

exports.Prisma.EventsCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created: 'created',
  modified: 'modified',
  deleted: 'deleted'
};

exports.Prisma.EventsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  cover: 'cover',
  startDate: 'startDate',
  endDate: 'endDate',
  capacity: 'capacity',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  postalCode: 'postalCode',
  city: 'city',
  region: 'region',
  country: 'country',
  categoryId: 'categoryId',
  status: 'status',
  created: 'created',
  modified: 'modified',
  deleted: 'deleted'
};

exports.Prisma.TicketsTypeScalarFieldEnum = {
  id: 'id',
  ticketsType: 'ticketsType',
  description: 'description',
  status: 'status',
  created: 'created',
  modified: 'modified',
  deleted: 'deleted'
};

exports.Prisma.TicketsInfoScalarFieldEnum = {
  id: 'id',
  eventsId: 'eventsId',
  ticketsTypeId: 'ticketsTypeId',
  SKU: 'SKU',
  price: 'price',
  quantity: 'quantity',
  status: 'status',
  created: 'created',
  modified: 'modified',
  deleted: 'deleted'
};

exports.Prisma.OrderedTicketsScalarFieldEnum = {
  id: 'id',
  ticketsInfoId: 'ticketsInfoId',
  quantity: 'quantity',
  created: 'created',
  modified: 'modified'
};

exports.Prisma.OrderDetailsScalarFieldEnum = {
  id: 'id',
  usersId: 'usersId',
  orderedTicketsId: 'orderedTicketsId',
  orderTotal: 'orderTotal',
  orderDate: 'orderDate',
  statusCart: 'statusCart',
  statusOrder: 'statusOrder',
  created: 'created',
  modified: 'modified'
};

exports.Prisma.PaymentDetailsScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  usersPaymentsId: 'usersPaymentsId',
  paymentAmount: 'paymentAmount',
  paymentDate: 'paymentDate',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.StatusEvents = exports.$Enums.StatusEvents = {
  Active: 'Active',
  Scheduled: 'Scheduled',
  Completed: 'Completed',
  Cancelled: 'Cancelled'
};

exports.StatusTicketsType = exports.$Enums.StatusTicketsType = {
  Active: 'Active',
  Disabled: 'Disabled'
};

exports.StatusTicketsInfo = exports.$Enums.StatusTicketsInfo = {
  Available: 'Available',
  Sold_Out: 'Sold_Out',
  Coming_Soon: 'Coming_Soon'
};

exports.StatusOnCart = exports.$Enums.StatusOnCart = {
  Active: 'Active',
  Scheduled: 'Scheduled',
  Cancelled: 'Cancelled'
};

exports.StatusOrderDetails = exports.$Enums.StatusOrderDetails = {
  Pending: 'Pending',
  Completed: 'Completed',
  Cancelled: 'Cancelled'
};

exports.StatusPaymentDetails = exports.$Enums.StatusPaymentDetails = {
  Paid: 'Paid',
  Failed: 'Failed',
  Refunded: 'Refunded'
};

exports.Prisma.ModelName = {
  UsersType: 'UsersType',
  UsersAddress: 'UsersAddress',
  Users: 'Users',
  UsersTypeUsers: 'UsersTypeUsers',
  UsersPayments: 'UsersPayments',
  EventsCategory: 'EventsCategory',
  Events: 'Events',
  TicketsType: 'TicketsType',
  TicketsInfo: 'TicketsInfo',
  OrderedTickets: 'OrderedTickets',
  OrderDetails: 'OrderDetails',
  PaymentDetails: 'PaymentDetails'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
