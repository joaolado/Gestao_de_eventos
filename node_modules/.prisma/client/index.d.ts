
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model UsersAddress
 * 
 */
export type UsersAddress = $Result.DefaultSelection<Prisma.$UsersAddressPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model UsersPayments
 * 
 */
export type UsersPayments = $Result.DefaultSelection<Prisma.$UsersPaymentsPayload>
/**
 * Model EventsCategory
 * 
 */
export type EventsCategory = $Result.DefaultSelection<Prisma.$EventsCategoryPayload>
/**
 * Model Events
 * 
 */
export type Events = $Result.DefaultSelection<Prisma.$EventsPayload>
/**
 * Model TicketsType
 * 
 */
export type TicketsType = $Result.DefaultSelection<Prisma.$TicketsTypePayload>
/**
 * Model TicketsInfo
 * 
 */
export type TicketsInfo = $Result.DefaultSelection<Prisma.$TicketsInfoPayload>
/**
 * Model OrderedTickets
 * 
 */
export type OrderedTickets = $Result.DefaultSelection<Prisma.$OrderedTicketsPayload>
/**
 * Model OrderDetails
 * 
 */
export type OrderDetails = $Result.DefaultSelection<Prisma.$OrderDetailsPayload>
/**
 * Model PaymentDetails
 * 
 */
export type PaymentDetails = $Result.DefaultSelection<Prisma.$PaymentDetailsPayload>
/**
 * Model UsersEvents
 * 
 */
export type UsersEvents = $Result.DefaultSelection<Prisma.$UsersEventsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UsersType: {
  UserClient: 'UserClient',
  UserAdmin: 'UserAdmin',
  UserSuperAdmin: 'UserSuperAdmin'
};

export type UsersType = (typeof UsersType)[keyof typeof UsersType]


export const StatusEvents: {
  Active: 'Active',
  Scheduled: 'Scheduled',
  Completed: 'Completed',
  Cancelled: 'Cancelled'
};

export type StatusEvents = (typeof StatusEvents)[keyof typeof StatusEvents]


export const StatusTicketsType: {
  Active: 'Active',
  Disabled: 'Disabled'
};

export type StatusTicketsType = (typeof StatusTicketsType)[keyof typeof StatusTicketsType]


export const StatusTicketsInfo: {
  Available: 'Available',
  Sold_Out: 'Sold_Out',
  Coming_Soon: 'Coming_Soon'
};

export type StatusTicketsInfo = (typeof StatusTicketsInfo)[keyof typeof StatusTicketsInfo]


export const StatusOnCart: {
  Active: 'Active',
  Scheduled: 'Scheduled',
  Cancelled: 'Cancelled'
};

export type StatusOnCart = (typeof StatusOnCart)[keyof typeof StatusOnCart]


export const StatusOrderDetails: {
  Pending: 'Pending',
  Completed: 'Completed',
  Cancelled: 'Cancelled'
};

export type StatusOrderDetails = (typeof StatusOrderDetails)[keyof typeof StatusOrderDetails]


export const StatusPaymentDetails: {
  Paid: 'Paid',
  Failed: 'Failed',
  Refunded: 'Refunded'
};

export type StatusPaymentDetails = (typeof StatusPaymentDetails)[keyof typeof StatusPaymentDetails]

}

export type UsersType = $Enums.UsersType

export const UsersType: typeof $Enums.UsersType

export type StatusEvents = $Enums.StatusEvents

export const StatusEvents: typeof $Enums.StatusEvents

export type StatusTicketsType = $Enums.StatusTicketsType

export const StatusTicketsType: typeof $Enums.StatusTicketsType

export type StatusTicketsInfo = $Enums.StatusTicketsInfo

export const StatusTicketsInfo: typeof $Enums.StatusTicketsInfo

export type StatusOnCart = $Enums.StatusOnCart

export const StatusOnCart: typeof $Enums.StatusOnCart

export type StatusOrderDetails = $Enums.StatusOrderDetails

export const StatusOrderDetails: typeof $Enums.StatusOrderDetails

export type StatusPaymentDetails = $Enums.StatusPaymentDetails

export const StatusPaymentDetails: typeof $Enums.StatusPaymentDetails

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more UsersAddresses
 * const usersAddresses = await prisma.usersAddress.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more UsersAddresses
   * const usersAddresses = await prisma.usersAddress.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usersAddress`: Exposes CRUD operations for the **UsersAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersAddresses
    * const usersAddresses = await prisma.usersAddress.findMany()
    * ```
    */
  get usersAddress(): Prisma.UsersAddressDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.usersPayments`: Exposes CRUD operations for the **UsersPayments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersPayments
    * const usersPayments = await prisma.usersPayments.findMany()
    * ```
    */
  get usersPayments(): Prisma.UsersPaymentsDelegate<ExtArgs>;

  /**
   * `prisma.eventsCategory`: Exposes CRUD operations for the **EventsCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventsCategories
    * const eventsCategories = await prisma.eventsCategory.findMany()
    * ```
    */
  get eventsCategory(): Prisma.EventsCategoryDelegate<ExtArgs>;

  /**
   * `prisma.events`: Exposes CRUD operations for the **Events** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.events.findMany()
    * ```
    */
  get events(): Prisma.EventsDelegate<ExtArgs>;

  /**
   * `prisma.ticketsType`: Exposes CRUD operations for the **TicketsType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TicketsTypes
    * const ticketsTypes = await prisma.ticketsType.findMany()
    * ```
    */
  get ticketsType(): Prisma.TicketsTypeDelegate<ExtArgs>;

  /**
   * `prisma.ticketsInfo`: Exposes CRUD operations for the **TicketsInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TicketsInfos
    * const ticketsInfos = await prisma.ticketsInfo.findMany()
    * ```
    */
  get ticketsInfo(): Prisma.TicketsInfoDelegate<ExtArgs>;

  /**
   * `prisma.orderedTickets`: Exposes CRUD operations for the **OrderedTickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderedTickets
    * const orderedTickets = await prisma.orderedTickets.findMany()
    * ```
    */
  get orderedTickets(): Prisma.OrderedTicketsDelegate<ExtArgs>;

  /**
   * `prisma.orderDetails`: Exposes CRUD operations for the **OrderDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderDetails
    * const orderDetails = await prisma.orderDetails.findMany()
    * ```
    */
  get orderDetails(): Prisma.OrderDetailsDelegate<ExtArgs>;

  /**
   * `prisma.paymentDetails`: Exposes CRUD operations for the **PaymentDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentDetails
    * const paymentDetails = await prisma.paymentDetails.findMany()
    * ```
    */
  get paymentDetails(): Prisma.PaymentDetailsDelegate<ExtArgs>;

  /**
   * `prisma.usersEvents`: Exposes CRUD operations for the **UsersEvents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersEvents
    * const usersEvents = await prisma.usersEvents.findMany()
    * ```
    */
  get usersEvents(): Prisma.UsersEventsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    UsersAddress: 'UsersAddress',
    Users: 'Users',
    UsersPayments: 'UsersPayments',
    EventsCategory: 'EventsCategory',
    Events: 'Events',
    TicketsType: 'TicketsType',
    TicketsInfo: 'TicketsInfo',
    OrderedTickets: 'OrderedTickets',
    OrderDetails: 'OrderDetails',
    PaymentDetails: 'PaymentDetails',
    UsersEvents: 'UsersEvents'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usersAddress" | "users" | "usersPayments" | "eventsCategory" | "events" | "ticketsType" | "ticketsInfo" | "orderedTickets" | "orderDetails" | "paymentDetails" | "usersEvents"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      UsersAddress: {
        payload: Prisma.$UsersAddressPayload<ExtArgs>
        fields: Prisma.UsersAddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersAddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersAddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload>
          }
          findFirst: {
            args: Prisma.UsersAddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersAddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload>
          }
          findMany: {
            args: Prisma.UsersAddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload>[]
          }
          create: {
            args: Prisma.UsersAddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload>
          }
          createMany: {
            args: Prisma.UsersAddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersAddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload>[]
          }
          delete: {
            args: Prisma.UsersAddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload>
          }
          update: {
            args: Prisma.UsersAddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload>
          }
          deleteMany: {
            args: Prisma.UsersAddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersAddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersAddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersAddressPayload>
          }
          aggregate: {
            args: Prisma.UsersAddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsersAddress>
          }
          groupBy: {
            args: Prisma.UsersAddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersAddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersAddressCountArgs<ExtArgs>
            result: $Utils.Optional<UsersAddressCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      UsersPayments: {
        payload: Prisma.$UsersPaymentsPayload<ExtArgs>
        fields: Prisma.UsersPaymentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersPaymentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersPaymentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload>
          }
          findFirst: {
            args: Prisma.UsersPaymentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersPaymentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload>
          }
          findMany: {
            args: Prisma.UsersPaymentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload>[]
          }
          create: {
            args: Prisma.UsersPaymentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload>
          }
          createMany: {
            args: Prisma.UsersPaymentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersPaymentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload>[]
          }
          delete: {
            args: Prisma.UsersPaymentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload>
          }
          update: {
            args: Prisma.UsersPaymentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload>
          }
          deleteMany: {
            args: Prisma.UsersPaymentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersPaymentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersPaymentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPaymentsPayload>
          }
          aggregate: {
            args: Prisma.UsersPaymentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsersPayments>
          }
          groupBy: {
            args: Prisma.UsersPaymentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersPaymentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersPaymentsCountArgs<ExtArgs>
            result: $Utils.Optional<UsersPaymentsCountAggregateOutputType> | number
          }
        }
      }
      EventsCategory: {
        payload: Prisma.$EventsCategoryPayload<ExtArgs>
        fields: Prisma.EventsCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventsCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventsCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload>
          }
          findFirst: {
            args: Prisma.EventsCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventsCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload>
          }
          findMany: {
            args: Prisma.EventsCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload>[]
          }
          create: {
            args: Prisma.EventsCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload>
          }
          createMany: {
            args: Prisma.EventsCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventsCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload>[]
          }
          delete: {
            args: Prisma.EventsCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload>
          }
          update: {
            args: Prisma.EventsCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload>
          }
          deleteMany: {
            args: Prisma.EventsCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventsCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventsCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsCategoryPayload>
          }
          aggregate: {
            args: Prisma.EventsCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventsCategory>
          }
          groupBy: {
            args: Prisma.EventsCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventsCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventsCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<EventsCategoryCountAggregateOutputType> | number
          }
        }
      }
      Events: {
        payload: Prisma.$EventsPayload<ExtArgs>
        fields: Prisma.EventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          findFirst: {
            args: Prisma.EventsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          findMany: {
            args: Prisma.EventsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>[]
          }
          create: {
            args: Prisma.EventsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          createMany: {
            args: Prisma.EventsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>[]
          }
          delete: {
            args: Prisma.EventsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          update: {
            args: Prisma.EventsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          deleteMany: {
            args: Prisma.EventsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          aggregate: {
            args: Prisma.EventsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvents>
          }
          groupBy: {
            args: Prisma.EventsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventsCountArgs<ExtArgs>
            result: $Utils.Optional<EventsCountAggregateOutputType> | number
          }
        }
      }
      TicketsType: {
        payload: Prisma.$TicketsTypePayload<ExtArgs>
        fields: Prisma.TicketsTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketsTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketsTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload>
          }
          findFirst: {
            args: Prisma.TicketsTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketsTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload>
          }
          findMany: {
            args: Prisma.TicketsTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload>[]
          }
          create: {
            args: Prisma.TicketsTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload>
          }
          createMany: {
            args: Prisma.TicketsTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketsTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload>[]
          }
          delete: {
            args: Prisma.TicketsTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload>
          }
          update: {
            args: Prisma.TicketsTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload>
          }
          deleteMany: {
            args: Prisma.TicketsTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketsTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketsTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsTypePayload>
          }
          aggregate: {
            args: Prisma.TicketsTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicketsType>
          }
          groupBy: {
            args: Prisma.TicketsTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketsTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketsTypeCountArgs<ExtArgs>
            result: $Utils.Optional<TicketsTypeCountAggregateOutputType> | number
          }
        }
      }
      TicketsInfo: {
        payload: Prisma.$TicketsInfoPayload<ExtArgs>
        fields: Prisma.TicketsInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketsInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketsInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload>
          }
          findFirst: {
            args: Prisma.TicketsInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketsInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload>
          }
          findMany: {
            args: Prisma.TicketsInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload>[]
          }
          create: {
            args: Prisma.TicketsInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload>
          }
          createMany: {
            args: Prisma.TicketsInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketsInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload>[]
          }
          delete: {
            args: Prisma.TicketsInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload>
          }
          update: {
            args: Prisma.TicketsInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload>
          }
          deleteMany: {
            args: Prisma.TicketsInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketsInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketsInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsInfoPayload>
          }
          aggregate: {
            args: Prisma.TicketsInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicketsInfo>
          }
          groupBy: {
            args: Prisma.TicketsInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketsInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketsInfoCountArgs<ExtArgs>
            result: $Utils.Optional<TicketsInfoCountAggregateOutputType> | number
          }
        }
      }
      OrderedTickets: {
        payload: Prisma.$OrderedTicketsPayload<ExtArgs>
        fields: Prisma.OrderedTicketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderedTicketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderedTicketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload>
          }
          findFirst: {
            args: Prisma.OrderedTicketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderedTicketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload>
          }
          findMany: {
            args: Prisma.OrderedTicketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload>[]
          }
          create: {
            args: Prisma.OrderedTicketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload>
          }
          createMany: {
            args: Prisma.OrderedTicketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderedTicketsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload>[]
          }
          delete: {
            args: Prisma.OrderedTicketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload>
          }
          update: {
            args: Prisma.OrderedTicketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload>
          }
          deleteMany: {
            args: Prisma.OrderedTicketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderedTicketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderedTicketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderedTicketsPayload>
          }
          aggregate: {
            args: Prisma.OrderedTicketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderedTickets>
          }
          groupBy: {
            args: Prisma.OrderedTicketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderedTicketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderedTicketsCountArgs<ExtArgs>
            result: $Utils.Optional<OrderedTicketsCountAggregateOutputType> | number
          }
        }
      }
      OrderDetails: {
        payload: Prisma.$OrderDetailsPayload<ExtArgs>
        fields: Prisma.OrderDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload>
          }
          findFirst: {
            args: Prisma.OrderDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload>
          }
          findMany: {
            args: Prisma.OrderDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload>[]
          }
          create: {
            args: Prisma.OrderDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload>
          }
          createMany: {
            args: Prisma.OrderDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload>[]
          }
          delete: {
            args: Prisma.OrderDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload>
          }
          update: {
            args: Prisma.OrderDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload>
          }
          deleteMany: {
            args: Prisma.OrderDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDetailsPayload>
          }
          aggregate: {
            args: Prisma.OrderDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderDetails>
          }
          groupBy: {
            args: Prisma.OrderDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<OrderDetailsCountAggregateOutputType> | number
          }
        }
      }
      PaymentDetails: {
        payload: Prisma.$PaymentDetailsPayload<ExtArgs>
        fields: Prisma.PaymentDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload>
          }
          findFirst: {
            args: Prisma.PaymentDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload>
          }
          findMany: {
            args: Prisma.PaymentDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload>[]
          }
          create: {
            args: Prisma.PaymentDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload>
          }
          createMany: {
            args: Prisma.PaymentDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload>[]
          }
          delete: {
            args: Prisma.PaymentDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload>
          }
          update: {
            args: Prisma.PaymentDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentDetailsPayload>
          }
          aggregate: {
            args: Prisma.PaymentDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentDetails>
          }
          groupBy: {
            args: Prisma.PaymentDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentDetailsCountAggregateOutputType> | number
          }
        }
      }
      UsersEvents: {
        payload: Prisma.$UsersEventsPayload<ExtArgs>
        fields: Prisma.UsersEventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersEventsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersEventsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload>
          }
          findFirst: {
            args: Prisma.UsersEventsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersEventsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload>
          }
          findMany: {
            args: Prisma.UsersEventsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload>[]
          }
          create: {
            args: Prisma.UsersEventsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload>
          }
          createMany: {
            args: Prisma.UsersEventsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersEventsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload>[]
          }
          delete: {
            args: Prisma.UsersEventsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload>
          }
          update: {
            args: Prisma.UsersEventsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload>
          }
          deleteMany: {
            args: Prisma.UsersEventsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersEventsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersEventsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersEventsPayload>
          }
          aggregate: {
            args: Prisma.UsersEventsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsersEvents>
          }
          groupBy: {
            args: Prisma.UsersEventsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersEventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersEventsCountArgs<ExtArgs>
            result: $Utils.Optional<UsersEventsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersAddressCountOutputType
   */

  export type UsersAddressCountOutputType = {
    users: number
  }

  export type UsersAddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersAddressCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * UsersAddressCountOutputType without action
   */
  export type UsersAddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddressCountOutputType
     */
    select?: UsersAddressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersAddressCountOutputType without action
   */
  export type UsersAddressCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    payments: number
    orders: number
    addEvents: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | UsersCountOutputTypeCountPaymentsArgs
    orders?: boolean | UsersCountOutputTypeCountOrdersArgs
    addEvents?: boolean | UsersCountOutputTypeCountAddEventsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersPaymentsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderDetailsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAddEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersEventsWhereInput
  }


  /**
   * Count Type UsersPaymentsCountOutputType
   */

  export type UsersPaymentsCountOutputType = {
    paymentDetails: number
  }

  export type UsersPaymentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paymentDetails?: boolean | UsersPaymentsCountOutputTypeCountPaymentDetailsArgs
  }

  // Custom InputTypes
  /**
   * UsersPaymentsCountOutputType without action
   */
  export type UsersPaymentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPaymentsCountOutputType
     */
    select?: UsersPaymentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersPaymentsCountOutputType without action
   */
  export type UsersPaymentsCountOutputTypeCountPaymentDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentDetailsWhereInput
  }


  /**
   * Count Type EventsCategoryCountOutputType
   */

  export type EventsCategoryCountOutputType = {
    events: number
  }

  export type EventsCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventsCategoryCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * EventsCategoryCountOutputType without action
   */
  export type EventsCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategoryCountOutputType
     */
    select?: EventsCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventsCategoryCountOutputType without action
   */
  export type EventsCategoryCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventsWhereInput
  }


  /**
   * Count Type EventsCountOutputType
   */

  export type EventsCountOutputType = {
    tickets: number
    addEvents: number
  }

  export type EventsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | EventsCountOutputTypeCountTicketsArgs
    addEvents?: boolean | EventsCountOutputTypeCountAddEventsArgs
  }

  // Custom InputTypes
  /**
   * EventsCountOutputType without action
   */
  export type EventsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCountOutputType
     */
    select?: EventsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventsCountOutputType without action
   */
  export type EventsCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsInfoWhereInput
  }

  /**
   * EventsCountOutputType without action
   */
  export type EventsCountOutputTypeCountAddEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersEventsWhereInput
  }


  /**
   * Count Type TicketsTypeCountOutputType
   */

  export type TicketsTypeCountOutputType = {
    tickets: number
  }

  export type TicketsTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | TicketsTypeCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * TicketsTypeCountOutputType without action
   */
  export type TicketsTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsTypeCountOutputType
     */
    select?: TicketsTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketsTypeCountOutputType without action
   */
  export type TicketsTypeCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsInfoWhereInput
  }


  /**
   * Count Type TicketsInfoCountOutputType
   */

  export type TicketsInfoCountOutputType = {
    orderedTickets: number
  }

  export type TicketsInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderedTickets?: boolean | TicketsInfoCountOutputTypeCountOrderedTicketsArgs
  }

  // Custom InputTypes
  /**
   * TicketsInfoCountOutputType without action
   */
  export type TicketsInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfoCountOutputType
     */
    select?: TicketsInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketsInfoCountOutputType without action
   */
  export type TicketsInfoCountOutputTypeCountOrderedTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderedTicketsWhereInput
  }


  /**
   * Count Type OrderedTicketsCountOutputType
   */

  export type OrderedTicketsCountOutputType = {
    orders: number
  }

  export type OrderedTicketsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | OrderedTicketsCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * OrderedTicketsCountOutputType without action
   */
  export type OrderedTicketsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTicketsCountOutputType
     */
    select?: OrderedTicketsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderedTicketsCountOutputType without action
   */
  export type OrderedTicketsCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderDetailsWhereInput
  }


  /**
   * Count Type OrderDetailsCountOutputType
   */

  export type OrderDetailsCountOutputType = {
    paymentDetails: number
  }

  export type OrderDetailsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paymentDetails?: boolean | OrderDetailsCountOutputTypeCountPaymentDetailsArgs
  }

  // Custom InputTypes
  /**
   * OrderDetailsCountOutputType without action
   */
  export type OrderDetailsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetailsCountOutputType
     */
    select?: OrderDetailsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderDetailsCountOutputType without action
   */
  export type OrderDetailsCountOutputTypeCountPaymentDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentDetailsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model UsersAddress
   */

  export type AggregateUsersAddress = {
    _count: UsersAddressCountAggregateOutputType | null
    _avg: UsersAddressAvgAggregateOutputType | null
    _sum: UsersAddressSumAggregateOutputType | null
    _min: UsersAddressMinAggregateOutputType | null
    _max: UsersAddressMaxAggregateOutputType | null
  }

  export type UsersAddressAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersAddressSumAggregateOutputType = {
    id: number | null
  }

  export type UsersAddressMinAggregateOutputType = {
    id: number | null
    addressLine1: string | null
    addressLine2: string | null
    postalCode: string | null
    city: string | null
    region: string | null
    country: string | null
  }

  export type UsersAddressMaxAggregateOutputType = {
    id: number | null
    addressLine1: string | null
    addressLine2: string | null
    postalCode: string | null
    city: string | null
    region: string | null
    country: string | null
  }

  export type UsersAddressCountAggregateOutputType = {
    id: number
    addressLine1: number
    addressLine2: number
    postalCode: number
    city: number
    region: number
    country: number
    _all: number
  }


  export type UsersAddressAvgAggregateInputType = {
    id?: true
  }

  export type UsersAddressSumAggregateInputType = {
    id?: true
  }

  export type UsersAddressMinAggregateInputType = {
    id?: true
    addressLine1?: true
    addressLine2?: true
    postalCode?: true
    city?: true
    region?: true
    country?: true
  }

  export type UsersAddressMaxAggregateInputType = {
    id?: true
    addressLine1?: true
    addressLine2?: true
    postalCode?: true
    city?: true
    region?: true
    country?: true
  }

  export type UsersAddressCountAggregateInputType = {
    id?: true
    addressLine1?: true
    addressLine2?: true
    postalCode?: true
    city?: true
    region?: true
    country?: true
    _all?: true
  }

  export type UsersAddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersAddress to aggregate.
     */
    where?: UsersAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersAddresses to fetch.
     */
    orderBy?: UsersAddressOrderByWithRelationInput | UsersAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsersAddresses
    **/
    _count?: true | UsersAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersAddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersAddressMaxAggregateInputType
  }

  export type GetUsersAddressAggregateType<T extends UsersAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersAddress[P]>
      : GetScalarType<T[P], AggregateUsersAddress[P]>
  }




  export type UsersAddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersAddressWhereInput
    orderBy?: UsersAddressOrderByWithAggregationInput | UsersAddressOrderByWithAggregationInput[]
    by: UsersAddressScalarFieldEnum[] | UsersAddressScalarFieldEnum
    having?: UsersAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersAddressCountAggregateInputType | true
    _avg?: UsersAddressAvgAggregateInputType
    _sum?: UsersAddressSumAggregateInputType
    _min?: UsersAddressMinAggregateInputType
    _max?: UsersAddressMaxAggregateInputType
  }

  export type UsersAddressGroupByOutputType = {
    id: number
    addressLine1: string | null
    addressLine2: string | null
    postalCode: string | null
    city: string | null
    region: string | null
    country: string | null
    _count: UsersAddressCountAggregateOutputType | null
    _avg: UsersAddressAvgAggregateOutputType | null
    _sum: UsersAddressSumAggregateOutputType | null
    _min: UsersAddressMinAggregateOutputType | null
    _max: UsersAddressMaxAggregateOutputType | null
  }

  type GetUsersAddressGroupByPayload<T extends UsersAddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersAddressGroupByOutputType[P]>
            : GetScalarType<T[P], UsersAddressGroupByOutputType[P]>
        }
      >
    >


  export type UsersAddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    postalCode?: boolean
    city?: boolean
    region?: boolean
    country?: boolean
    users?: boolean | UsersAddress$usersArgs<ExtArgs>
    _count?: boolean | UsersAddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usersAddress"]>

  export type UsersAddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    postalCode?: boolean
    city?: boolean
    region?: boolean
    country?: boolean
  }, ExtArgs["result"]["usersAddress"]>

  export type UsersAddressSelectScalar = {
    id?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    postalCode?: boolean
    city?: boolean
    region?: boolean
    country?: boolean
  }

  export type UsersAddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersAddress$usersArgs<ExtArgs>
    _count?: boolean | UsersAddressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersAddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersAddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsersAddress"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      addressLine1: string | null
      addressLine2: string | null
      postalCode: string | null
      city: string | null
      region: string | null
      country: string | null
    }, ExtArgs["result"]["usersAddress"]>
    composites: {}
  }

  type UsersAddressGetPayload<S extends boolean | null | undefined | UsersAddressDefaultArgs> = $Result.GetResult<Prisma.$UsersAddressPayload, S>

  type UsersAddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersAddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersAddressCountAggregateInputType | true
    }

  export interface UsersAddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsersAddress'], meta: { name: 'UsersAddress' } }
    /**
     * Find zero or one UsersAddress that matches the filter.
     * @param {UsersAddressFindUniqueArgs} args - Arguments to find a UsersAddress
     * @example
     * // Get one UsersAddress
     * const usersAddress = await prisma.usersAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersAddressFindUniqueArgs>(args: SelectSubset<T, UsersAddressFindUniqueArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UsersAddress that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersAddressFindUniqueOrThrowArgs} args - Arguments to find a UsersAddress
     * @example
     * // Get one UsersAddress
     * const usersAddress = await prisma.usersAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersAddressFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersAddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UsersAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddressFindFirstArgs} args - Arguments to find a UsersAddress
     * @example
     * // Get one UsersAddress
     * const usersAddress = await prisma.usersAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersAddressFindFirstArgs>(args?: SelectSubset<T, UsersAddressFindFirstArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UsersAddress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddressFindFirstOrThrowArgs} args - Arguments to find a UsersAddress
     * @example
     * // Get one UsersAddress
     * const usersAddress = await prisma.usersAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersAddressFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersAddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UsersAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersAddresses
     * const usersAddresses = await prisma.usersAddress.findMany()
     * 
     * // Get first 10 UsersAddresses
     * const usersAddresses = await prisma.usersAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersAddressWithIdOnly = await prisma.usersAddress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersAddressFindManyArgs>(args?: SelectSubset<T, UsersAddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UsersAddress.
     * @param {UsersAddressCreateArgs} args - Arguments to create a UsersAddress.
     * @example
     * // Create one UsersAddress
     * const UsersAddress = await prisma.usersAddress.create({
     *   data: {
     *     // ... data to create a UsersAddress
     *   }
     * })
     * 
     */
    create<T extends UsersAddressCreateArgs>(args: SelectSubset<T, UsersAddressCreateArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UsersAddresses.
     * @param {UsersAddressCreateManyArgs} args - Arguments to create many UsersAddresses.
     * @example
     * // Create many UsersAddresses
     * const usersAddress = await prisma.usersAddress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersAddressCreateManyArgs>(args?: SelectSubset<T, UsersAddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsersAddresses and returns the data saved in the database.
     * @param {UsersAddressCreateManyAndReturnArgs} args - Arguments to create many UsersAddresses.
     * @example
     * // Create many UsersAddresses
     * const usersAddress = await prisma.usersAddress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsersAddresses and only return the `id`
     * const usersAddressWithIdOnly = await prisma.usersAddress.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersAddressCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersAddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UsersAddress.
     * @param {UsersAddressDeleteArgs} args - Arguments to delete one UsersAddress.
     * @example
     * // Delete one UsersAddress
     * const UsersAddress = await prisma.usersAddress.delete({
     *   where: {
     *     // ... filter to delete one UsersAddress
     *   }
     * })
     * 
     */
    delete<T extends UsersAddressDeleteArgs>(args: SelectSubset<T, UsersAddressDeleteArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UsersAddress.
     * @param {UsersAddressUpdateArgs} args - Arguments to update one UsersAddress.
     * @example
     * // Update one UsersAddress
     * const usersAddress = await prisma.usersAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersAddressUpdateArgs>(args: SelectSubset<T, UsersAddressUpdateArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UsersAddresses.
     * @param {UsersAddressDeleteManyArgs} args - Arguments to filter UsersAddresses to delete.
     * @example
     * // Delete a few UsersAddresses
     * const { count } = await prisma.usersAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersAddressDeleteManyArgs>(args?: SelectSubset<T, UsersAddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersAddresses
     * const usersAddress = await prisma.usersAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersAddressUpdateManyArgs>(args: SelectSubset<T, UsersAddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersAddress.
     * @param {UsersAddressUpsertArgs} args - Arguments to update or create a UsersAddress.
     * @example
     * // Update or create a UsersAddress
     * const usersAddress = await prisma.usersAddress.upsert({
     *   create: {
     *     // ... data to create a UsersAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersAddress we want to update
     *   }
     * })
     */
    upsert<T extends UsersAddressUpsertArgs>(args: SelectSubset<T, UsersAddressUpsertArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UsersAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddressCountArgs} args - Arguments to filter UsersAddresses to count.
     * @example
     * // Count the number of UsersAddresses
     * const count = await prisma.usersAddress.count({
     *   where: {
     *     // ... the filter for the UsersAddresses we want to count
     *   }
     * })
    **/
    count<T extends UsersAddressCountArgs>(
      args?: Subset<T, UsersAddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAddressAggregateArgs>(args: Subset<T, UsersAddressAggregateArgs>): Prisma.PrismaPromise<GetUsersAddressAggregateType<T>>

    /**
     * Group by UsersAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersAddressGroupByArgs['orderBy'] }
        : { orderBy?: UsersAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsersAddress model
   */
  readonly fields: UsersAddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsersAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersAddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersAddress$usersArgs<ExtArgs> = {}>(args?: Subset<T, UsersAddress$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsersAddress model
   */ 
  interface UsersAddressFieldRefs {
    readonly id: FieldRef<"UsersAddress", 'Int'>
    readonly addressLine1: FieldRef<"UsersAddress", 'String'>
    readonly addressLine2: FieldRef<"UsersAddress", 'String'>
    readonly postalCode: FieldRef<"UsersAddress", 'String'>
    readonly city: FieldRef<"UsersAddress", 'String'>
    readonly region: FieldRef<"UsersAddress", 'String'>
    readonly country: FieldRef<"UsersAddress", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UsersAddress findUnique
   */
  export type UsersAddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * Filter, which UsersAddress to fetch.
     */
    where: UsersAddressWhereUniqueInput
  }

  /**
   * UsersAddress findUniqueOrThrow
   */
  export type UsersAddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * Filter, which UsersAddress to fetch.
     */
    where: UsersAddressWhereUniqueInput
  }

  /**
   * UsersAddress findFirst
   */
  export type UsersAddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * Filter, which UsersAddress to fetch.
     */
    where?: UsersAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersAddresses to fetch.
     */
    orderBy?: UsersAddressOrderByWithRelationInput | UsersAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersAddresses.
     */
    cursor?: UsersAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersAddresses.
     */
    distinct?: UsersAddressScalarFieldEnum | UsersAddressScalarFieldEnum[]
  }

  /**
   * UsersAddress findFirstOrThrow
   */
  export type UsersAddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * Filter, which UsersAddress to fetch.
     */
    where?: UsersAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersAddresses to fetch.
     */
    orderBy?: UsersAddressOrderByWithRelationInput | UsersAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersAddresses.
     */
    cursor?: UsersAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersAddresses.
     */
    distinct?: UsersAddressScalarFieldEnum | UsersAddressScalarFieldEnum[]
  }

  /**
   * UsersAddress findMany
   */
  export type UsersAddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * Filter, which UsersAddresses to fetch.
     */
    where?: UsersAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersAddresses to fetch.
     */
    orderBy?: UsersAddressOrderByWithRelationInput | UsersAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsersAddresses.
     */
    cursor?: UsersAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersAddresses.
     */
    skip?: number
    distinct?: UsersAddressScalarFieldEnum | UsersAddressScalarFieldEnum[]
  }

  /**
   * UsersAddress create
   */
  export type UsersAddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * The data needed to create a UsersAddress.
     */
    data?: XOR<UsersAddressCreateInput, UsersAddressUncheckedCreateInput>
  }

  /**
   * UsersAddress createMany
   */
  export type UsersAddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsersAddresses.
     */
    data: UsersAddressCreateManyInput | UsersAddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsersAddress createManyAndReturn
   */
  export type UsersAddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UsersAddresses.
     */
    data: UsersAddressCreateManyInput | UsersAddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsersAddress update
   */
  export type UsersAddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * The data needed to update a UsersAddress.
     */
    data: XOR<UsersAddressUpdateInput, UsersAddressUncheckedUpdateInput>
    /**
     * Choose, which UsersAddress to update.
     */
    where: UsersAddressWhereUniqueInput
  }

  /**
   * UsersAddress updateMany
   */
  export type UsersAddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsersAddresses.
     */
    data: XOR<UsersAddressUpdateManyMutationInput, UsersAddressUncheckedUpdateManyInput>
    /**
     * Filter which UsersAddresses to update
     */
    where?: UsersAddressWhereInput
  }

  /**
   * UsersAddress upsert
   */
  export type UsersAddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * The filter to search for the UsersAddress to update in case it exists.
     */
    where: UsersAddressWhereUniqueInput
    /**
     * In case the UsersAddress found by the `where` argument doesn't exist, create a new UsersAddress with this data.
     */
    create: XOR<UsersAddressCreateInput, UsersAddressUncheckedCreateInput>
    /**
     * In case the UsersAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersAddressUpdateInput, UsersAddressUncheckedUpdateInput>
  }

  /**
   * UsersAddress delete
   */
  export type UsersAddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    /**
     * Filter which UsersAddress to delete.
     */
    where: UsersAddressWhereUniqueInput
  }

  /**
   * UsersAddress deleteMany
   */
  export type UsersAddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersAddresses to delete
     */
    where?: UsersAddressWhereInput
  }

  /**
   * UsersAddress.users
   */
  export type UsersAddress$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * UsersAddress without action
   */
  export type UsersAddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
  }


  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    profilePic: string | null
    userName: string | null
    userPassword: string | null
    usersType: $Enums.UsersType | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    addressId: number | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    profilePic: string | null
    userName: string | null
    userPassword: string | null
    usersType: $Enums.UsersType | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    addressId: number | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    profilePic: number
    userName: number
    userPassword: number
    usersType: number
    firstName: number
    lastName: number
    phone: number
    email: number
    addressId: number
    created: number
    modified: number
    deleted: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    profilePic?: true
    userName?: true
    userPassword?: true
    usersType?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    addressId?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    profilePic?: true
    userName?: true
    userPassword?: true
    usersType?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    addressId?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    profilePic?: true
    userName?: true
    userPassword?: true
    usersType?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    addressId?: true
    created?: true
    modified?: true
    deleted?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    profilePic: string | null
    userName: string | null
    userPassword: string
    usersType: $Enums.UsersType
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string
    addressId: number | null
    created: Date
    modified: Date
    deleted: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profilePic?: boolean
    userName?: boolean
    userPassword?: boolean
    usersType?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    addressId?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
    address?: boolean | Users$addressArgs<ExtArgs>
    payments?: boolean | Users$paymentsArgs<ExtArgs>
    orders?: boolean | Users$ordersArgs<ExtArgs>
    addEvents?: boolean | Users$addEventsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profilePic?: boolean
    userName?: boolean
    userPassword?: boolean
    usersType?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    addressId?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
    address?: boolean | Users$addressArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    profilePic?: boolean
    userName?: boolean
    userPassword?: boolean
    usersType?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    addressId?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | Users$addressArgs<ExtArgs>
    payments?: boolean | Users$paymentsArgs<ExtArgs>
    orders?: boolean | Users$ordersArgs<ExtArgs>
    addEvents?: boolean | Users$addEventsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | Users$addressArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      address: Prisma.$UsersAddressPayload<ExtArgs> | null
      payments: Prisma.$UsersPaymentsPayload<ExtArgs>[]
      orders: Prisma.$OrderDetailsPayload<ExtArgs>[]
      addEvents: Prisma.$UsersEventsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      profilePic: string | null
      userName: string | null
      userPassword: string
      usersType: $Enums.UsersType
      firstName: string | null
      lastName: string | null
      phone: string | null
      email: string
      addressId: number | null
      created: Date
      modified: Date
      deleted: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    address<T extends Users$addressArgs<ExtArgs> = {}>(args?: Subset<T, Users$addressArgs<ExtArgs>>): Prisma__UsersAddressClient<$Result.GetResult<Prisma.$UsersAddressPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    payments<T extends Users$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Users$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "findMany"> | Null>
    orders<T extends Users$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Users$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "findMany"> | Null>
    addEvents<T extends Users$addEventsArgs<ExtArgs> = {}>(args?: Subset<T, Users$addEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly profilePic: FieldRef<"Users", 'String'>
    readonly userName: FieldRef<"Users", 'String'>
    readonly userPassword: FieldRef<"Users", 'String'>
    readonly usersType: FieldRef<"Users", 'UsersType'>
    readonly firstName: FieldRef<"Users", 'String'>
    readonly lastName: FieldRef<"Users", 'String'>
    readonly phone: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly addressId: FieldRef<"Users", 'Int'>
    readonly created: FieldRef<"Users", 'DateTime'>
    readonly modified: FieldRef<"Users", 'DateTime'>
    readonly deleted: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.address
   */
  export type Users$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersAddress
     */
    select?: UsersAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersAddressInclude<ExtArgs> | null
    where?: UsersAddressWhereInput
  }

  /**
   * Users.payments
   */
  export type Users$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    where?: UsersPaymentsWhereInput
    orderBy?: UsersPaymentsOrderByWithRelationInput | UsersPaymentsOrderByWithRelationInput[]
    cursor?: UsersPaymentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersPaymentsScalarFieldEnum | UsersPaymentsScalarFieldEnum[]
  }

  /**
   * Users.orders
   */
  export type Users$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    where?: OrderDetailsWhereInput
    orderBy?: OrderDetailsOrderByWithRelationInput | OrderDetailsOrderByWithRelationInput[]
    cursor?: OrderDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderDetailsScalarFieldEnum | OrderDetailsScalarFieldEnum[]
  }

  /**
   * Users.addEvents
   */
  export type Users$addEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    where?: UsersEventsWhereInput
    orderBy?: UsersEventsOrderByWithRelationInput | UsersEventsOrderByWithRelationInput[]
    cursor?: UsersEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersEventsScalarFieldEnum | UsersEventsScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model UsersPayments
   */

  export type AggregateUsersPayments = {
    _count: UsersPaymentsCountAggregateOutputType | null
    _avg: UsersPaymentsAvgAggregateOutputType | null
    _sum: UsersPaymentsSumAggregateOutputType | null
    _min: UsersPaymentsMinAggregateOutputType | null
    _max: UsersPaymentsMaxAggregateOutputType | null
  }

  export type UsersPaymentsAvgAggregateOutputType = {
    id: number | null
    usersId: number | null
  }

  export type UsersPaymentsSumAggregateOutputType = {
    id: number | null
    usersId: number | null
  }

  export type UsersPaymentsMinAggregateOutputType = {
    id: number | null
    usersId: number | null
    paymentType: string | null
    paymentProvider: string | null
    created: Date | null
    modified: Date | null
  }

  export type UsersPaymentsMaxAggregateOutputType = {
    id: number | null
    usersId: number | null
    paymentType: string | null
    paymentProvider: string | null
    created: Date | null
    modified: Date | null
  }

  export type UsersPaymentsCountAggregateOutputType = {
    id: number
    usersId: number
    paymentType: number
    paymentProvider: number
    created: number
    modified: number
    _all: number
  }


  export type UsersPaymentsAvgAggregateInputType = {
    id?: true
    usersId?: true
  }

  export type UsersPaymentsSumAggregateInputType = {
    id?: true
    usersId?: true
  }

  export type UsersPaymentsMinAggregateInputType = {
    id?: true
    usersId?: true
    paymentType?: true
    paymentProvider?: true
    created?: true
    modified?: true
  }

  export type UsersPaymentsMaxAggregateInputType = {
    id?: true
    usersId?: true
    paymentType?: true
    paymentProvider?: true
    created?: true
    modified?: true
  }

  export type UsersPaymentsCountAggregateInputType = {
    id?: true
    usersId?: true
    paymentType?: true
    paymentProvider?: true
    created?: true
    modified?: true
    _all?: true
  }

  export type UsersPaymentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersPayments to aggregate.
     */
    where?: UsersPaymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersPayments to fetch.
     */
    orderBy?: UsersPaymentsOrderByWithRelationInput | UsersPaymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersPaymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsersPayments
    **/
    _count?: true | UsersPaymentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersPaymentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersPaymentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersPaymentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersPaymentsMaxAggregateInputType
  }

  export type GetUsersPaymentsAggregateType<T extends UsersPaymentsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersPayments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersPayments[P]>
      : GetScalarType<T[P], AggregateUsersPayments[P]>
  }




  export type UsersPaymentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersPaymentsWhereInput
    orderBy?: UsersPaymentsOrderByWithAggregationInput | UsersPaymentsOrderByWithAggregationInput[]
    by: UsersPaymentsScalarFieldEnum[] | UsersPaymentsScalarFieldEnum
    having?: UsersPaymentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersPaymentsCountAggregateInputType | true
    _avg?: UsersPaymentsAvgAggregateInputType
    _sum?: UsersPaymentsSumAggregateInputType
    _min?: UsersPaymentsMinAggregateInputType
    _max?: UsersPaymentsMaxAggregateInputType
  }

  export type UsersPaymentsGroupByOutputType = {
    id: number
    usersId: number
    paymentType: string
    paymentProvider: string
    created: Date
    modified: Date
    _count: UsersPaymentsCountAggregateOutputType | null
    _avg: UsersPaymentsAvgAggregateOutputType | null
    _sum: UsersPaymentsSumAggregateOutputType | null
    _min: UsersPaymentsMinAggregateOutputType | null
    _max: UsersPaymentsMaxAggregateOutputType | null
  }

  type GetUsersPaymentsGroupByPayload<T extends UsersPaymentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersPaymentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersPaymentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersPaymentsGroupByOutputType[P]>
            : GetScalarType<T[P], UsersPaymentsGroupByOutputType[P]>
        }
      >
    >


  export type UsersPaymentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    paymentType?: boolean
    paymentProvider?: boolean
    created?: boolean
    modified?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    paymentDetails?: boolean | UsersPayments$paymentDetailsArgs<ExtArgs>
    _count?: boolean | UsersPaymentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usersPayments"]>

  export type UsersPaymentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    paymentType?: boolean
    paymentProvider?: boolean
    created?: boolean
    modified?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usersPayments"]>

  export type UsersPaymentsSelectScalar = {
    id?: boolean
    usersId?: boolean
    paymentType?: boolean
    paymentProvider?: boolean
    created?: boolean
    modified?: boolean
  }

  export type UsersPaymentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    paymentDetails?: boolean | UsersPayments$paymentDetailsArgs<ExtArgs>
    _count?: boolean | UsersPaymentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersPaymentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $UsersPaymentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsersPayments"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      paymentDetails: Prisma.$PaymentDetailsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usersId: number
      paymentType: string
      paymentProvider: string
      created: Date
      modified: Date
    }, ExtArgs["result"]["usersPayments"]>
    composites: {}
  }

  type UsersPaymentsGetPayload<S extends boolean | null | undefined | UsersPaymentsDefaultArgs> = $Result.GetResult<Prisma.$UsersPaymentsPayload, S>

  type UsersPaymentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersPaymentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersPaymentsCountAggregateInputType | true
    }

  export interface UsersPaymentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsersPayments'], meta: { name: 'UsersPayments' } }
    /**
     * Find zero or one UsersPayments that matches the filter.
     * @param {UsersPaymentsFindUniqueArgs} args - Arguments to find a UsersPayments
     * @example
     * // Get one UsersPayments
     * const usersPayments = await prisma.usersPayments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersPaymentsFindUniqueArgs>(args: SelectSubset<T, UsersPaymentsFindUniqueArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UsersPayments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersPaymentsFindUniqueOrThrowArgs} args - Arguments to find a UsersPayments
     * @example
     * // Get one UsersPayments
     * const usersPayments = await prisma.usersPayments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersPaymentsFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersPaymentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UsersPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersPaymentsFindFirstArgs} args - Arguments to find a UsersPayments
     * @example
     * // Get one UsersPayments
     * const usersPayments = await prisma.usersPayments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersPaymentsFindFirstArgs>(args?: SelectSubset<T, UsersPaymentsFindFirstArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UsersPayments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersPaymentsFindFirstOrThrowArgs} args - Arguments to find a UsersPayments
     * @example
     * // Get one UsersPayments
     * const usersPayments = await prisma.usersPayments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersPaymentsFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersPaymentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UsersPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersPaymentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersPayments
     * const usersPayments = await prisma.usersPayments.findMany()
     * 
     * // Get first 10 UsersPayments
     * const usersPayments = await prisma.usersPayments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersPaymentsWithIdOnly = await prisma.usersPayments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersPaymentsFindManyArgs>(args?: SelectSubset<T, UsersPaymentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UsersPayments.
     * @param {UsersPaymentsCreateArgs} args - Arguments to create a UsersPayments.
     * @example
     * // Create one UsersPayments
     * const UsersPayments = await prisma.usersPayments.create({
     *   data: {
     *     // ... data to create a UsersPayments
     *   }
     * })
     * 
     */
    create<T extends UsersPaymentsCreateArgs>(args: SelectSubset<T, UsersPaymentsCreateArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UsersPayments.
     * @param {UsersPaymentsCreateManyArgs} args - Arguments to create many UsersPayments.
     * @example
     * // Create many UsersPayments
     * const usersPayments = await prisma.usersPayments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersPaymentsCreateManyArgs>(args?: SelectSubset<T, UsersPaymentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsersPayments and returns the data saved in the database.
     * @param {UsersPaymentsCreateManyAndReturnArgs} args - Arguments to create many UsersPayments.
     * @example
     * // Create many UsersPayments
     * const usersPayments = await prisma.usersPayments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsersPayments and only return the `id`
     * const usersPaymentsWithIdOnly = await prisma.usersPayments.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersPaymentsCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersPaymentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UsersPayments.
     * @param {UsersPaymentsDeleteArgs} args - Arguments to delete one UsersPayments.
     * @example
     * // Delete one UsersPayments
     * const UsersPayments = await prisma.usersPayments.delete({
     *   where: {
     *     // ... filter to delete one UsersPayments
     *   }
     * })
     * 
     */
    delete<T extends UsersPaymentsDeleteArgs>(args: SelectSubset<T, UsersPaymentsDeleteArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UsersPayments.
     * @param {UsersPaymentsUpdateArgs} args - Arguments to update one UsersPayments.
     * @example
     * // Update one UsersPayments
     * const usersPayments = await prisma.usersPayments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersPaymentsUpdateArgs>(args: SelectSubset<T, UsersPaymentsUpdateArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UsersPayments.
     * @param {UsersPaymentsDeleteManyArgs} args - Arguments to filter UsersPayments to delete.
     * @example
     * // Delete a few UsersPayments
     * const { count } = await prisma.usersPayments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersPaymentsDeleteManyArgs>(args?: SelectSubset<T, UsersPaymentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersPaymentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersPayments
     * const usersPayments = await prisma.usersPayments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersPaymentsUpdateManyArgs>(args: SelectSubset<T, UsersPaymentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersPayments.
     * @param {UsersPaymentsUpsertArgs} args - Arguments to update or create a UsersPayments.
     * @example
     * // Update or create a UsersPayments
     * const usersPayments = await prisma.usersPayments.upsert({
     *   create: {
     *     // ... data to create a UsersPayments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersPayments we want to update
     *   }
     * })
     */
    upsert<T extends UsersPaymentsUpsertArgs>(args: SelectSubset<T, UsersPaymentsUpsertArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UsersPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersPaymentsCountArgs} args - Arguments to filter UsersPayments to count.
     * @example
     * // Count the number of UsersPayments
     * const count = await prisma.usersPayments.count({
     *   where: {
     *     // ... the filter for the UsersPayments we want to count
     *   }
     * })
    **/
    count<T extends UsersPaymentsCountArgs>(
      args?: Subset<T, UsersPaymentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersPaymentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersPaymentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersPaymentsAggregateArgs>(args: Subset<T, UsersPaymentsAggregateArgs>): Prisma.PrismaPromise<GetUsersPaymentsAggregateType<T>>

    /**
     * Group by UsersPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersPaymentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersPaymentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersPaymentsGroupByArgs['orderBy'] }
        : { orderBy?: UsersPaymentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersPaymentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersPaymentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsersPayments model
   */
  readonly fields: UsersPaymentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsersPayments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersPaymentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    paymentDetails<T extends UsersPayments$paymentDetailsArgs<ExtArgs> = {}>(args?: Subset<T, UsersPayments$paymentDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsersPayments model
   */ 
  interface UsersPaymentsFieldRefs {
    readonly id: FieldRef<"UsersPayments", 'Int'>
    readonly usersId: FieldRef<"UsersPayments", 'Int'>
    readonly paymentType: FieldRef<"UsersPayments", 'String'>
    readonly paymentProvider: FieldRef<"UsersPayments", 'String'>
    readonly created: FieldRef<"UsersPayments", 'DateTime'>
    readonly modified: FieldRef<"UsersPayments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsersPayments findUnique
   */
  export type UsersPaymentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * Filter, which UsersPayments to fetch.
     */
    where: UsersPaymentsWhereUniqueInput
  }

  /**
   * UsersPayments findUniqueOrThrow
   */
  export type UsersPaymentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * Filter, which UsersPayments to fetch.
     */
    where: UsersPaymentsWhereUniqueInput
  }

  /**
   * UsersPayments findFirst
   */
  export type UsersPaymentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * Filter, which UsersPayments to fetch.
     */
    where?: UsersPaymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersPayments to fetch.
     */
    orderBy?: UsersPaymentsOrderByWithRelationInput | UsersPaymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersPayments.
     */
    cursor?: UsersPaymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersPayments.
     */
    distinct?: UsersPaymentsScalarFieldEnum | UsersPaymentsScalarFieldEnum[]
  }

  /**
   * UsersPayments findFirstOrThrow
   */
  export type UsersPaymentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * Filter, which UsersPayments to fetch.
     */
    where?: UsersPaymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersPayments to fetch.
     */
    orderBy?: UsersPaymentsOrderByWithRelationInput | UsersPaymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersPayments.
     */
    cursor?: UsersPaymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersPayments.
     */
    distinct?: UsersPaymentsScalarFieldEnum | UsersPaymentsScalarFieldEnum[]
  }

  /**
   * UsersPayments findMany
   */
  export type UsersPaymentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * Filter, which UsersPayments to fetch.
     */
    where?: UsersPaymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersPayments to fetch.
     */
    orderBy?: UsersPaymentsOrderByWithRelationInput | UsersPaymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsersPayments.
     */
    cursor?: UsersPaymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersPayments.
     */
    skip?: number
    distinct?: UsersPaymentsScalarFieldEnum | UsersPaymentsScalarFieldEnum[]
  }

  /**
   * UsersPayments create
   */
  export type UsersPaymentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * The data needed to create a UsersPayments.
     */
    data: XOR<UsersPaymentsCreateInput, UsersPaymentsUncheckedCreateInput>
  }

  /**
   * UsersPayments createMany
   */
  export type UsersPaymentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsersPayments.
     */
    data: UsersPaymentsCreateManyInput | UsersPaymentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsersPayments createManyAndReturn
   */
  export type UsersPaymentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UsersPayments.
     */
    data: UsersPaymentsCreateManyInput | UsersPaymentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsersPayments update
   */
  export type UsersPaymentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * The data needed to update a UsersPayments.
     */
    data: XOR<UsersPaymentsUpdateInput, UsersPaymentsUncheckedUpdateInput>
    /**
     * Choose, which UsersPayments to update.
     */
    where: UsersPaymentsWhereUniqueInput
  }

  /**
   * UsersPayments updateMany
   */
  export type UsersPaymentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsersPayments.
     */
    data: XOR<UsersPaymentsUpdateManyMutationInput, UsersPaymentsUncheckedUpdateManyInput>
    /**
     * Filter which UsersPayments to update
     */
    where?: UsersPaymentsWhereInput
  }

  /**
   * UsersPayments upsert
   */
  export type UsersPaymentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * The filter to search for the UsersPayments to update in case it exists.
     */
    where: UsersPaymentsWhereUniqueInput
    /**
     * In case the UsersPayments found by the `where` argument doesn't exist, create a new UsersPayments with this data.
     */
    create: XOR<UsersPaymentsCreateInput, UsersPaymentsUncheckedCreateInput>
    /**
     * In case the UsersPayments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersPaymentsUpdateInput, UsersPaymentsUncheckedUpdateInput>
  }

  /**
   * UsersPayments delete
   */
  export type UsersPaymentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
    /**
     * Filter which UsersPayments to delete.
     */
    where: UsersPaymentsWhereUniqueInput
  }

  /**
   * UsersPayments deleteMany
   */
  export type UsersPaymentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersPayments to delete
     */
    where?: UsersPaymentsWhereInput
  }

  /**
   * UsersPayments.paymentDetails
   */
  export type UsersPayments$paymentDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    where?: PaymentDetailsWhereInput
    orderBy?: PaymentDetailsOrderByWithRelationInput | PaymentDetailsOrderByWithRelationInput[]
    cursor?: PaymentDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentDetailsScalarFieldEnum | PaymentDetailsScalarFieldEnum[]
  }

  /**
   * UsersPayments without action
   */
  export type UsersPaymentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersPayments
     */
    select?: UsersPaymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersPaymentsInclude<ExtArgs> | null
  }


  /**
   * Model EventsCategory
   */

  export type AggregateEventsCategory = {
    _count: EventsCategoryCountAggregateOutputType | null
    _avg: EventsCategoryAvgAggregateOutputType | null
    _sum: EventsCategorySumAggregateOutputType | null
    _min: EventsCategoryMinAggregateOutputType | null
    _max: EventsCategoryMaxAggregateOutputType | null
  }

  export type EventsCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type EventsCategorySumAggregateOutputType = {
    id: number | null
  }

  export type EventsCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type EventsCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type EventsCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    created: number
    modified: number
    deleted: number
    _all: number
  }


  export type EventsCategoryAvgAggregateInputType = {
    id?: true
  }

  export type EventsCategorySumAggregateInputType = {
    id?: true
  }

  export type EventsCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type EventsCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type EventsCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created?: true
    modified?: true
    deleted?: true
    _all?: true
  }

  export type EventsCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventsCategory to aggregate.
     */
    where?: EventsCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventsCategories to fetch.
     */
    orderBy?: EventsCategoryOrderByWithRelationInput | EventsCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventsCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventsCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventsCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventsCategories
    **/
    _count?: true | EventsCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventsCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventsCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventsCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventsCategoryMaxAggregateInputType
  }

  export type GetEventsCategoryAggregateType<T extends EventsCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateEventsCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventsCategory[P]>
      : GetScalarType<T[P], AggregateEventsCategory[P]>
  }




  export type EventsCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventsCategoryWhereInput
    orderBy?: EventsCategoryOrderByWithAggregationInput | EventsCategoryOrderByWithAggregationInput[]
    by: EventsCategoryScalarFieldEnum[] | EventsCategoryScalarFieldEnum
    having?: EventsCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventsCategoryCountAggregateInputType | true
    _avg?: EventsCategoryAvgAggregateInputType
    _sum?: EventsCategorySumAggregateInputType
    _min?: EventsCategoryMinAggregateInputType
    _max?: EventsCategoryMaxAggregateInputType
  }

  export type EventsCategoryGroupByOutputType = {
    id: number
    name: string
    description: string | null
    created: Date
    modified: Date
    deleted: Date | null
    _count: EventsCategoryCountAggregateOutputType | null
    _avg: EventsCategoryAvgAggregateOutputType | null
    _sum: EventsCategorySumAggregateOutputType | null
    _min: EventsCategoryMinAggregateOutputType | null
    _max: EventsCategoryMaxAggregateOutputType | null
  }

  type GetEventsCategoryGroupByPayload<T extends EventsCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventsCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventsCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventsCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], EventsCategoryGroupByOutputType[P]>
        }
      >
    >


  export type EventsCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
    events?: boolean | EventsCategory$eventsArgs<ExtArgs>
    _count?: boolean | EventsCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventsCategory"]>

  export type EventsCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
  }, ExtArgs["result"]["eventsCategory"]>

  export type EventsCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
  }

  export type EventsCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventsCategory$eventsArgs<ExtArgs>
    _count?: boolean | EventsCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventsCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EventsCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventsCategory"
    objects: {
      events: Prisma.$EventsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      created: Date
      modified: Date
      deleted: Date | null
    }, ExtArgs["result"]["eventsCategory"]>
    composites: {}
  }

  type EventsCategoryGetPayload<S extends boolean | null | undefined | EventsCategoryDefaultArgs> = $Result.GetResult<Prisma.$EventsCategoryPayload, S>

  type EventsCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventsCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventsCategoryCountAggregateInputType | true
    }

  export interface EventsCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventsCategory'], meta: { name: 'EventsCategory' } }
    /**
     * Find zero or one EventsCategory that matches the filter.
     * @param {EventsCategoryFindUniqueArgs} args - Arguments to find a EventsCategory
     * @example
     * // Get one EventsCategory
     * const eventsCategory = await prisma.eventsCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventsCategoryFindUniqueArgs>(args: SelectSubset<T, EventsCategoryFindUniqueArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventsCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventsCategoryFindUniqueOrThrowArgs} args - Arguments to find a EventsCategory
     * @example
     * // Get one EventsCategory
     * const eventsCategory = await prisma.eventsCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventsCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, EventsCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventsCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCategoryFindFirstArgs} args - Arguments to find a EventsCategory
     * @example
     * // Get one EventsCategory
     * const eventsCategory = await prisma.eventsCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventsCategoryFindFirstArgs>(args?: SelectSubset<T, EventsCategoryFindFirstArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventsCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCategoryFindFirstOrThrowArgs} args - Arguments to find a EventsCategory
     * @example
     * // Get one EventsCategory
     * const eventsCategory = await prisma.eventsCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventsCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, EventsCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventsCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventsCategories
     * const eventsCategories = await prisma.eventsCategory.findMany()
     * 
     * // Get first 10 EventsCategories
     * const eventsCategories = await prisma.eventsCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventsCategoryWithIdOnly = await prisma.eventsCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventsCategoryFindManyArgs>(args?: SelectSubset<T, EventsCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventsCategory.
     * @param {EventsCategoryCreateArgs} args - Arguments to create a EventsCategory.
     * @example
     * // Create one EventsCategory
     * const EventsCategory = await prisma.eventsCategory.create({
     *   data: {
     *     // ... data to create a EventsCategory
     *   }
     * })
     * 
     */
    create<T extends EventsCategoryCreateArgs>(args: SelectSubset<T, EventsCategoryCreateArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventsCategories.
     * @param {EventsCategoryCreateManyArgs} args - Arguments to create many EventsCategories.
     * @example
     * // Create many EventsCategories
     * const eventsCategory = await prisma.eventsCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventsCategoryCreateManyArgs>(args?: SelectSubset<T, EventsCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventsCategories and returns the data saved in the database.
     * @param {EventsCategoryCreateManyAndReturnArgs} args - Arguments to create many EventsCategories.
     * @example
     * // Create many EventsCategories
     * const eventsCategory = await prisma.eventsCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventsCategories and only return the `id`
     * const eventsCategoryWithIdOnly = await prisma.eventsCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventsCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, EventsCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventsCategory.
     * @param {EventsCategoryDeleteArgs} args - Arguments to delete one EventsCategory.
     * @example
     * // Delete one EventsCategory
     * const EventsCategory = await prisma.eventsCategory.delete({
     *   where: {
     *     // ... filter to delete one EventsCategory
     *   }
     * })
     * 
     */
    delete<T extends EventsCategoryDeleteArgs>(args: SelectSubset<T, EventsCategoryDeleteArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventsCategory.
     * @param {EventsCategoryUpdateArgs} args - Arguments to update one EventsCategory.
     * @example
     * // Update one EventsCategory
     * const eventsCategory = await prisma.eventsCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventsCategoryUpdateArgs>(args: SelectSubset<T, EventsCategoryUpdateArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventsCategories.
     * @param {EventsCategoryDeleteManyArgs} args - Arguments to filter EventsCategories to delete.
     * @example
     * // Delete a few EventsCategories
     * const { count } = await prisma.eventsCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventsCategoryDeleteManyArgs>(args?: SelectSubset<T, EventsCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventsCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventsCategories
     * const eventsCategory = await prisma.eventsCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventsCategoryUpdateManyArgs>(args: SelectSubset<T, EventsCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventsCategory.
     * @param {EventsCategoryUpsertArgs} args - Arguments to update or create a EventsCategory.
     * @example
     * // Update or create a EventsCategory
     * const eventsCategory = await prisma.eventsCategory.upsert({
     *   create: {
     *     // ... data to create a EventsCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventsCategory we want to update
     *   }
     * })
     */
    upsert<T extends EventsCategoryUpsertArgs>(args: SelectSubset<T, EventsCategoryUpsertArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventsCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCategoryCountArgs} args - Arguments to filter EventsCategories to count.
     * @example
     * // Count the number of EventsCategories
     * const count = await prisma.eventsCategory.count({
     *   where: {
     *     // ... the filter for the EventsCategories we want to count
     *   }
     * })
    **/
    count<T extends EventsCategoryCountArgs>(
      args?: Subset<T, EventsCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventsCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventsCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventsCategoryAggregateArgs>(args: Subset<T, EventsCategoryAggregateArgs>): Prisma.PrismaPromise<GetEventsCategoryAggregateType<T>>

    /**
     * Group by EventsCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventsCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventsCategoryGroupByArgs['orderBy'] }
        : { orderBy?: EventsCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventsCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventsCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventsCategory model
   */
  readonly fields: EventsCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventsCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventsCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends EventsCategory$eventsArgs<ExtArgs> = {}>(args?: Subset<T, EventsCategory$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventsCategory model
   */ 
  interface EventsCategoryFieldRefs {
    readonly id: FieldRef<"EventsCategory", 'Int'>
    readonly name: FieldRef<"EventsCategory", 'String'>
    readonly description: FieldRef<"EventsCategory", 'String'>
    readonly created: FieldRef<"EventsCategory", 'DateTime'>
    readonly modified: FieldRef<"EventsCategory", 'DateTime'>
    readonly deleted: FieldRef<"EventsCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventsCategory findUnique
   */
  export type EventsCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EventsCategory to fetch.
     */
    where: EventsCategoryWhereUniqueInput
  }

  /**
   * EventsCategory findUniqueOrThrow
   */
  export type EventsCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EventsCategory to fetch.
     */
    where: EventsCategoryWhereUniqueInput
  }

  /**
   * EventsCategory findFirst
   */
  export type EventsCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EventsCategory to fetch.
     */
    where?: EventsCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventsCategories to fetch.
     */
    orderBy?: EventsCategoryOrderByWithRelationInput | EventsCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventsCategories.
     */
    cursor?: EventsCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventsCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventsCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventsCategories.
     */
    distinct?: EventsCategoryScalarFieldEnum | EventsCategoryScalarFieldEnum[]
  }

  /**
   * EventsCategory findFirstOrThrow
   */
  export type EventsCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EventsCategory to fetch.
     */
    where?: EventsCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventsCategories to fetch.
     */
    orderBy?: EventsCategoryOrderByWithRelationInput | EventsCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventsCategories.
     */
    cursor?: EventsCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventsCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventsCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventsCategories.
     */
    distinct?: EventsCategoryScalarFieldEnum | EventsCategoryScalarFieldEnum[]
  }

  /**
   * EventsCategory findMany
   */
  export type EventsCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EventsCategories to fetch.
     */
    where?: EventsCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventsCategories to fetch.
     */
    orderBy?: EventsCategoryOrderByWithRelationInput | EventsCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventsCategories.
     */
    cursor?: EventsCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventsCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventsCategories.
     */
    skip?: number
    distinct?: EventsCategoryScalarFieldEnum | EventsCategoryScalarFieldEnum[]
  }

  /**
   * EventsCategory create
   */
  export type EventsCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a EventsCategory.
     */
    data: XOR<EventsCategoryCreateInput, EventsCategoryUncheckedCreateInput>
  }

  /**
   * EventsCategory createMany
   */
  export type EventsCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventsCategories.
     */
    data: EventsCategoryCreateManyInput | EventsCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventsCategory createManyAndReturn
   */
  export type EventsCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventsCategories.
     */
    data: EventsCategoryCreateManyInput | EventsCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventsCategory update
   */
  export type EventsCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a EventsCategory.
     */
    data: XOR<EventsCategoryUpdateInput, EventsCategoryUncheckedUpdateInput>
    /**
     * Choose, which EventsCategory to update.
     */
    where: EventsCategoryWhereUniqueInput
  }

  /**
   * EventsCategory updateMany
   */
  export type EventsCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventsCategories.
     */
    data: XOR<EventsCategoryUpdateManyMutationInput, EventsCategoryUncheckedUpdateManyInput>
    /**
     * Filter which EventsCategories to update
     */
    where?: EventsCategoryWhereInput
  }

  /**
   * EventsCategory upsert
   */
  export type EventsCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the EventsCategory to update in case it exists.
     */
    where: EventsCategoryWhereUniqueInput
    /**
     * In case the EventsCategory found by the `where` argument doesn't exist, create a new EventsCategory with this data.
     */
    create: XOR<EventsCategoryCreateInput, EventsCategoryUncheckedCreateInput>
    /**
     * In case the EventsCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventsCategoryUpdateInput, EventsCategoryUncheckedUpdateInput>
  }

  /**
   * EventsCategory delete
   */
  export type EventsCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    /**
     * Filter which EventsCategory to delete.
     */
    where: EventsCategoryWhereUniqueInput
  }

  /**
   * EventsCategory deleteMany
   */
  export type EventsCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventsCategories to delete
     */
    where?: EventsCategoryWhereInput
  }

  /**
   * EventsCategory.events
   */
  export type EventsCategory$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    where?: EventsWhereInput
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    cursor?: EventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * EventsCategory without action
   */
  export type EventsCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Events
   */

  export type AggregateEvents = {
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  export type EventsAvgAggregateOutputType = {
    id: number | null
    capacity: number | null
    categoryId: number | null
  }

  export type EventsSumAggregateOutputType = {
    id: number | null
    capacity: number | null
    categoryId: number | null
  }

  export type EventsMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    cover: string | null
    startDate: Date | null
    endDate: Date | null
    capacity: number | null
    addressLine1: string | null
    addressLine2: string | null
    postalCode: string | null
    city: string | null
    region: string | null
    country: string | null
    categoryId: number | null
    status: $Enums.StatusEvents | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type EventsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    cover: string | null
    startDate: Date | null
    endDate: Date | null
    capacity: number | null
    addressLine1: string | null
    addressLine2: string | null
    postalCode: string | null
    city: string | null
    region: string | null
    country: string | null
    categoryId: number | null
    status: $Enums.StatusEvents | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type EventsCountAggregateOutputType = {
    id: number
    name: number
    description: number
    cover: number
    startDate: number
    endDate: number
    capacity: number
    addressLine1: number
    addressLine2: number
    postalCode: number
    city: number
    region: number
    country: number
    categoryId: number
    status: number
    created: number
    modified: number
    deleted: number
    _all: number
  }


  export type EventsAvgAggregateInputType = {
    id?: true
    capacity?: true
    categoryId?: true
  }

  export type EventsSumAggregateInputType = {
    id?: true
    capacity?: true
    categoryId?: true
  }

  export type EventsMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    cover?: true
    startDate?: true
    endDate?: true
    capacity?: true
    addressLine1?: true
    addressLine2?: true
    postalCode?: true
    city?: true
    region?: true
    country?: true
    categoryId?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type EventsMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    cover?: true
    startDate?: true
    endDate?: true
    capacity?: true
    addressLine1?: true
    addressLine2?: true
    postalCode?: true
    city?: true
    region?: true
    country?: true
    categoryId?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type EventsCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    cover?: true
    startDate?: true
    endDate?: true
    capacity?: true
    addressLine1?: true
    addressLine2?: true
    postalCode?: true
    city?: true
    region?: true
    country?: true
    categoryId?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
    _all?: true
  }

  export type EventsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to aggregate.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventsMaxAggregateInputType
  }

  export type GetEventsAggregateType<T extends EventsAggregateArgs> = {
        [P in keyof T & keyof AggregateEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvents[P]>
      : GetScalarType<T[P], AggregateEvents[P]>
  }




  export type EventsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventsWhereInput
    orderBy?: EventsOrderByWithAggregationInput | EventsOrderByWithAggregationInput[]
    by: EventsScalarFieldEnum[] | EventsScalarFieldEnum
    having?: EventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventsCountAggregateInputType | true
    _avg?: EventsAvgAggregateInputType
    _sum?: EventsSumAggregateInputType
    _min?: EventsMinAggregateInputType
    _max?: EventsMaxAggregateInputType
  }

  export type EventsGroupByOutputType = {
    id: number
    name: string
    description: string | null
    cover: string | null
    startDate: Date
    endDate: Date
    capacity: number
    addressLine1: string
    addressLine2: string | null
    postalCode: string
    city: string
    region: string
    country: string
    categoryId: number | null
    status: $Enums.StatusEvents
    created: Date
    modified: Date
    deleted: Date | null
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  type GetEventsGroupByPayload<T extends EventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventsGroupByOutputType[P]>
            : GetScalarType<T[P], EventsGroupByOutputType[P]>
        }
      >
    >


  export type EventsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    cover?: boolean
    startDate?: boolean
    endDate?: boolean
    capacity?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    postalCode?: boolean
    city?: boolean
    region?: boolean
    country?: boolean
    categoryId?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
    category?: boolean | Events$categoryArgs<ExtArgs>
    tickets?: boolean | Events$ticketsArgs<ExtArgs>
    addEvents?: boolean | Events$addEventsArgs<ExtArgs>
    _count?: boolean | EventsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["events"]>

  export type EventsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    cover?: boolean
    startDate?: boolean
    endDate?: boolean
    capacity?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    postalCode?: boolean
    city?: boolean
    region?: boolean
    country?: boolean
    categoryId?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
    category?: boolean | Events$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["events"]>

  export type EventsSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    cover?: boolean
    startDate?: boolean
    endDate?: boolean
    capacity?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    postalCode?: boolean
    city?: boolean
    region?: boolean
    country?: boolean
    categoryId?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
  }

  export type EventsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Events$categoryArgs<ExtArgs>
    tickets?: boolean | Events$ticketsArgs<ExtArgs>
    addEvents?: boolean | Events$addEventsArgs<ExtArgs>
    _count?: boolean | EventsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Events$categoryArgs<ExtArgs>
  }

  export type $EventsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Events"
    objects: {
      category: Prisma.$EventsCategoryPayload<ExtArgs> | null
      tickets: Prisma.$TicketsInfoPayload<ExtArgs>[]
      addEvents: Prisma.$UsersEventsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      cover: string | null
      startDate: Date
      endDate: Date
      capacity: number
      addressLine1: string
      addressLine2: string | null
      postalCode: string
      city: string
      region: string
      country: string
      categoryId: number | null
      status: $Enums.StatusEvents
      created: Date
      modified: Date
      deleted: Date | null
    }, ExtArgs["result"]["events"]>
    composites: {}
  }

  type EventsGetPayload<S extends boolean | null | undefined | EventsDefaultArgs> = $Result.GetResult<Prisma.$EventsPayload, S>

  type EventsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventsCountAggregateInputType | true
    }

  export interface EventsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Events'], meta: { name: 'Events' } }
    /**
     * Find zero or one Events that matches the filter.
     * @param {EventsFindUniqueArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventsFindUniqueArgs>(args: SelectSubset<T, EventsFindUniqueArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Events that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventsFindUniqueOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventsFindUniqueOrThrowArgs>(args: SelectSubset<T, EventsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindFirstArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventsFindFirstArgs>(args?: SelectSubset<T, EventsFindFirstArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Events that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindFirstOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventsFindFirstOrThrowArgs>(args?: SelectSubset<T, EventsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.events.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.events.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventsWithIdOnly = await prisma.events.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventsFindManyArgs>(args?: SelectSubset<T, EventsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Events.
     * @param {EventsCreateArgs} args - Arguments to create a Events.
     * @example
     * // Create one Events
     * const Events = await prisma.events.create({
     *   data: {
     *     // ... data to create a Events
     *   }
     * })
     * 
     */
    create<T extends EventsCreateArgs>(args: SelectSubset<T, EventsCreateArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventsCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const events = await prisma.events.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventsCreateManyArgs>(args?: SelectSubset<T, EventsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventsCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const events = await prisma.events.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventsWithIdOnly = await prisma.events.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventsCreateManyAndReturnArgs>(args?: SelectSubset<T, EventsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Events.
     * @param {EventsDeleteArgs} args - Arguments to delete one Events.
     * @example
     * // Delete one Events
     * const Events = await prisma.events.delete({
     *   where: {
     *     // ... filter to delete one Events
     *   }
     * })
     * 
     */
    delete<T extends EventsDeleteArgs>(args: SelectSubset<T, EventsDeleteArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Events.
     * @param {EventsUpdateArgs} args - Arguments to update one Events.
     * @example
     * // Update one Events
     * const events = await prisma.events.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventsUpdateArgs>(args: SelectSubset<T, EventsUpdateArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventsDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.events.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventsDeleteManyArgs>(args?: SelectSubset<T, EventsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const events = await prisma.events.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventsUpdateManyArgs>(args: SelectSubset<T, EventsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Events.
     * @param {EventsUpsertArgs} args - Arguments to update or create a Events.
     * @example
     * // Update or create a Events
     * const events = await prisma.events.upsert({
     *   create: {
     *     // ... data to create a Events
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Events we want to update
     *   }
     * })
     */
    upsert<T extends EventsUpsertArgs>(args: SelectSubset<T, EventsUpsertArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.events.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventsCountArgs>(
      args?: Subset<T, EventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventsAggregateArgs>(args: Subset<T, EventsAggregateArgs>): Prisma.PrismaPromise<GetEventsAggregateType<T>>

    /**
     * Group by Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventsGroupByArgs['orderBy'] }
        : { orderBy?: EventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Events model
   */
  readonly fields: EventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Events.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends Events$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Events$categoryArgs<ExtArgs>>): Prisma__EventsCategoryClient<$Result.GetResult<Prisma.$EventsCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tickets<T extends Events$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Events$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "findMany"> | Null>
    addEvents<T extends Events$addEventsArgs<ExtArgs> = {}>(args?: Subset<T, Events$addEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Events model
   */ 
  interface EventsFieldRefs {
    readonly id: FieldRef<"Events", 'Int'>
    readonly name: FieldRef<"Events", 'String'>
    readonly description: FieldRef<"Events", 'String'>
    readonly cover: FieldRef<"Events", 'String'>
    readonly startDate: FieldRef<"Events", 'DateTime'>
    readonly endDate: FieldRef<"Events", 'DateTime'>
    readonly capacity: FieldRef<"Events", 'Int'>
    readonly addressLine1: FieldRef<"Events", 'String'>
    readonly addressLine2: FieldRef<"Events", 'String'>
    readonly postalCode: FieldRef<"Events", 'String'>
    readonly city: FieldRef<"Events", 'String'>
    readonly region: FieldRef<"Events", 'String'>
    readonly country: FieldRef<"Events", 'String'>
    readonly categoryId: FieldRef<"Events", 'Int'>
    readonly status: FieldRef<"Events", 'StatusEvents'>
    readonly created: FieldRef<"Events", 'DateTime'>
    readonly modified: FieldRef<"Events", 'DateTime'>
    readonly deleted: FieldRef<"Events", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Events findUnique
   */
  export type EventsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events findUniqueOrThrow
   */
  export type EventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events findFirst
   */
  export type EventsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events findFirstOrThrow
   */
  export type EventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events findMany
   */
  export type EventsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events create
   */
  export type EventsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The data needed to create a Events.
     */
    data: XOR<EventsCreateInput, EventsUncheckedCreateInput>
  }

  /**
   * Events createMany
   */
  export type EventsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventsCreateManyInput | EventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Events createManyAndReturn
   */
  export type EventsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventsCreateManyInput | EventsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Events update
   */
  export type EventsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The data needed to update a Events.
     */
    data: XOR<EventsUpdateInput, EventsUncheckedUpdateInput>
    /**
     * Choose, which Events to update.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events updateMany
   */
  export type EventsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventsUpdateManyMutationInput, EventsUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventsWhereInput
  }

  /**
   * Events upsert
   */
  export type EventsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The filter to search for the Events to update in case it exists.
     */
    where: EventsWhereUniqueInput
    /**
     * In case the Events found by the `where` argument doesn't exist, create a new Events with this data.
     */
    create: XOR<EventsCreateInput, EventsUncheckedCreateInput>
    /**
     * In case the Events was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventsUpdateInput, EventsUncheckedUpdateInput>
  }

  /**
   * Events delete
   */
  export type EventsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter which Events to delete.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events deleteMany
   */
  export type EventsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventsWhereInput
  }

  /**
   * Events.category
   */
  export type Events$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCategory
     */
    select?: EventsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsCategoryInclude<ExtArgs> | null
    where?: EventsCategoryWhereInput
  }

  /**
   * Events.tickets
   */
  export type Events$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    where?: TicketsInfoWhereInput
    orderBy?: TicketsInfoOrderByWithRelationInput | TicketsInfoOrderByWithRelationInput[]
    cursor?: TicketsInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsInfoScalarFieldEnum | TicketsInfoScalarFieldEnum[]
  }

  /**
   * Events.addEvents
   */
  export type Events$addEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    where?: UsersEventsWhereInput
    orderBy?: UsersEventsOrderByWithRelationInput | UsersEventsOrderByWithRelationInput[]
    cursor?: UsersEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersEventsScalarFieldEnum | UsersEventsScalarFieldEnum[]
  }

  /**
   * Events without action
   */
  export type EventsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
  }


  /**
   * Model TicketsType
   */

  export type AggregateTicketsType = {
    _count: TicketsTypeCountAggregateOutputType | null
    _avg: TicketsTypeAvgAggregateOutputType | null
    _sum: TicketsTypeSumAggregateOutputType | null
    _min: TicketsTypeMinAggregateOutputType | null
    _max: TicketsTypeMaxAggregateOutputType | null
  }

  export type TicketsTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type TicketsTypeSumAggregateOutputType = {
    id: number | null
  }

  export type TicketsTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    status: $Enums.StatusTicketsType | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type TicketsTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    status: $Enums.StatusTicketsType | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type TicketsTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    created: number
    modified: number
    deleted: number
    _all: number
  }


  export type TicketsTypeAvgAggregateInputType = {
    id?: true
  }

  export type TicketsTypeSumAggregateInputType = {
    id?: true
  }

  export type TicketsTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type TicketsTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type TicketsTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
    _all?: true
  }

  export type TicketsTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketsType to aggregate.
     */
    where?: TicketsTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketsTypes to fetch.
     */
    orderBy?: TicketsTypeOrderByWithRelationInput | TicketsTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketsTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketsTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketsTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TicketsTypes
    **/
    _count?: true | TicketsTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketsTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketsTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsTypeMaxAggregateInputType
  }

  export type GetTicketsTypeAggregateType<T extends TicketsTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateTicketsType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicketsType[P]>
      : GetScalarType<T[P], AggregateTicketsType[P]>
  }




  export type TicketsTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsTypeWhereInput
    orderBy?: TicketsTypeOrderByWithAggregationInput | TicketsTypeOrderByWithAggregationInput[]
    by: TicketsTypeScalarFieldEnum[] | TicketsTypeScalarFieldEnum
    having?: TicketsTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsTypeCountAggregateInputType | true
    _avg?: TicketsTypeAvgAggregateInputType
    _sum?: TicketsTypeSumAggregateInputType
    _min?: TicketsTypeMinAggregateInputType
    _max?: TicketsTypeMaxAggregateInputType
  }

  export type TicketsTypeGroupByOutputType = {
    id: number
    name: string
    description: string | null
    status: $Enums.StatusTicketsType
    created: Date
    modified: Date
    deleted: Date | null
    _count: TicketsTypeCountAggregateOutputType | null
    _avg: TicketsTypeAvgAggregateOutputType | null
    _sum: TicketsTypeSumAggregateOutputType | null
    _min: TicketsTypeMinAggregateOutputType | null
    _max: TicketsTypeMaxAggregateOutputType | null
  }

  type GetTicketsTypeGroupByPayload<T extends TicketsTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketsTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsTypeGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsTypeGroupByOutputType[P]>
        }
      >
    >


  export type TicketsTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
    tickets?: boolean | TicketsType$ticketsArgs<ExtArgs>
    _count?: boolean | TicketsTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticketsType"]>

  export type TicketsTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
  }, ExtArgs["result"]["ticketsType"]>

  export type TicketsTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
  }

  export type TicketsTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | TicketsType$ticketsArgs<ExtArgs>
    _count?: boolean | TicketsTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TicketsTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TicketsTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TicketsType"
    objects: {
      tickets: Prisma.$TicketsInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      status: $Enums.StatusTicketsType
      created: Date
      modified: Date
      deleted: Date | null
    }, ExtArgs["result"]["ticketsType"]>
    composites: {}
  }

  type TicketsTypeGetPayload<S extends boolean | null | undefined | TicketsTypeDefaultArgs> = $Result.GetResult<Prisma.$TicketsTypePayload, S>

  type TicketsTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketsTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketsTypeCountAggregateInputType | true
    }

  export interface TicketsTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TicketsType'], meta: { name: 'TicketsType' } }
    /**
     * Find zero or one TicketsType that matches the filter.
     * @param {TicketsTypeFindUniqueArgs} args - Arguments to find a TicketsType
     * @example
     * // Get one TicketsType
     * const ticketsType = await prisma.ticketsType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketsTypeFindUniqueArgs>(args: SelectSubset<T, TicketsTypeFindUniqueArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TicketsType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketsTypeFindUniqueOrThrowArgs} args - Arguments to find a TicketsType
     * @example
     * // Get one TicketsType
     * const ticketsType = await prisma.ticketsType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketsTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketsTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TicketsType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsTypeFindFirstArgs} args - Arguments to find a TicketsType
     * @example
     * // Get one TicketsType
     * const ticketsType = await prisma.ticketsType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketsTypeFindFirstArgs>(args?: SelectSubset<T, TicketsTypeFindFirstArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TicketsType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsTypeFindFirstOrThrowArgs} args - Arguments to find a TicketsType
     * @example
     * // Get one TicketsType
     * const ticketsType = await prisma.ticketsType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketsTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketsTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TicketsTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TicketsTypes
     * const ticketsTypes = await prisma.ticketsType.findMany()
     * 
     * // Get first 10 TicketsTypes
     * const ticketsTypes = await prisma.ticketsType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketsTypeWithIdOnly = await prisma.ticketsType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketsTypeFindManyArgs>(args?: SelectSubset<T, TicketsTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TicketsType.
     * @param {TicketsTypeCreateArgs} args - Arguments to create a TicketsType.
     * @example
     * // Create one TicketsType
     * const TicketsType = await prisma.ticketsType.create({
     *   data: {
     *     // ... data to create a TicketsType
     *   }
     * })
     * 
     */
    create<T extends TicketsTypeCreateArgs>(args: SelectSubset<T, TicketsTypeCreateArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TicketsTypes.
     * @param {TicketsTypeCreateManyArgs} args - Arguments to create many TicketsTypes.
     * @example
     * // Create many TicketsTypes
     * const ticketsType = await prisma.ticketsType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketsTypeCreateManyArgs>(args?: SelectSubset<T, TicketsTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TicketsTypes and returns the data saved in the database.
     * @param {TicketsTypeCreateManyAndReturnArgs} args - Arguments to create many TicketsTypes.
     * @example
     * // Create many TicketsTypes
     * const ticketsType = await prisma.ticketsType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TicketsTypes and only return the `id`
     * const ticketsTypeWithIdOnly = await prisma.ticketsType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketsTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketsTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TicketsType.
     * @param {TicketsTypeDeleteArgs} args - Arguments to delete one TicketsType.
     * @example
     * // Delete one TicketsType
     * const TicketsType = await prisma.ticketsType.delete({
     *   where: {
     *     // ... filter to delete one TicketsType
     *   }
     * })
     * 
     */
    delete<T extends TicketsTypeDeleteArgs>(args: SelectSubset<T, TicketsTypeDeleteArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TicketsType.
     * @param {TicketsTypeUpdateArgs} args - Arguments to update one TicketsType.
     * @example
     * // Update one TicketsType
     * const ticketsType = await prisma.ticketsType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketsTypeUpdateArgs>(args: SelectSubset<T, TicketsTypeUpdateArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TicketsTypes.
     * @param {TicketsTypeDeleteManyArgs} args - Arguments to filter TicketsTypes to delete.
     * @example
     * // Delete a few TicketsTypes
     * const { count } = await prisma.ticketsType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketsTypeDeleteManyArgs>(args?: SelectSubset<T, TicketsTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketsTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TicketsTypes
     * const ticketsType = await prisma.ticketsType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketsTypeUpdateManyArgs>(args: SelectSubset<T, TicketsTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TicketsType.
     * @param {TicketsTypeUpsertArgs} args - Arguments to update or create a TicketsType.
     * @example
     * // Update or create a TicketsType
     * const ticketsType = await prisma.ticketsType.upsert({
     *   create: {
     *     // ... data to create a TicketsType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TicketsType we want to update
     *   }
     * })
     */
    upsert<T extends TicketsTypeUpsertArgs>(args: SelectSubset<T, TicketsTypeUpsertArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TicketsTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsTypeCountArgs} args - Arguments to filter TicketsTypes to count.
     * @example
     * // Count the number of TicketsTypes
     * const count = await prisma.ticketsType.count({
     *   where: {
     *     // ... the filter for the TicketsTypes we want to count
     *   }
     * })
    **/
    count<T extends TicketsTypeCountArgs>(
      args?: Subset<T, TicketsTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TicketsType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsTypeAggregateArgs>(args: Subset<T, TicketsTypeAggregateArgs>): Prisma.PrismaPromise<GetTicketsTypeAggregateType<T>>

    /**
     * Group by TicketsType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketsTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketsTypeGroupByArgs['orderBy'] }
        : { orderBy?: TicketsTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketsTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TicketsType model
   */
  readonly fields: TicketsTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TicketsType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketsTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends TicketsType$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, TicketsType$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TicketsType model
   */ 
  interface TicketsTypeFieldRefs {
    readonly id: FieldRef<"TicketsType", 'Int'>
    readonly name: FieldRef<"TicketsType", 'String'>
    readonly description: FieldRef<"TicketsType", 'String'>
    readonly status: FieldRef<"TicketsType", 'StatusTicketsType'>
    readonly created: FieldRef<"TicketsType", 'DateTime'>
    readonly modified: FieldRef<"TicketsType", 'DateTime'>
    readonly deleted: FieldRef<"TicketsType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TicketsType findUnique
   */
  export type TicketsTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * Filter, which TicketsType to fetch.
     */
    where: TicketsTypeWhereUniqueInput
  }

  /**
   * TicketsType findUniqueOrThrow
   */
  export type TicketsTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * Filter, which TicketsType to fetch.
     */
    where: TicketsTypeWhereUniqueInput
  }

  /**
   * TicketsType findFirst
   */
  export type TicketsTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * Filter, which TicketsType to fetch.
     */
    where?: TicketsTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketsTypes to fetch.
     */
    orderBy?: TicketsTypeOrderByWithRelationInput | TicketsTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketsTypes.
     */
    cursor?: TicketsTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketsTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketsTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketsTypes.
     */
    distinct?: TicketsTypeScalarFieldEnum | TicketsTypeScalarFieldEnum[]
  }

  /**
   * TicketsType findFirstOrThrow
   */
  export type TicketsTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * Filter, which TicketsType to fetch.
     */
    where?: TicketsTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketsTypes to fetch.
     */
    orderBy?: TicketsTypeOrderByWithRelationInput | TicketsTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketsTypes.
     */
    cursor?: TicketsTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketsTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketsTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketsTypes.
     */
    distinct?: TicketsTypeScalarFieldEnum | TicketsTypeScalarFieldEnum[]
  }

  /**
   * TicketsType findMany
   */
  export type TicketsTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * Filter, which TicketsTypes to fetch.
     */
    where?: TicketsTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketsTypes to fetch.
     */
    orderBy?: TicketsTypeOrderByWithRelationInput | TicketsTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TicketsTypes.
     */
    cursor?: TicketsTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketsTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketsTypes.
     */
    skip?: number
    distinct?: TicketsTypeScalarFieldEnum | TicketsTypeScalarFieldEnum[]
  }

  /**
   * TicketsType create
   */
  export type TicketsTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a TicketsType.
     */
    data: XOR<TicketsTypeCreateInput, TicketsTypeUncheckedCreateInput>
  }

  /**
   * TicketsType createMany
   */
  export type TicketsTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TicketsTypes.
     */
    data: TicketsTypeCreateManyInput | TicketsTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TicketsType createManyAndReturn
   */
  export type TicketsTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TicketsTypes.
     */
    data: TicketsTypeCreateManyInput | TicketsTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TicketsType update
   */
  export type TicketsTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a TicketsType.
     */
    data: XOR<TicketsTypeUpdateInput, TicketsTypeUncheckedUpdateInput>
    /**
     * Choose, which TicketsType to update.
     */
    where: TicketsTypeWhereUniqueInput
  }

  /**
   * TicketsType updateMany
   */
  export type TicketsTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TicketsTypes.
     */
    data: XOR<TicketsTypeUpdateManyMutationInput, TicketsTypeUncheckedUpdateManyInput>
    /**
     * Filter which TicketsTypes to update
     */
    where?: TicketsTypeWhereInput
  }

  /**
   * TicketsType upsert
   */
  export type TicketsTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the TicketsType to update in case it exists.
     */
    where: TicketsTypeWhereUniqueInput
    /**
     * In case the TicketsType found by the `where` argument doesn't exist, create a new TicketsType with this data.
     */
    create: XOR<TicketsTypeCreateInput, TicketsTypeUncheckedCreateInput>
    /**
     * In case the TicketsType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketsTypeUpdateInput, TicketsTypeUncheckedUpdateInput>
  }

  /**
   * TicketsType delete
   */
  export type TicketsTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    /**
     * Filter which TicketsType to delete.
     */
    where: TicketsTypeWhereUniqueInput
  }

  /**
   * TicketsType deleteMany
   */
  export type TicketsTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketsTypes to delete
     */
    where?: TicketsTypeWhereInput
  }

  /**
   * TicketsType.tickets
   */
  export type TicketsType$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    where?: TicketsInfoWhereInput
    orderBy?: TicketsInfoOrderByWithRelationInput | TicketsInfoOrderByWithRelationInput[]
    cursor?: TicketsInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsInfoScalarFieldEnum | TicketsInfoScalarFieldEnum[]
  }

  /**
   * TicketsType without action
   */
  export type TicketsTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
  }


  /**
   * Model TicketsInfo
   */

  export type AggregateTicketsInfo = {
    _count: TicketsInfoCountAggregateOutputType | null
    _avg: TicketsInfoAvgAggregateOutputType | null
    _sum: TicketsInfoSumAggregateOutputType | null
    _min: TicketsInfoMinAggregateOutputType | null
    _max: TicketsInfoMaxAggregateOutputType | null
  }

  export type TicketsInfoAvgAggregateOutputType = {
    id: number | null
    eventsId: number | null
    typeId: number | null
    price: number | null
    quantity: number | null
  }

  export type TicketsInfoSumAggregateOutputType = {
    id: number | null
    eventsId: number | null
    typeId: number | null
    price: number | null
    quantity: number | null
  }

  export type TicketsInfoMinAggregateOutputType = {
    id: number | null
    eventsId: number | null
    typeId: number | null
    SKU: string | null
    price: number | null
    quantity: number | null
    status: $Enums.StatusTicketsInfo | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type TicketsInfoMaxAggregateOutputType = {
    id: number | null
    eventsId: number | null
    typeId: number | null
    SKU: string | null
    price: number | null
    quantity: number | null
    status: $Enums.StatusTicketsInfo | null
    created: Date | null
    modified: Date | null
    deleted: Date | null
  }

  export type TicketsInfoCountAggregateOutputType = {
    id: number
    eventsId: number
    typeId: number
    SKU: number
    price: number
    quantity: number
    status: number
    created: number
    modified: number
    deleted: number
    _all: number
  }


  export type TicketsInfoAvgAggregateInputType = {
    id?: true
    eventsId?: true
    typeId?: true
    price?: true
    quantity?: true
  }

  export type TicketsInfoSumAggregateInputType = {
    id?: true
    eventsId?: true
    typeId?: true
    price?: true
    quantity?: true
  }

  export type TicketsInfoMinAggregateInputType = {
    id?: true
    eventsId?: true
    typeId?: true
    SKU?: true
    price?: true
    quantity?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type TicketsInfoMaxAggregateInputType = {
    id?: true
    eventsId?: true
    typeId?: true
    SKU?: true
    price?: true
    quantity?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
  }

  export type TicketsInfoCountAggregateInputType = {
    id?: true
    eventsId?: true
    typeId?: true
    SKU?: true
    price?: true
    quantity?: true
    status?: true
    created?: true
    modified?: true
    deleted?: true
    _all?: true
  }

  export type TicketsInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketsInfo to aggregate.
     */
    where?: TicketsInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketsInfos to fetch.
     */
    orderBy?: TicketsInfoOrderByWithRelationInput | TicketsInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketsInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketsInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketsInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TicketsInfos
    **/
    _count?: true | TicketsInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketsInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketsInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsInfoMaxAggregateInputType
  }

  export type GetTicketsInfoAggregateType<T extends TicketsInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateTicketsInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicketsInfo[P]>
      : GetScalarType<T[P], AggregateTicketsInfo[P]>
  }




  export type TicketsInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsInfoWhereInput
    orderBy?: TicketsInfoOrderByWithAggregationInput | TicketsInfoOrderByWithAggregationInput[]
    by: TicketsInfoScalarFieldEnum[] | TicketsInfoScalarFieldEnum
    having?: TicketsInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsInfoCountAggregateInputType | true
    _avg?: TicketsInfoAvgAggregateInputType
    _sum?: TicketsInfoSumAggregateInputType
    _min?: TicketsInfoMinAggregateInputType
    _max?: TicketsInfoMaxAggregateInputType
  }

  export type TicketsInfoGroupByOutputType = {
    id: number
    eventsId: number
    typeId: number | null
    SKU: string
    price: number
    quantity: number
    status: $Enums.StatusTicketsInfo
    created: Date
    modified: Date
    deleted: Date | null
    _count: TicketsInfoCountAggregateOutputType | null
    _avg: TicketsInfoAvgAggregateOutputType | null
    _sum: TicketsInfoSumAggregateOutputType | null
    _min: TicketsInfoMinAggregateOutputType | null
    _max: TicketsInfoMaxAggregateOutputType | null
  }

  type GetTicketsInfoGroupByPayload<T extends TicketsInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketsInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsInfoGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsInfoGroupByOutputType[P]>
        }
      >
    >


  export type TicketsInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventsId?: boolean
    typeId?: boolean
    SKU?: boolean
    price?: boolean
    quantity?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
    event?: boolean | EventsDefaultArgs<ExtArgs>
    type?: boolean | TicketsInfo$typeArgs<ExtArgs>
    orderedTickets?: boolean | TicketsInfo$orderedTicketsArgs<ExtArgs>
    _count?: boolean | TicketsInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticketsInfo"]>

  export type TicketsInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventsId?: boolean
    typeId?: boolean
    SKU?: boolean
    price?: boolean
    quantity?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
    event?: boolean | EventsDefaultArgs<ExtArgs>
    type?: boolean | TicketsInfo$typeArgs<ExtArgs>
  }, ExtArgs["result"]["ticketsInfo"]>

  export type TicketsInfoSelectScalar = {
    id?: boolean
    eventsId?: boolean
    typeId?: boolean
    SKU?: boolean
    price?: boolean
    quantity?: boolean
    status?: boolean
    created?: boolean
    modified?: boolean
    deleted?: boolean
  }

  export type TicketsInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventsDefaultArgs<ExtArgs>
    type?: boolean | TicketsInfo$typeArgs<ExtArgs>
    orderedTickets?: boolean | TicketsInfo$orderedTicketsArgs<ExtArgs>
    _count?: boolean | TicketsInfoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TicketsInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventsDefaultArgs<ExtArgs>
    type?: boolean | TicketsInfo$typeArgs<ExtArgs>
  }

  export type $TicketsInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TicketsInfo"
    objects: {
      event: Prisma.$EventsPayload<ExtArgs>
      type: Prisma.$TicketsTypePayload<ExtArgs> | null
      orderedTickets: Prisma.$OrderedTicketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eventsId: number
      typeId: number | null
      SKU: string
      price: number
      quantity: number
      status: $Enums.StatusTicketsInfo
      created: Date
      modified: Date
      deleted: Date | null
    }, ExtArgs["result"]["ticketsInfo"]>
    composites: {}
  }

  type TicketsInfoGetPayload<S extends boolean | null | undefined | TicketsInfoDefaultArgs> = $Result.GetResult<Prisma.$TicketsInfoPayload, S>

  type TicketsInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketsInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketsInfoCountAggregateInputType | true
    }

  export interface TicketsInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TicketsInfo'], meta: { name: 'TicketsInfo' } }
    /**
     * Find zero or one TicketsInfo that matches the filter.
     * @param {TicketsInfoFindUniqueArgs} args - Arguments to find a TicketsInfo
     * @example
     * // Get one TicketsInfo
     * const ticketsInfo = await prisma.ticketsInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketsInfoFindUniqueArgs>(args: SelectSubset<T, TicketsInfoFindUniqueArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TicketsInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketsInfoFindUniqueOrThrowArgs} args - Arguments to find a TicketsInfo
     * @example
     * // Get one TicketsInfo
     * const ticketsInfo = await prisma.ticketsInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketsInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketsInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TicketsInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsInfoFindFirstArgs} args - Arguments to find a TicketsInfo
     * @example
     * // Get one TicketsInfo
     * const ticketsInfo = await prisma.ticketsInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketsInfoFindFirstArgs>(args?: SelectSubset<T, TicketsInfoFindFirstArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TicketsInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsInfoFindFirstOrThrowArgs} args - Arguments to find a TicketsInfo
     * @example
     * // Get one TicketsInfo
     * const ticketsInfo = await prisma.ticketsInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketsInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketsInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TicketsInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TicketsInfos
     * const ticketsInfos = await prisma.ticketsInfo.findMany()
     * 
     * // Get first 10 TicketsInfos
     * const ticketsInfos = await prisma.ticketsInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketsInfoWithIdOnly = await prisma.ticketsInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketsInfoFindManyArgs>(args?: SelectSubset<T, TicketsInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TicketsInfo.
     * @param {TicketsInfoCreateArgs} args - Arguments to create a TicketsInfo.
     * @example
     * // Create one TicketsInfo
     * const TicketsInfo = await prisma.ticketsInfo.create({
     *   data: {
     *     // ... data to create a TicketsInfo
     *   }
     * })
     * 
     */
    create<T extends TicketsInfoCreateArgs>(args: SelectSubset<T, TicketsInfoCreateArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TicketsInfos.
     * @param {TicketsInfoCreateManyArgs} args - Arguments to create many TicketsInfos.
     * @example
     * // Create many TicketsInfos
     * const ticketsInfo = await prisma.ticketsInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketsInfoCreateManyArgs>(args?: SelectSubset<T, TicketsInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TicketsInfos and returns the data saved in the database.
     * @param {TicketsInfoCreateManyAndReturnArgs} args - Arguments to create many TicketsInfos.
     * @example
     * // Create many TicketsInfos
     * const ticketsInfo = await prisma.ticketsInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TicketsInfos and only return the `id`
     * const ticketsInfoWithIdOnly = await prisma.ticketsInfo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketsInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketsInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TicketsInfo.
     * @param {TicketsInfoDeleteArgs} args - Arguments to delete one TicketsInfo.
     * @example
     * // Delete one TicketsInfo
     * const TicketsInfo = await prisma.ticketsInfo.delete({
     *   where: {
     *     // ... filter to delete one TicketsInfo
     *   }
     * })
     * 
     */
    delete<T extends TicketsInfoDeleteArgs>(args: SelectSubset<T, TicketsInfoDeleteArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TicketsInfo.
     * @param {TicketsInfoUpdateArgs} args - Arguments to update one TicketsInfo.
     * @example
     * // Update one TicketsInfo
     * const ticketsInfo = await prisma.ticketsInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketsInfoUpdateArgs>(args: SelectSubset<T, TicketsInfoUpdateArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TicketsInfos.
     * @param {TicketsInfoDeleteManyArgs} args - Arguments to filter TicketsInfos to delete.
     * @example
     * // Delete a few TicketsInfos
     * const { count } = await prisma.ticketsInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketsInfoDeleteManyArgs>(args?: SelectSubset<T, TicketsInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketsInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TicketsInfos
     * const ticketsInfo = await prisma.ticketsInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketsInfoUpdateManyArgs>(args: SelectSubset<T, TicketsInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TicketsInfo.
     * @param {TicketsInfoUpsertArgs} args - Arguments to update or create a TicketsInfo.
     * @example
     * // Update or create a TicketsInfo
     * const ticketsInfo = await prisma.ticketsInfo.upsert({
     *   create: {
     *     // ... data to create a TicketsInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TicketsInfo we want to update
     *   }
     * })
     */
    upsert<T extends TicketsInfoUpsertArgs>(args: SelectSubset<T, TicketsInfoUpsertArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TicketsInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsInfoCountArgs} args - Arguments to filter TicketsInfos to count.
     * @example
     * // Count the number of TicketsInfos
     * const count = await prisma.ticketsInfo.count({
     *   where: {
     *     // ... the filter for the TicketsInfos we want to count
     *   }
     * })
    **/
    count<T extends TicketsInfoCountArgs>(
      args?: Subset<T, TicketsInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TicketsInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsInfoAggregateArgs>(args: Subset<T, TicketsInfoAggregateArgs>): Prisma.PrismaPromise<GetTicketsInfoAggregateType<T>>

    /**
     * Group by TicketsInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketsInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketsInfoGroupByArgs['orderBy'] }
        : { orderBy?: TicketsInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketsInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TicketsInfo model
   */
  readonly fields: TicketsInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TicketsInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketsInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventsDefaultArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    type<T extends TicketsInfo$typeArgs<ExtArgs> = {}>(args?: Subset<T, TicketsInfo$typeArgs<ExtArgs>>): Prisma__TicketsTypeClient<$Result.GetResult<Prisma.$TicketsTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    orderedTickets<T extends TicketsInfo$orderedTicketsArgs<ExtArgs> = {}>(args?: Subset<T, TicketsInfo$orderedTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TicketsInfo model
   */ 
  interface TicketsInfoFieldRefs {
    readonly id: FieldRef<"TicketsInfo", 'Int'>
    readonly eventsId: FieldRef<"TicketsInfo", 'Int'>
    readonly typeId: FieldRef<"TicketsInfo", 'Int'>
    readonly SKU: FieldRef<"TicketsInfo", 'String'>
    readonly price: FieldRef<"TicketsInfo", 'Float'>
    readonly quantity: FieldRef<"TicketsInfo", 'Int'>
    readonly status: FieldRef<"TicketsInfo", 'StatusTicketsInfo'>
    readonly created: FieldRef<"TicketsInfo", 'DateTime'>
    readonly modified: FieldRef<"TicketsInfo", 'DateTime'>
    readonly deleted: FieldRef<"TicketsInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TicketsInfo findUnique
   */
  export type TicketsInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * Filter, which TicketsInfo to fetch.
     */
    where: TicketsInfoWhereUniqueInput
  }

  /**
   * TicketsInfo findUniqueOrThrow
   */
  export type TicketsInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * Filter, which TicketsInfo to fetch.
     */
    where: TicketsInfoWhereUniqueInput
  }

  /**
   * TicketsInfo findFirst
   */
  export type TicketsInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * Filter, which TicketsInfo to fetch.
     */
    where?: TicketsInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketsInfos to fetch.
     */
    orderBy?: TicketsInfoOrderByWithRelationInput | TicketsInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketsInfos.
     */
    cursor?: TicketsInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketsInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketsInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketsInfos.
     */
    distinct?: TicketsInfoScalarFieldEnum | TicketsInfoScalarFieldEnum[]
  }

  /**
   * TicketsInfo findFirstOrThrow
   */
  export type TicketsInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * Filter, which TicketsInfo to fetch.
     */
    where?: TicketsInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketsInfos to fetch.
     */
    orderBy?: TicketsInfoOrderByWithRelationInput | TicketsInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketsInfos.
     */
    cursor?: TicketsInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketsInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketsInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketsInfos.
     */
    distinct?: TicketsInfoScalarFieldEnum | TicketsInfoScalarFieldEnum[]
  }

  /**
   * TicketsInfo findMany
   */
  export type TicketsInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * Filter, which TicketsInfos to fetch.
     */
    where?: TicketsInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketsInfos to fetch.
     */
    orderBy?: TicketsInfoOrderByWithRelationInput | TicketsInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TicketsInfos.
     */
    cursor?: TicketsInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketsInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketsInfos.
     */
    skip?: number
    distinct?: TicketsInfoScalarFieldEnum | TicketsInfoScalarFieldEnum[]
  }

  /**
   * TicketsInfo create
   */
  export type TicketsInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a TicketsInfo.
     */
    data: XOR<TicketsInfoCreateInput, TicketsInfoUncheckedCreateInput>
  }

  /**
   * TicketsInfo createMany
   */
  export type TicketsInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TicketsInfos.
     */
    data: TicketsInfoCreateManyInput | TicketsInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TicketsInfo createManyAndReturn
   */
  export type TicketsInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TicketsInfos.
     */
    data: TicketsInfoCreateManyInput | TicketsInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TicketsInfo update
   */
  export type TicketsInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a TicketsInfo.
     */
    data: XOR<TicketsInfoUpdateInput, TicketsInfoUncheckedUpdateInput>
    /**
     * Choose, which TicketsInfo to update.
     */
    where: TicketsInfoWhereUniqueInput
  }

  /**
   * TicketsInfo updateMany
   */
  export type TicketsInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TicketsInfos.
     */
    data: XOR<TicketsInfoUpdateManyMutationInput, TicketsInfoUncheckedUpdateManyInput>
    /**
     * Filter which TicketsInfos to update
     */
    where?: TicketsInfoWhereInput
  }

  /**
   * TicketsInfo upsert
   */
  export type TicketsInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the TicketsInfo to update in case it exists.
     */
    where: TicketsInfoWhereUniqueInput
    /**
     * In case the TicketsInfo found by the `where` argument doesn't exist, create a new TicketsInfo with this data.
     */
    create: XOR<TicketsInfoCreateInput, TicketsInfoUncheckedCreateInput>
    /**
     * In case the TicketsInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketsInfoUpdateInput, TicketsInfoUncheckedUpdateInput>
  }

  /**
   * TicketsInfo delete
   */
  export type TicketsInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
    /**
     * Filter which TicketsInfo to delete.
     */
    where: TicketsInfoWhereUniqueInput
  }

  /**
   * TicketsInfo deleteMany
   */
  export type TicketsInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketsInfos to delete
     */
    where?: TicketsInfoWhereInput
  }

  /**
   * TicketsInfo.type
   */
  export type TicketsInfo$typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsType
     */
    select?: TicketsTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsTypeInclude<ExtArgs> | null
    where?: TicketsTypeWhereInput
  }

  /**
   * TicketsInfo.orderedTickets
   */
  export type TicketsInfo$orderedTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    where?: OrderedTicketsWhereInput
    orderBy?: OrderedTicketsOrderByWithRelationInput | OrderedTicketsOrderByWithRelationInput[]
    cursor?: OrderedTicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderedTicketsScalarFieldEnum | OrderedTicketsScalarFieldEnum[]
  }

  /**
   * TicketsInfo without action
   */
  export type TicketsInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsInfo
     */
    select?: TicketsInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInfoInclude<ExtArgs> | null
  }


  /**
   * Model OrderedTickets
   */

  export type AggregateOrderedTickets = {
    _count: OrderedTicketsCountAggregateOutputType | null
    _avg: OrderedTicketsAvgAggregateOutputType | null
    _sum: OrderedTicketsSumAggregateOutputType | null
    _min: OrderedTicketsMinAggregateOutputType | null
    _max: OrderedTicketsMaxAggregateOutputType | null
  }

  export type OrderedTicketsAvgAggregateOutputType = {
    id: number | null
    ticketsInfoId: number | null
    quantity: number | null
  }

  export type OrderedTicketsSumAggregateOutputType = {
    id: number | null
    ticketsInfoId: number | null
    quantity: number | null
  }

  export type OrderedTicketsMinAggregateOutputType = {
    id: number | null
    ticketsInfoId: number | null
    quantity: number | null
    created: Date | null
    modified: Date | null
  }

  export type OrderedTicketsMaxAggregateOutputType = {
    id: number | null
    ticketsInfoId: number | null
    quantity: number | null
    created: Date | null
    modified: Date | null
  }

  export type OrderedTicketsCountAggregateOutputType = {
    id: number
    ticketsInfoId: number
    quantity: number
    created: number
    modified: number
    _all: number
  }


  export type OrderedTicketsAvgAggregateInputType = {
    id?: true
    ticketsInfoId?: true
    quantity?: true
  }

  export type OrderedTicketsSumAggregateInputType = {
    id?: true
    ticketsInfoId?: true
    quantity?: true
  }

  export type OrderedTicketsMinAggregateInputType = {
    id?: true
    ticketsInfoId?: true
    quantity?: true
    created?: true
    modified?: true
  }

  export type OrderedTicketsMaxAggregateInputType = {
    id?: true
    ticketsInfoId?: true
    quantity?: true
    created?: true
    modified?: true
  }

  export type OrderedTicketsCountAggregateInputType = {
    id?: true
    ticketsInfoId?: true
    quantity?: true
    created?: true
    modified?: true
    _all?: true
  }

  export type OrderedTicketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderedTickets to aggregate.
     */
    where?: OrderedTicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderedTickets to fetch.
     */
    orderBy?: OrderedTicketsOrderByWithRelationInput | OrderedTicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderedTicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderedTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderedTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderedTickets
    **/
    _count?: true | OrderedTicketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderedTicketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderedTicketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderedTicketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderedTicketsMaxAggregateInputType
  }

  export type GetOrderedTicketsAggregateType<T extends OrderedTicketsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderedTickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderedTickets[P]>
      : GetScalarType<T[P], AggregateOrderedTickets[P]>
  }




  export type OrderedTicketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderedTicketsWhereInput
    orderBy?: OrderedTicketsOrderByWithAggregationInput | OrderedTicketsOrderByWithAggregationInput[]
    by: OrderedTicketsScalarFieldEnum[] | OrderedTicketsScalarFieldEnum
    having?: OrderedTicketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderedTicketsCountAggregateInputType | true
    _avg?: OrderedTicketsAvgAggregateInputType
    _sum?: OrderedTicketsSumAggregateInputType
    _min?: OrderedTicketsMinAggregateInputType
    _max?: OrderedTicketsMaxAggregateInputType
  }

  export type OrderedTicketsGroupByOutputType = {
    id: number
    ticketsInfoId: number
    quantity: number
    created: Date
    modified: Date
    _count: OrderedTicketsCountAggregateOutputType | null
    _avg: OrderedTicketsAvgAggregateOutputType | null
    _sum: OrderedTicketsSumAggregateOutputType | null
    _min: OrderedTicketsMinAggregateOutputType | null
    _max: OrderedTicketsMaxAggregateOutputType | null
  }

  type GetOrderedTicketsGroupByPayload<T extends OrderedTicketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderedTicketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderedTicketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderedTicketsGroupByOutputType[P]>
            : GetScalarType<T[P], OrderedTicketsGroupByOutputType[P]>
        }
      >
    >


  export type OrderedTicketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticketsInfoId?: boolean
    quantity?: boolean
    created?: boolean
    modified?: boolean
    ticketsInfo?: boolean | TicketsInfoDefaultArgs<ExtArgs>
    orders?: boolean | OrderedTickets$ordersArgs<ExtArgs>
    _count?: boolean | OrderedTicketsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderedTickets"]>

  export type OrderedTicketsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticketsInfoId?: boolean
    quantity?: boolean
    created?: boolean
    modified?: boolean
    ticketsInfo?: boolean | TicketsInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderedTickets"]>

  export type OrderedTicketsSelectScalar = {
    id?: boolean
    ticketsInfoId?: boolean
    quantity?: boolean
    created?: boolean
    modified?: boolean
  }

  export type OrderedTicketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticketsInfo?: boolean | TicketsInfoDefaultArgs<ExtArgs>
    orders?: boolean | OrderedTickets$ordersArgs<ExtArgs>
    _count?: boolean | OrderedTicketsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderedTicketsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticketsInfo?: boolean | TicketsInfoDefaultArgs<ExtArgs>
  }

  export type $OrderedTicketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderedTickets"
    objects: {
      ticketsInfo: Prisma.$TicketsInfoPayload<ExtArgs>
      orders: Prisma.$OrderDetailsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ticketsInfoId: number
      quantity: number
      created: Date
      modified: Date
    }, ExtArgs["result"]["orderedTickets"]>
    composites: {}
  }

  type OrderedTicketsGetPayload<S extends boolean | null | undefined | OrderedTicketsDefaultArgs> = $Result.GetResult<Prisma.$OrderedTicketsPayload, S>

  type OrderedTicketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderedTicketsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderedTicketsCountAggregateInputType | true
    }

  export interface OrderedTicketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderedTickets'], meta: { name: 'OrderedTickets' } }
    /**
     * Find zero or one OrderedTickets that matches the filter.
     * @param {OrderedTicketsFindUniqueArgs} args - Arguments to find a OrderedTickets
     * @example
     * // Get one OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderedTicketsFindUniqueArgs>(args: SelectSubset<T, OrderedTicketsFindUniqueArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OrderedTickets that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderedTicketsFindUniqueOrThrowArgs} args - Arguments to find a OrderedTickets
     * @example
     * // Get one OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderedTicketsFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderedTicketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OrderedTickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedTicketsFindFirstArgs} args - Arguments to find a OrderedTickets
     * @example
     * // Get one OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderedTicketsFindFirstArgs>(args?: SelectSubset<T, OrderedTicketsFindFirstArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OrderedTickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedTicketsFindFirstOrThrowArgs} args - Arguments to find a OrderedTickets
     * @example
     * // Get one OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderedTicketsFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderedTicketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OrderedTickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedTicketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.findMany()
     * 
     * // Get first 10 OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderedTicketsWithIdOnly = await prisma.orderedTickets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderedTicketsFindManyArgs>(args?: SelectSubset<T, OrderedTicketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OrderedTickets.
     * @param {OrderedTicketsCreateArgs} args - Arguments to create a OrderedTickets.
     * @example
     * // Create one OrderedTickets
     * const OrderedTickets = await prisma.orderedTickets.create({
     *   data: {
     *     // ... data to create a OrderedTickets
     *   }
     * })
     * 
     */
    create<T extends OrderedTicketsCreateArgs>(args: SelectSubset<T, OrderedTicketsCreateArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OrderedTickets.
     * @param {OrderedTicketsCreateManyArgs} args - Arguments to create many OrderedTickets.
     * @example
     * // Create many OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderedTicketsCreateManyArgs>(args?: SelectSubset<T, OrderedTicketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderedTickets and returns the data saved in the database.
     * @param {OrderedTicketsCreateManyAndReturnArgs} args - Arguments to create many OrderedTickets.
     * @example
     * // Create many OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderedTickets and only return the `id`
     * const orderedTicketsWithIdOnly = await prisma.orderedTickets.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderedTicketsCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderedTicketsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OrderedTickets.
     * @param {OrderedTicketsDeleteArgs} args - Arguments to delete one OrderedTickets.
     * @example
     * // Delete one OrderedTickets
     * const OrderedTickets = await prisma.orderedTickets.delete({
     *   where: {
     *     // ... filter to delete one OrderedTickets
     *   }
     * })
     * 
     */
    delete<T extends OrderedTicketsDeleteArgs>(args: SelectSubset<T, OrderedTicketsDeleteArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OrderedTickets.
     * @param {OrderedTicketsUpdateArgs} args - Arguments to update one OrderedTickets.
     * @example
     * // Update one OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderedTicketsUpdateArgs>(args: SelectSubset<T, OrderedTicketsUpdateArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OrderedTickets.
     * @param {OrderedTicketsDeleteManyArgs} args - Arguments to filter OrderedTickets to delete.
     * @example
     * // Delete a few OrderedTickets
     * const { count } = await prisma.orderedTickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderedTicketsDeleteManyArgs>(args?: SelectSubset<T, OrderedTicketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderedTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedTicketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderedTicketsUpdateManyArgs>(args: SelectSubset<T, OrderedTicketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderedTickets.
     * @param {OrderedTicketsUpsertArgs} args - Arguments to update or create a OrderedTickets.
     * @example
     * // Update or create a OrderedTickets
     * const orderedTickets = await prisma.orderedTickets.upsert({
     *   create: {
     *     // ... data to create a OrderedTickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderedTickets we want to update
     *   }
     * })
     */
    upsert<T extends OrderedTicketsUpsertArgs>(args: SelectSubset<T, OrderedTicketsUpsertArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OrderedTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedTicketsCountArgs} args - Arguments to filter OrderedTickets to count.
     * @example
     * // Count the number of OrderedTickets
     * const count = await prisma.orderedTickets.count({
     *   where: {
     *     // ... the filter for the OrderedTickets we want to count
     *   }
     * })
    **/
    count<T extends OrderedTicketsCountArgs>(
      args?: Subset<T, OrderedTicketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderedTicketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderedTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedTicketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderedTicketsAggregateArgs>(args: Subset<T, OrderedTicketsAggregateArgs>): Prisma.PrismaPromise<GetOrderedTicketsAggregateType<T>>

    /**
     * Group by OrderedTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedTicketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderedTicketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderedTicketsGroupByArgs['orderBy'] }
        : { orderBy?: OrderedTicketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderedTicketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderedTicketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderedTickets model
   */
  readonly fields: OrderedTicketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderedTickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderedTicketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticketsInfo<T extends TicketsInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketsInfoDefaultArgs<ExtArgs>>): Prisma__TicketsInfoClient<$Result.GetResult<Prisma.$TicketsInfoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    orders<T extends OrderedTickets$ordersArgs<ExtArgs> = {}>(args?: Subset<T, OrderedTickets$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderedTickets model
   */ 
  interface OrderedTicketsFieldRefs {
    readonly id: FieldRef<"OrderedTickets", 'Int'>
    readonly ticketsInfoId: FieldRef<"OrderedTickets", 'Int'>
    readonly quantity: FieldRef<"OrderedTickets", 'Int'>
    readonly created: FieldRef<"OrderedTickets", 'DateTime'>
    readonly modified: FieldRef<"OrderedTickets", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderedTickets findUnique
   */
  export type OrderedTicketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * Filter, which OrderedTickets to fetch.
     */
    where: OrderedTicketsWhereUniqueInput
  }

  /**
   * OrderedTickets findUniqueOrThrow
   */
  export type OrderedTicketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * Filter, which OrderedTickets to fetch.
     */
    where: OrderedTicketsWhereUniqueInput
  }

  /**
   * OrderedTickets findFirst
   */
  export type OrderedTicketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * Filter, which OrderedTickets to fetch.
     */
    where?: OrderedTicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderedTickets to fetch.
     */
    orderBy?: OrderedTicketsOrderByWithRelationInput | OrderedTicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderedTickets.
     */
    cursor?: OrderedTicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderedTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderedTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderedTickets.
     */
    distinct?: OrderedTicketsScalarFieldEnum | OrderedTicketsScalarFieldEnum[]
  }

  /**
   * OrderedTickets findFirstOrThrow
   */
  export type OrderedTicketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * Filter, which OrderedTickets to fetch.
     */
    where?: OrderedTicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderedTickets to fetch.
     */
    orderBy?: OrderedTicketsOrderByWithRelationInput | OrderedTicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderedTickets.
     */
    cursor?: OrderedTicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderedTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderedTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderedTickets.
     */
    distinct?: OrderedTicketsScalarFieldEnum | OrderedTicketsScalarFieldEnum[]
  }

  /**
   * OrderedTickets findMany
   */
  export type OrderedTicketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * Filter, which OrderedTickets to fetch.
     */
    where?: OrderedTicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderedTickets to fetch.
     */
    orderBy?: OrderedTicketsOrderByWithRelationInput | OrderedTicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderedTickets.
     */
    cursor?: OrderedTicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderedTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderedTickets.
     */
    skip?: number
    distinct?: OrderedTicketsScalarFieldEnum | OrderedTicketsScalarFieldEnum[]
  }

  /**
   * OrderedTickets create
   */
  export type OrderedTicketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderedTickets.
     */
    data: XOR<OrderedTicketsCreateInput, OrderedTicketsUncheckedCreateInput>
  }

  /**
   * OrderedTickets createMany
   */
  export type OrderedTicketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderedTickets.
     */
    data: OrderedTicketsCreateManyInput | OrderedTicketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderedTickets createManyAndReturn
   */
  export type OrderedTicketsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OrderedTickets.
     */
    data: OrderedTicketsCreateManyInput | OrderedTicketsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderedTickets update
   */
  export type OrderedTicketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderedTickets.
     */
    data: XOR<OrderedTicketsUpdateInput, OrderedTicketsUncheckedUpdateInput>
    /**
     * Choose, which OrderedTickets to update.
     */
    where: OrderedTicketsWhereUniqueInput
  }

  /**
   * OrderedTickets updateMany
   */
  export type OrderedTicketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderedTickets.
     */
    data: XOR<OrderedTicketsUpdateManyMutationInput, OrderedTicketsUncheckedUpdateManyInput>
    /**
     * Filter which OrderedTickets to update
     */
    where?: OrderedTicketsWhereInput
  }

  /**
   * OrderedTickets upsert
   */
  export type OrderedTicketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderedTickets to update in case it exists.
     */
    where: OrderedTicketsWhereUniqueInput
    /**
     * In case the OrderedTickets found by the `where` argument doesn't exist, create a new OrderedTickets with this data.
     */
    create: XOR<OrderedTicketsCreateInput, OrderedTicketsUncheckedCreateInput>
    /**
     * In case the OrderedTickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderedTicketsUpdateInput, OrderedTicketsUncheckedUpdateInput>
  }

  /**
   * OrderedTickets delete
   */
  export type OrderedTicketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
    /**
     * Filter which OrderedTickets to delete.
     */
    where: OrderedTicketsWhereUniqueInput
  }

  /**
   * OrderedTickets deleteMany
   */
  export type OrderedTicketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderedTickets to delete
     */
    where?: OrderedTicketsWhereInput
  }

  /**
   * OrderedTickets.orders
   */
  export type OrderedTickets$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    where?: OrderDetailsWhereInput
    orderBy?: OrderDetailsOrderByWithRelationInput | OrderDetailsOrderByWithRelationInput[]
    cursor?: OrderDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderDetailsScalarFieldEnum | OrderDetailsScalarFieldEnum[]
  }

  /**
   * OrderedTickets without action
   */
  export type OrderedTicketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderedTickets
     */
    select?: OrderedTicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderedTicketsInclude<ExtArgs> | null
  }


  /**
   * Model OrderDetails
   */

  export type AggregateOrderDetails = {
    _count: OrderDetailsCountAggregateOutputType | null
    _avg: OrderDetailsAvgAggregateOutputType | null
    _sum: OrderDetailsSumAggregateOutputType | null
    _min: OrderDetailsMinAggregateOutputType | null
    _max: OrderDetailsMaxAggregateOutputType | null
  }

  export type OrderDetailsAvgAggregateOutputType = {
    id: number | null
    usersId: number | null
    orderedTicketsId: number | null
    orderTotal: number | null
  }

  export type OrderDetailsSumAggregateOutputType = {
    id: number | null
    usersId: number | null
    orderedTicketsId: number | null
    orderTotal: number | null
  }

  export type OrderDetailsMinAggregateOutputType = {
    id: number | null
    usersId: number | null
    orderedTicketsId: number | null
    orderTotal: number | null
    orderDate: Date | null
    statusCart: $Enums.StatusOnCart | null
    statusOrder: $Enums.StatusOrderDetails | null
    created: Date | null
    modified: Date | null
  }

  export type OrderDetailsMaxAggregateOutputType = {
    id: number | null
    usersId: number | null
    orderedTicketsId: number | null
    orderTotal: number | null
    orderDate: Date | null
    statusCart: $Enums.StatusOnCart | null
    statusOrder: $Enums.StatusOrderDetails | null
    created: Date | null
    modified: Date | null
  }

  export type OrderDetailsCountAggregateOutputType = {
    id: number
    usersId: number
    orderedTicketsId: number
    orderTotal: number
    orderDate: number
    statusCart: number
    statusOrder: number
    created: number
    modified: number
    _all: number
  }


  export type OrderDetailsAvgAggregateInputType = {
    id?: true
    usersId?: true
    orderedTicketsId?: true
    orderTotal?: true
  }

  export type OrderDetailsSumAggregateInputType = {
    id?: true
    usersId?: true
    orderedTicketsId?: true
    orderTotal?: true
  }

  export type OrderDetailsMinAggregateInputType = {
    id?: true
    usersId?: true
    orderedTicketsId?: true
    orderTotal?: true
    orderDate?: true
    statusCart?: true
    statusOrder?: true
    created?: true
    modified?: true
  }

  export type OrderDetailsMaxAggregateInputType = {
    id?: true
    usersId?: true
    orderedTicketsId?: true
    orderTotal?: true
    orderDate?: true
    statusCart?: true
    statusOrder?: true
    created?: true
    modified?: true
  }

  export type OrderDetailsCountAggregateInputType = {
    id?: true
    usersId?: true
    orderedTicketsId?: true
    orderTotal?: true
    orderDate?: true
    statusCart?: true
    statusOrder?: true
    created?: true
    modified?: true
    _all?: true
  }

  export type OrderDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderDetails to aggregate.
     */
    where?: OrderDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderDetails to fetch.
     */
    orderBy?: OrderDetailsOrderByWithRelationInput | OrderDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderDetails
    **/
    _count?: true | OrderDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderDetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderDetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderDetailsMaxAggregateInputType
  }

  export type GetOrderDetailsAggregateType<T extends OrderDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderDetails[P]>
      : GetScalarType<T[P], AggregateOrderDetails[P]>
  }




  export type OrderDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderDetailsWhereInput
    orderBy?: OrderDetailsOrderByWithAggregationInput | OrderDetailsOrderByWithAggregationInput[]
    by: OrderDetailsScalarFieldEnum[] | OrderDetailsScalarFieldEnum
    having?: OrderDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderDetailsCountAggregateInputType | true
    _avg?: OrderDetailsAvgAggregateInputType
    _sum?: OrderDetailsSumAggregateInputType
    _min?: OrderDetailsMinAggregateInputType
    _max?: OrderDetailsMaxAggregateInputType
  }

  export type OrderDetailsGroupByOutputType = {
    id: number
    usersId: number
    orderedTicketsId: number
    orderTotal: number
    orderDate: Date
    statusCart: $Enums.StatusOnCart
    statusOrder: $Enums.StatusOrderDetails
    created: Date
    modified: Date
    _count: OrderDetailsCountAggregateOutputType | null
    _avg: OrderDetailsAvgAggregateOutputType | null
    _sum: OrderDetailsSumAggregateOutputType | null
    _min: OrderDetailsMinAggregateOutputType | null
    _max: OrderDetailsMaxAggregateOutputType | null
  }

  type GetOrderDetailsGroupByPayload<T extends OrderDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], OrderDetailsGroupByOutputType[P]>
        }
      >
    >


  export type OrderDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    orderedTicketsId?: boolean
    orderTotal?: boolean
    orderDate?: boolean
    statusCart?: boolean
    statusOrder?: boolean
    created?: boolean
    modified?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    orderedTickets?: boolean | OrderedTicketsDefaultArgs<ExtArgs>
    paymentDetails?: boolean | OrderDetails$paymentDetailsArgs<ExtArgs>
    _count?: boolean | OrderDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderDetails"]>

  export type OrderDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usersId?: boolean
    orderedTicketsId?: boolean
    orderTotal?: boolean
    orderDate?: boolean
    statusCart?: boolean
    statusOrder?: boolean
    created?: boolean
    modified?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    orderedTickets?: boolean | OrderedTicketsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderDetails"]>

  export type OrderDetailsSelectScalar = {
    id?: boolean
    usersId?: boolean
    orderedTicketsId?: boolean
    orderTotal?: boolean
    orderDate?: boolean
    statusCart?: boolean
    statusOrder?: boolean
    created?: boolean
    modified?: boolean
  }

  export type OrderDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    orderedTickets?: boolean | OrderedTicketsDefaultArgs<ExtArgs>
    paymentDetails?: boolean | OrderDetails$paymentDetailsArgs<ExtArgs>
    _count?: boolean | OrderDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    orderedTickets?: boolean | OrderedTicketsDefaultArgs<ExtArgs>
  }

  export type $OrderDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderDetails"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      orderedTickets: Prisma.$OrderedTicketsPayload<ExtArgs>
      paymentDetails: Prisma.$PaymentDetailsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usersId: number
      orderedTicketsId: number
      orderTotal: number
      orderDate: Date
      statusCart: $Enums.StatusOnCart
      statusOrder: $Enums.StatusOrderDetails
      created: Date
      modified: Date
    }, ExtArgs["result"]["orderDetails"]>
    composites: {}
  }

  type OrderDetailsGetPayload<S extends boolean | null | undefined | OrderDetailsDefaultArgs> = $Result.GetResult<Prisma.$OrderDetailsPayload, S>

  type OrderDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderDetailsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderDetailsCountAggregateInputType | true
    }

  export interface OrderDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderDetails'], meta: { name: 'OrderDetails' } }
    /**
     * Find zero or one OrderDetails that matches the filter.
     * @param {OrderDetailsFindUniqueArgs} args - Arguments to find a OrderDetails
     * @example
     * // Get one OrderDetails
     * const orderDetails = await prisma.orderDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderDetailsFindUniqueArgs>(args: SelectSubset<T, OrderDetailsFindUniqueArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OrderDetails that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderDetailsFindUniqueOrThrowArgs} args - Arguments to find a OrderDetails
     * @example
     * // Get one OrderDetails
     * const orderDetails = await prisma.orderDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OrderDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDetailsFindFirstArgs} args - Arguments to find a OrderDetails
     * @example
     * // Get one OrderDetails
     * const orderDetails = await prisma.orderDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderDetailsFindFirstArgs>(args?: SelectSubset<T, OrderDetailsFindFirstArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OrderDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDetailsFindFirstOrThrowArgs} args - Arguments to find a OrderDetails
     * @example
     * // Get one OrderDetails
     * const orderDetails = await prisma.orderDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OrderDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderDetails
     * const orderDetails = await prisma.orderDetails.findMany()
     * 
     * // Get first 10 OrderDetails
     * const orderDetails = await prisma.orderDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderDetailsWithIdOnly = await prisma.orderDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderDetailsFindManyArgs>(args?: SelectSubset<T, OrderDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OrderDetails.
     * @param {OrderDetailsCreateArgs} args - Arguments to create a OrderDetails.
     * @example
     * // Create one OrderDetails
     * const OrderDetails = await prisma.orderDetails.create({
     *   data: {
     *     // ... data to create a OrderDetails
     *   }
     * })
     * 
     */
    create<T extends OrderDetailsCreateArgs>(args: SelectSubset<T, OrderDetailsCreateArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OrderDetails.
     * @param {OrderDetailsCreateManyArgs} args - Arguments to create many OrderDetails.
     * @example
     * // Create many OrderDetails
     * const orderDetails = await prisma.orderDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderDetailsCreateManyArgs>(args?: SelectSubset<T, OrderDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderDetails and returns the data saved in the database.
     * @param {OrderDetailsCreateManyAndReturnArgs} args - Arguments to create many OrderDetails.
     * @example
     * // Create many OrderDetails
     * const orderDetails = await prisma.orderDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderDetails and only return the `id`
     * const orderDetailsWithIdOnly = await prisma.orderDetails.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OrderDetails.
     * @param {OrderDetailsDeleteArgs} args - Arguments to delete one OrderDetails.
     * @example
     * // Delete one OrderDetails
     * const OrderDetails = await prisma.orderDetails.delete({
     *   where: {
     *     // ... filter to delete one OrderDetails
     *   }
     * })
     * 
     */
    delete<T extends OrderDetailsDeleteArgs>(args: SelectSubset<T, OrderDetailsDeleteArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OrderDetails.
     * @param {OrderDetailsUpdateArgs} args - Arguments to update one OrderDetails.
     * @example
     * // Update one OrderDetails
     * const orderDetails = await prisma.orderDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderDetailsUpdateArgs>(args: SelectSubset<T, OrderDetailsUpdateArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OrderDetails.
     * @param {OrderDetailsDeleteManyArgs} args - Arguments to filter OrderDetails to delete.
     * @example
     * // Delete a few OrderDetails
     * const { count } = await prisma.orderDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDetailsDeleteManyArgs>(args?: SelectSubset<T, OrderDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderDetails
     * const orderDetails = await prisma.orderDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderDetailsUpdateManyArgs>(args: SelectSubset<T, OrderDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderDetails.
     * @param {OrderDetailsUpsertArgs} args - Arguments to update or create a OrderDetails.
     * @example
     * // Update or create a OrderDetails
     * const orderDetails = await prisma.orderDetails.upsert({
     *   create: {
     *     // ... data to create a OrderDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderDetails we want to update
     *   }
     * })
     */
    upsert<T extends OrderDetailsUpsertArgs>(args: SelectSubset<T, OrderDetailsUpsertArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OrderDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDetailsCountArgs} args - Arguments to filter OrderDetails to count.
     * @example
     * // Count the number of OrderDetails
     * const count = await prisma.orderDetails.count({
     *   where: {
     *     // ... the filter for the OrderDetails we want to count
     *   }
     * })
    **/
    count<T extends OrderDetailsCountArgs>(
      args?: Subset<T, OrderDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderDetailsAggregateArgs>(args: Subset<T, OrderDetailsAggregateArgs>): Prisma.PrismaPromise<GetOrderDetailsAggregateType<T>>

    /**
     * Group by OrderDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderDetailsGroupByArgs['orderBy'] }
        : { orderBy?: OrderDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderDetails model
   */
  readonly fields: OrderDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    orderedTickets<T extends OrderedTicketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderedTicketsDefaultArgs<ExtArgs>>): Prisma__OrderedTicketsClient<$Result.GetResult<Prisma.$OrderedTicketsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    paymentDetails<T extends OrderDetails$paymentDetailsArgs<ExtArgs> = {}>(args?: Subset<T, OrderDetails$paymentDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderDetails model
   */ 
  interface OrderDetailsFieldRefs {
    readonly id: FieldRef<"OrderDetails", 'Int'>
    readonly usersId: FieldRef<"OrderDetails", 'Int'>
    readonly orderedTicketsId: FieldRef<"OrderDetails", 'Int'>
    readonly orderTotal: FieldRef<"OrderDetails", 'Float'>
    readonly orderDate: FieldRef<"OrderDetails", 'DateTime'>
    readonly statusCart: FieldRef<"OrderDetails", 'StatusOnCart'>
    readonly statusOrder: FieldRef<"OrderDetails", 'StatusOrderDetails'>
    readonly created: FieldRef<"OrderDetails", 'DateTime'>
    readonly modified: FieldRef<"OrderDetails", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderDetails findUnique
   */
  export type OrderDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OrderDetails to fetch.
     */
    where: OrderDetailsWhereUniqueInput
  }

  /**
   * OrderDetails findUniqueOrThrow
   */
  export type OrderDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OrderDetails to fetch.
     */
    where: OrderDetailsWhereUniqueInput
  }

  /**
   * OrderDetails findFirst
   */
  export type OrderDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OrderDetails to fetch.
     */
    where?: OrderDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderDetails to fetch.
     */
    orderBy?: OrderDetailsOrderByWithRelationInput | OrderDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderDetails.
     */
    cursor?: OrderDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderDetails.
     */
    distinct?: OrderDetailsScalarFieldEnum | OrderDetailsScalarFieldEnum[]
  }

  /**
   * OrderDetails findFirstOrThrow
   */
  export type OrderDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OrderDetails to fetch.
     */
    where?: OrderDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderDetails to fetch.
     */
    orderBy?: OrderDetailsOrderByWithRelationInput | OrderDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderDetails.
     */
    cursor?: OrderDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderDetails.
     */
    distinct?: OrderDetailsScalarFieldEnum | OrderDetailsScalarFieldEnum[]
  }

  /**
   * OrderDetails findMany
   */
  export type OrderDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OrderDetails to fetch.
     */
    where?: OrderDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderDetails to fetch.
     */
    orderBy?: OrderDetailsOrderByWithRelationInput | OrderDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderDetails.
     */
    cursor?: OrderDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderDetails.
     */
    skip?: number
    distinct?: OrderDetailsScalarFieldEnum | OrderDetailsScalarFieldEnum[]
  }

  /**
   * OrderDetails create
   */
  export type OrderDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderDetails.
     */
    data: XOR<OrderDetailsCreateInput, OrderDetailsUncheckedCreateInput>
  }

  /**
   * OrderDetails createMany
   */
  export type OrderDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderDetails.
     */
    data: OrderDetailsCreateManyInput | OrderDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderDetails createManyAndReturn
   */
  export type OrderDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OrderDetails.
     */
    data: OrderDetailsCreateManyInput | OrderDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderDetails update
   */
  export type OrderDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderDetails.
     */
    data: XOR<OrderDetailsUpdateInput, OrderDetailsUncheckedUpdateInput>
    /**
     * Choose, which OrderDetails to update.
     */
    where: OrderDetailsWhereUniqueInput
  }

  /**
   * OrderDetails updateMany
   */
  export type OrderDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderDetails.
     */
    data: XOR<OrderDetailsUpdateManyMutationInput, OrderDetailsUncheckedUpdateManyInput>
    /**
     * Filter which OrderDetails to update
     */
    where?: OrderDetailsWhereInput
  }

  /**
   * OrderDetails upsert
   */
  export type OrderDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderDetails to update in case it exists.
     */
    where: OrderDetailsWhereUniqueInput
    /**
     * In case the OrderDetails found by the `where` argument doesn't exist, create a new OrderDetails with this data.
     */
    create: XOR<OrderDetailsCreateInput, OrderDetailsUncheckedCreateInput>
    /**
     * In case the OrderDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderDetailsUpdateInput, OrderDetailsUncheckedUpdateInput>
  }

  /**
   * OrderDetails delete
   */
  export type OrderDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
    /**
     * Filter which OrderDetails to delete.
     */
    where: OrderDetailsWhereUniqueInput
  }

  /**
   * OrderDetails deleteMany
   */
  export type OrderDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderDetails to delete
     */
    where?: OrderDetailsWhereInput
  }

  /**
   * OrderDetails.paymentDetails
   */
  export type OrderDetails$paymentDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    where?: PaymentDetailsWhereInput
    orderBy?: PaymentDetailsOrderByWithRelationInput | PaymentDetailsOrderByWithRelationInput[]
    cursor?: PaymentDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentDetailsScalarFieldEnum | PaymentDetailsScalarFieldEnum[]
  }

  /**
   * OrderDetails without action
   */
  export type OrderDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDetails
     */
    select?: OrderDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDetailsInclude<ExtArgs> | null
  }


  /**
   * Model PaymentDetails
   */

  export type AggregatePaymentDetails = {
    _count: PaymentDetailsCountAggregateOutputType | null
    _avg: PaymentDetailsAvgAggregateOutputType | null
    _sum: PaymentDetailsSumAggregateOutputType | null
    _min: PaymentDetailsMinAggregateOutputType | null
    _max: PaymentDetailsMaxAggregateOutputType | null
  }

  export type PaymentDetailsAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    usersPaymentsId: number | null
    paymentAmount: number | null
  }

  export type PaymentDetailsSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    usersPaymentsId: number | null
    paymentAmount: number | null
  }

  export type PaymentDetailsMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    usersPaymentsId: number | null
    paymentAmount: number | null
    paymentDate: Date | null
    status: $Enums.StatusPaymentDetails | null
  }

  export type PaymentDetailsMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    usersPaymentsId: number | null
    paymentAmount: number | null
    paymentDate: Date | null
    status: $Enums.StatusPaymentDetails | null
  }

  export type PaymentDetailsCountAggregateOutputType = {
    id: number
    orderId: number
    usersPaymentsId: number
    paymentAmount: number
    paymentDate: number
    status: number
    _all: number
  }


  export type PaymentDetailsAvgAggregateInputType = {
    id?: true
    orderId?: true
    usersPaymentsId?: true
    paymentAmount?: true
  }

  export type PaymentDetailsSumAggregateInputType = {
    id?: true
    orderId?: true
    usersPaymentsId?: true
    paymentAmount?: true
  }

  export type PaymentDetailsMinAggregateInputType = {
    id?: true
    orderId?: true
    usersPaymentsId?: true
    paymentAmount?: true
    paymentDate?: true
    status?: true
  }

  export type PaymentDetailsMaxAggregateInputType = {
    id?: true
    orderId?: true
    usersPaymentsId?: true
    paymentAmount?: true
    paymentDate?: true
    status?: true
  }

  export type PaymentDetailsCountAggregateInputType = {
    id?: true
    orderId?: true
    usersPaymentsId?: true
    paymentAmount?: true
    paymentDate?: true
    status?: true
    _all?: true
  }

  export type PaymentDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentDetails to aggregate.
     */
    where?: PaymentDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentDetails to fetch.
     */
    orderBy?: PaymentDetailsOrderByWithRelationInput | PaymentDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentDetails
    **/
    _count?: true | PaymentDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentDetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentDetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentDetailsMaxAggregateInputType
  }

  export type GetPaymentDetailsAggregateType<T extends PaymentDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentDetails[P]>
      : GetScalarType<T[P], AggregatePaymentDetails[P]>
  }




  export type PaymentDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentDetailsWhereInput
    orderBy?: PaymentDetailsOrderByWithAggregationInput | PaymentDetailsOrderByWithAggregationInput[]
    by: PaymentDetailsScalarFieldEnum[] | PaymentDetailsScalarFieldEnum
    having?: PaymentDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentDetailsCountAggregateInputType | true
    _avg?: PaymentDetailsAvgAggregateInputType
    _sum?: PaymentDetailsSumAggregateInputType
    _min?: PaymentDetailsMinAggregateInputType
    _max?: PaymentDetailsMaxAggregateInputType
  }

  export type PaymentDetailsGroupByOutputType = {
    id: number
    orderId: number
    usersPaymentsId: number
    paymentAmount: number
    paymentDate: Date
    status: $Enums.StatusPaymentDetails
    _count: PaymentDetailsCountAggregateOutputType | null
    _avg: PaymentDetailsAvgAggregateOutputType | null
    _sum: PaymentDetailsSumAggregateOutputType | null
    _min: PaymentDetailsMinAggregateOutputType | null
    _max: PaymentDetailsMaxAggregateOutputType | null
  }

  type GetPaymentDetailsGroupByPayload<T extends PaymentDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentDetailsGroupByOutputType[P]>
        }
      >
    >


  export type PaymentDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    usersPaymentsId?: boolean
    paymentAmount?: boolean
    paymentDate?: boolean
    status?: boolean
    order?: boolean | OrderDetailsDefaultArgs<ExtArgs>
    usersPayments?: boolean | UsersPaymentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentDetails"]>

  export type PaymentDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    usersPaymentsId?: boolean
    paymentAmount?: boolean
    paymentDate?: boolean
    status?: boolean
    order?: boolean | OrderDetailsDefaultArgs<ExtArgs>
    usersPayments?: boolean | UsersPaymentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentDetails"]>

  export type PaymentDetailsSelectScalar = {
    id?: boolean
    orderId?: boolean
    usersPaymentsId?: boolean
    paymentAmount?: boolean
    paymentDate?: boolean
    status?: boolean
  }

  export type PaymentDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDetailsDefaultArgs<ExtArgs>
    usersPayments?: boolean | UsersPaymentsDefaultArgs<ExtArgs>
  }
  export type PaymentDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDetailsDefaultArgs<ExtArgs>
    usersPayments?: boolean | UsersPaymentsDefaultArgs<ExtArgs>
  }

  export type $PaymentDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentDetails"
    objects: {
      order: Prisma.$OrderDetailsPayload<ExtArgs>
      usersPayments: Prisma.$UsersPaymentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      usersPaymentsId: number
      paymentAmount: number
      paymentDate: Date
      status: $Enums.StatusPaymentDetails
    }, ExtArgs["result"]["paymentDetails"]>
    composites: {}
  }

  type PaymentDetailsGetPayload<S extends boolean | null | undefined | PaymentDetailsDefaultArgs> = $Result.GetResult<Prisma.$PaymentDetailsPayload, S>

  type PaymentDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentDetailsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentDetailsCountAggregateInputType | true
    }

  export interface PaymentDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentDetails'], meta: { name: 'PaymentDetails' } }
    /**
     * Find zero or one PaymentDetails that matches the filter.
     * @param {PaymentDetailsFindUniqueArgs} args - Arguments to find a PaymentDetails
     * @example
     * // Get one PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentDetailsFindUniqueArgs>(args: SelectSubset<T, PaymentDetailsFindUniqueArgs<ExtArgs>>): Prisma__PaymentDetailsClient<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentDetails that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentDetailsFindUniqueOrThrowArgs} args - Arguments to find a PaymentDetails
     * @example
     * // Get one PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentDetailsClient<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentDetailsFindFirstArgs} args - Arguments to find a PaymentDetails
     * @example
     * // Get one PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentDetailsFindFirstArgs>(args?: SelectSubset<T, PaymentDetailsFindFirstArgs<ExtArgs>>): Prisma__PaymentDetailsClient<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentDetailsFindFirstOrThrowArgs} args - Arguments to find a PaymentDetails
     * @example
     * // Get one PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentDetailsClient<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.findMany()
     * 
     * // Get first 10 PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentDetailsWithIdOnly = await prisma.paymentDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentDetailsFindManyArgs>(args?: SelectSubset<T, PaymentDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentDetails.
     * @param {PaymentDetailsCreateArgs} args - Arguments to create a PaymentDetails.
     * @example
     * // Create one PaymentDetails
     * const PaymentDetails = await prisma.paymentDetails.create({
     *   data: {
     *     // ... data to create a PaymentDetails
     *   }
     * })
     * 
     */
    create<T extends PaymentDetailsCreateArgs>(args: SelectSubset<T, PaymentDetailsCreateArgs<ExtArgs>>): Prisma__PaymentDetailsClient<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentDetails.
     * @param {PaymentDetailsCreateManyArgs} args - Arguments to create many PaymentDetails.
     * @example
     * // Create many PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentDetailsCreateManyArgs>(args?: SelectSubset<T, PaymentDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentDetails and returns the data saved in the database.
     * @param {PaymentDetailsCreateManyAndReturnArgs} args - Arguments to create many PaymentDetails.
     * @example
     * // Create many PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentDetails and only return the `id`
     * const paymentDetailsWithIdOnly = await prisma.paymentDetails.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentDetails.
     * @param {PaymentDetailsDeleteArgs} args - Arguments to delete one PaymentDetails.
     * @example
     * // Delete one PaymentDetails
     * const PaymentDetails = await prisma.paymentDetails.delete({
     *   where: {
     *     // ... filter to delete one PaymentDetails
     *   }
     * })
     * 
     */
    delete<T extends PaymentDetailsDeleteArgs>(args: SelectSubset<T, PaymentDetailsDeleteArgs<ExtArgs>>): Prisma__PaymentDetailsClient<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentDetails.
     * @param {PaymentDetailsUpdateArgs} args - Arguments to update one PaymentDetails.
     * @example
     * // Update one PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentDetailsUpdateArgs>(args: SelectSubset<T, PaymentDetailsUpdateArgs<ExtArgs>>): Prisma__PaymentDetailsClient<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentDetails.
     * @param {PaymentDetailsDeleteManyArgs} args - Arguments to filter PaymentDetails to delete.
     * @example
     * // Delete a few PaymentDetails
     * const { count } = await prisma.paymentDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDetailsDeleteManyArgs>(args?: SelectSubset<T, PaymentDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentDetailsUpdateManyArgs>(args: SelectSubset<T, PaymentDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentDetails.
     * @param {PaymentDetailsUpsertArgs} args - Arguments to update or create a PaymentDetails.
     * @example
     * // Update or create a PaymentDetails
     * const paymentDetails = await prisma.paymentDetails.upsert({
     *   create: {
     *     // ... data to create a PaymentDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentDetails we want to update
     *   }
     * })
     */
    upsert<T extends PaymentDetailsUpsertArgs>(args: SelectSubset<T, PaymentDetailsUpsertArgs<ExtArgs>>): Prisma__PaymentDetailsClient<$Result.GetResult<Prisma.$PaymentDetailsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentDetailsCountArgs} args - Arguments to filter PaymentDetails to count.
     * @example
     * // Count the number of PaymentDetails
     * const count = await prisma.paymentDetails.count({
     *   where: {
     *     // ... the filter for the PaymentDetails we want to count
     *   }
     * })
    **/
    count<T extends PaymentDetailsCountArgs>(
      args?: Subset<T, PaymentDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentDetailsAggregateArgs>(args: Subset<T, PaymentDetailsAggregateArgs>): Prisma.PrismaPromise<GetPaymentDetailsAggregateType<T>>

    /**
     * Group by PaymentDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentDetailsGroupByArgs['orderBy'] }
        : { orderBy?: PaymentDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentDetails model
   */
  readonly fields: PaymentDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDetailsDefaultArgs<ExtArgs>>): Prisma__OrderDetailsClient<$Result.GetResult<Prisma.$OrderDetailsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    usersPayments<T extends UsersPaymentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersPaymentsDefaultArgs<ExtArgs>>): Prisma__UsersPaymentsClient<$Result.GetResult<Prisma.$UsersPaymentsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentDetails model
   */ 
  interface PaymentDetailsFieldRefs {
    readonly id: FieldRef<"PaymentDetails", 'Int'>
    readonly orderId: FieldRef<"PaymentDetails", 'Int'>
    readonly usersPaymentsId: FieldRef<"PaymentDetails", 'Int'>
    readonly paymentAmount: FieldRef<"PaymentDetails", 'Float'>
    readonly paymentDate: FieldRef<"PaymentDetails", 'DateTime'>
    readonly status: FieldRef<"PaymentDetails", 'StatusPaymentDetails'>
  }
    

  // Custom InputTypes
  /**
   * PaymentDetails findUnique
   */
  export type PaymentDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PaymentDetails to fetch.
     */
    where: PaymentDetailsWhereUniqueInput
  }

  /**
   * PaymentDetails findUniqueOrThrow
   */
  export type PaymentDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PaymentDetails to fetch.
     */
    where: PaymentDetailsWhereUniqueInput
  }

  /**
   * PaymentDetails findFirst
   */
  export type PaymentDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PaymentDetails to fetch.
     */
    where?: PaymentDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentDetails to fetch.
     */
    orderBy?: PaymentDetailsOrderByWithRelationInput | PaymentDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentDetails.
     */
    cursor?: PaymentDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentDetails.
     */
    distinct?: PaymentDetailsScalarFieldEnum | PaymentDetailsScalarFieldEnum[]
  }

  /**
   * PaymentDetails findFirstOrThrow
   */
  export type PaymentDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PaymentDetails to fetch.
     */
    where?: PaymentDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentDetails to fetch.
     */
    orderBy?: PaymentDetailsOrderByWithRelationInput | PaymentDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentDetails.
     */
    cursor?: PaymentDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentDetails.
     */
    distinct?: PaymentDetailsScalarFieldEnum | PaymentDetailsScalarFieldEnum[]
  }

  /**
   * PaymentDetails findMany
   */
  export type PaymentDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PaymentDetails to fetch.
     */
    where?: PaymentDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentDetails to fetch.
     */
    orderBy?: PaymentDetailsOrderByWithRelationInput | PaymentDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentDetails.
     */
    cursor?: PaymentDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentDetails.
     */
    skip?: number
    distinct?: PaymentDetailsScalarFieldEnum | PaymentDetailsScalarFieldEnum[]
  }

  /**
   * PaymentDetails create
   */
  export type PaymentDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentDetails.
     */
    data: XOR<PaymentDetailsCreateInput, PaymentDetailsUncheckedCreateInput>
  }

  /**
   * PaymentDetails createMany
   */
  export type PaymentDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentDetails.
     */
    data: PaymentDetailsCreateManyInput | PaymentDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentDetails createManyAndReturn
   */
  export type PaymentDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentDetails.
     */
    data: PaymentDetailsCreateManyInput | PaymentDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentDetails update
   */
  export type PaymentDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentDetails.
     */
    data: XOR<PaymentDetailsUpdateInput, PaymentDetailsUncheckedUpdateInput>
    /**
     * Choose, which PaymentDetails to update.
     */
    where: PaymentDetailsWhereUniqueInput
  }

  /**
   * PaymentDetails updateMany
   */
  export type PaymentDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentDetails.
     */
    data: XOR<PaymentDetailsUpdateManyMutationInput, PaymentDetailsUncheckedUpdateManyInput>
    /**
     * Filter which PaymentDetails to update
     */
    where?: PaymentDetailsWhereInput
  }

  /**
   * PaymentDetails upsert
   */
  export type PaymentDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentDetails to update in case it exists.
     */
    where: PaymentDetailsWhereUniqueInput
    /**
     * In case the PaymentDetails found by the `where` argument doesn't exist, create a new PaymentDetails with this data.
     */
    create: XOR<PaymentDetailsCreateInput, PaymentDetailsUncheckedCreateInput>
    /**
     * In case the PaymentDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentDetailsUpdateInput, PaymentDetailsUncheckedUpdateInput>
  }

  /**
   * PaymentDetails delete
   */
  export type PaymentDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
    /**
     * Filter which PaymentDetails to delete.
     */
    where: PaymentDetailsWhereUniqueInput
  }

  /**
   * PaymentDetails deleteMany
   */
  export type PaymentDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentDetails to delete
     */
    where?: PaymentDetailsWhereInput
  }

  /**
   * PaymentDetails without action
   */
  export type PaymentDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentDetails
     */
    select?: PaymentDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentDetailsInclude<ExtArgs> | null
  }


  /**
   * Model UsersEvents
   */

  export type AggregateUsersEvents = {
    _count: UsersEventsCountAggregateOutputType | null
    _avg: UsersEventsAvgAggregateOutputType | null
    _sum: UsersEventsSumAggregateOutputType | null
    _min: UsersEventsMinAggregateOutputType | null
    _max: UsersEventsMaxAggregateOutputType | null
  }

  export type UsersEventsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    eventId: number | null
  }

  export type UsersEventsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    eventId: number | null
  }

  export type UsersEventsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    eventId: number | null
    created: Date | null
  }

  export type UsersEventsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    eventId: number | null
    created: Date | null
  }

  export type UsersEventsCountAggregateOutputType = {
    id: number
    userId: number
    eventId: number
    created: number
    _all: number
  }


  export type UsersEventsAvgAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
  }

  export type UsersEventsSumAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
  }

  export type UsersEventsMinAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    created?: true
  }

  export type UsersEventsMaxAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    created?: true
  }

  export type UsersEventsCountAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    created?: true
    _all?: true
  }

  export type UsersEventsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersEvents to aggregate.
     */
    where?: UsersEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersEvents to fetch.
     */
    orderBy?: UsersEventsOrderByWithRelationInput | UsersEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsersEvents
    **/
    _count?: true | UsersEventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersEventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersEventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersEventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersEventsMaxAggregateInputType
  }

  export type GetUsersEventsAggregateType<T extends UsersEventsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersEvents[P]>
      : GetScalarType<T[P], AggregateUsersEvents[P]>
  }




  export type UsersEventsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersEventsWhereInput
    orderBy?: UsersEventsOrderByWithAggregationInput | UsersEventsOrderByWithAggregationInput[]
    by: UsersEventsScalarFieldEnum[] | UsersEventsScalarFieldEnum
    having?: UsersEventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersEventsCountAggregateInputType | true
    _avg?: UsersEventsAvgAggregateInputType
    _sum?: UsersEventsSumAggregateInputType
    _min?: UsersEventsMinAggregateInputType
    _max?: UsersEventsMaxAggregateInputType
  }

  export type UsersEventsGroupByOutputType = {
    id: number
    userId: number
    eventId: number
    created: Date
    _count: UsersEventsCountAggregateOutputType | null
    _avg: UsersEventsAvgAggregateOutputType | null
    _sum: UsersEventsSumAggregateOutputType | null
    _min: UsersEventsMinAggregateOutputType | null
    _max: UsersEventsMaxAggregateOutputType | null
  }

  type GetUsersEventsGroupByPayload<T extends UsersEventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersEventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersEventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersEventsGroupByOutputType[P]>
            : GetScalarType<T[P], UsersEventsGroupByOutputType[P]>
        }
      >
    >


  export type UsersEventsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    created?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    event?: boolean | EventsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usersEvents"]>

  export type UsersEventsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    created?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    event?: boolean | EventsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usersEvents"]>

  export type UsersEventsSelectScalar = {
    id?: boolean
    userId?: boolean
    eventId?: boolean
    created?: boolean
  }

  export type UsersEventsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    event?: boolean | EventsDefaultArgs<ExtArgs>
  }
  export type UsersEventsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    event?: boolean | EventsDefaultArgs<ExtArgs>
  }

  export type $UsersEventsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsersEvents"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      event: Prisma.$EventsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      eventId: number
      created: Date
    }, ExtArgs["result"]["usersEvents"]>
    composites: {}
  }

  type UsersEventsGetPayload<S extends boolean | null | undefined | UsersEventsDefaultArgs> = $Result.GetResult<Prisma.$UsersEventsPayload, S>

  type UsersEventsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersEventsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersEventsCountAggregateInputType | true
    }

  export interface UsersEventsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsersEvents'], meta: { name: 'UsersEvents' } }
    /**
     * Find zero or one UsersEvents that matches the filter.
     * @param {UsersEventsFindUniqueArgs} args - Arguments to find a UsersEvents
     * @example
     * // Get one UsersEvents
     * const usersEvents = await prisma.usersEvents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersEventsFindUniqueArgs>(args: SelectSubset<T, UsersEventsFindUniqueArgs<ExtArgs>>): Prisma__UsersEventsClient<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UsersEvents that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersEventsFindUniqueOrThrowArgs} args - Arguments to find a UsersEvents
     * @example
     * // Get one UsersEvents
     * const usersEvents = await prisma.usersEvents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersEventsFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersEventsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersEventsClient<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UsersEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersEventsFindFirstArgs} args - Arguments to find a UsersEvents
     * @example
     * // Get one UsersEvents
     * const usersEvents = await prisma.usersEvents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersEventsFindFirstArgs>(args?: SelectSubset<T, UsersEventsFindFirstArgs<ExtArgs>>): Prisma__UsersEventsClient<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UsersEvents that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersEventsFindFirstOrThrowArgs} args - Arguments to find a UsersEvents
     * @example
     * // Get one UsersEvents
     * const usersEvents = await prisma.usersEvents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersEventsFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersEventsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersEventsClient<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UsersEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersEventsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersEvents
     * const usersEvents = await prisma.usersEvents.findMany()
     * 
     * // Get first 10 UsersEvents
     * const usersEvents = await prisma.usersEvents.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersEventsWithIdOnly = await prisma.usersEvents.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersEventsFindManyArgs>(args?: SelectSubset<T, UsersEventsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UsersEvents.
     * @param {UsersEventsCreateArgs} args - Arguments to create a UsersEvents.
     * @example
     * // Create one UsersEvents
     * const UsersEvents = await prisma.usersEvents.create({
     *   data: {
     *     // ... data to create a UsersEvents
     *   }
     * })
     * 
     */
    create<T extends UsersEventsCreateArgs>(args: SelectSubset<T, UsersEventsCreateArgs<ExtArgs>>): Prisma__UsersEventsClient<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UsersEvents.
     * @param {UsersEventsCreateManyArgs} args - Arguments to create many UsersEvents.
     * @example
     * // Create many UsersEvents
     * const usersEvents = await prisma.usersEvents.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersEventsCreateManyArgs>(args?: SelectSubset<T, UsersEventsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsersEvents and returns the data saved in the database.
     * @param {UsersEventsCreateManyAndReturnArgs} args - Arguments to create many UsersEvents.
     * @example
     * // Create many UsersEvents
     * const usersEvents = await prisma.usersEvents.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsersEvents and only return the `id`
     * const usersEventsWithIdOnly = await prisma.usersEvents.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersEventsCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersEventsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UsersEvents.
     * @param {UsersEventsDeleteArgs} args - Arguments to delete one UsersEvents.
     * @example
     * // Delete one UsersEvents
     * const UsersEvents = await prisma.usersEvents.delete({
     *   where: {
     *     // ... filter to delete one UsersEvents
     *   }
     * })
     * 
     */
    delete<T extends UsersEventsDeleteArgs>(args: SelectSubset<T, UsersEventsDeleteArgs<ExtArgs>>): Prisma__UsersEventsClient<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UsersEvents.
     * @param {UsersEventsUpdateArgs} args - Arguments to update one UsersEvents.
     * @example
     * // Update one UsersEvents
     * const usersEvents = await prisma.usersEvents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersEventsUpdateArgs>(args: SelectSubset<T, UsersEventsUpdateArgs<ExtArgs>>): Prisma__UsersEventsClient<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UsersEvents.
     * @param {UsersEventsDeleteManyArgs} args - Arguments to filter UsersEvents to delete.
     * @example
     * // Delete a few UsersEvents
     * const { count } = await prisma.usersEvents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersEventsDeleteManyArgs>(args?: SelectSubset<T, UsersEventsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersEventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersEvents
     * const usersEvents = await prisma.usersEvents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersEventsUpdateManyArgs>(args: SelectSubset<T, UsersEventsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersEvents.
     * @param {UsersEventsUpsertArgs} args - Arguments to update or create a UsersEvents.
     * @example
     * // Update or create a UsersEvents
     * const usersEvents = await prisma.usersEvents.upsert({
     *   create: {
     *     // ... data to create a UsersEvents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersEvents we want to update
     *   }
     * })
     */
    upsert<T extends UsersEventsUpsertArgs>(args: SelectSubset<T, UsersEventsUpsertArgs<ExtArgs>>): Prisma__UsersEventsClient<$Result.GetResult<Prisma.$UsersEventsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UsersEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersEventsCountArgs} args - Arguments to filter UsersEvents to count.
     * @example
     * // Count the number of UsersEvents
     * const count = await prisma.usersEvents.count({
     *   where: {
     *     // ... the filter for the UsersEvents we want to count
     *   }
     * })
    **/
    count<T extends UsersEventsCountArgs>(
      args?: Subset<T, UsersEventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersEventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersEventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersEventsAggregateArgs>(args: Subset<T, UsersEventsAggregateArgs>): Prisma.PrismaPromise<GetUsersEventsAggregateType<T>>

    /**
     * Group by UsersEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersEventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersEventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersEventsGroupByArgs['orderBy'] }
        : { orderBy?: UsersEventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersEventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsersEvents model
   */
  readonly fields: UsersEventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsersEvents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersEventsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends EventsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventsDefaultArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsersEvents model
   */ 
  interface UsersEventsFieldRefs {
    readonly id: FieldRef<"UsersEvents", 'Int'>
    readonly userId: FieldRef<"UsersEvents", 'Int'>
    readonly eventId: FieldRef<"UsersEvents", 'Int'>
    readonly created: FieldRef<"UsersEvents", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsersEvents findUnique
   */
  export type UsersEventsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersEvents to fetch.
     */
    where: UsersEventsWhereUniqueInput
  }

  /**
   * UsersEvents findUniqueOrThrow
   */
  export type UsersEventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersEvents to fetch.
     */
    where: UsersEventsWhereUniqueInput
  }

  /**
   * UsersEvents findFirst
   */
  export type UsersEventsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersEvents to fetch.
     */
    where?: UsersEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersEvents to fetch.
     */
    orderBy?: UsersEventsOrderByWithRelationInput | UsersEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersEvents.
     */
    cursor?: UsersEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersEvents.
     */
    distinct?: UsersEventsScalarFieldEnum | UsersEventsScalarFieldEnum[]
  }

  /**
   * UsersEvents findFirstOrThrow
   */
  export type UsersEventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersEvents to fetch.
     */
    where?: UsersEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersEvents to fetch.
     */
    orderBy?: UsersEventsOrderByWithRelationInput | UsersEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersEvents.
     */
    cursor?: UsersEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersEvents.
     */
    distinct?: UsersEventsScalarFieldEnum | UsersEventsScalarFieldEnum[]
  }

  /**
   * UsersEvents findMany
   */
  export type UsersEventsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersEvents to fetch.
     */
    where?: UsersEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersEvents to fetch.
     */
    orderBy?: UsersEventsOrderByWithRelationInput | UsersEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsersEvents.
     */
    cursor?: UsersEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersEvents.
     */
    skip?: number
    distinct?: UsersEventsScalarFieldEnum | UsersEventsScalarFieldEnum[]
  }

  /**
   * UsersEvents create
   */
  export type UsersEventsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * The data needed to create a UsersEvents.
     */
    data: XOR<UsersEventsCreateInput, UsersEventsUncheckedCreateInput>
  }

  /**
   * UsersEvents createMany
   */
  export type UsersEventsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsersEvents.
     */
    data: UsersEventsCreateManyInput | UsersEventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsersEvents createManyAndReturn
   */
  export type UsersEventsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UsersEvents.
     */
    data: UsersEventsCreateManyInput | UsersEventsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsersEvents update
   */
  export type UsersEventsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * The data needed to update a UsersEvents.
     */
    data: XOR<UsersEventsUpdateInput, UsersEventsUncheckedUpdateInput>
    /**
     * Choose, which UsersEvents to update.
     */
    where: UsersEventsWhereUniqueInput
  }

  /**
   * UsersEvents updateMany
   */
  export type UsersEventsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsersEvents.
     */
    data: XOR<UsersEventsUpdateManyMutationInput, UsersEventsUncheckedUpdateManyInput>
    /**
     * Filter which UsersEvents to update
     */
    where?: UsersEventsWhereInput
  }

  /**
   * UsersEvents upsert
   */
  export type UsersEventsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * The filter to search for the UsersEvents to update in case it exists.
     */
    where: UsersEventsWhereUniqueInput
    /**
     * In case the UsersEvents found by the `where` argument doesn't exist, create a new UsersEvents with this data.
     */
    create: XOR<UsersEventsCreateInput, UsersEventsUncheckedCreateInput>
    /**
     * In case the UsersEvents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersEventsUpdateInput, UsersEventsUncheckedUpdateInput>
  }

  /**
   * UsersEvents delete
   */
  export type UsersEventsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
    /**
     * Filter which UsersEvents to delete.
     */
    where: UsersEventsWhereUniqueInput
  }

  /**
   * UsersEvents deleteMany
   */
  export type UsersEventsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersEvents to delete
     */
    where?: UsersEventsWhereInput
  }

  /**
   * UsersEvents without action
   */
  export type UsersEventsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersEvents
     */
    select?: UsersEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersEventsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersAddressScalarFieldEnum: {
    id: 'id',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    postalCode: 'postalCode',
    city: 'city',
    region: 'region',
    country: 'country'
  };

  export type UsersAddressScalarFieldEnum = (typeof UsersAddressScalarFieldEnum)[keyof typeof UsersAddressScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    profilePic: 'profilePic',
    userName: 'userName',
    userPassword: 'userPassword',
    usersType: 'usersType',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    email: 'email',
    addressId: 'addressId',
    created: 'created',
    modified: 'modified',
    deleted: 'deleted'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const UsersPaymentsScalarFieldEnum: {
    id: 'id',
    usersId: 'usersId',
    paymentType: 'paymentType',
    paymentProvider: 'paymentProvider',
    created: 'created',
    modified: 'modified'
  };

  export type UsersPaymentsScalarFieldEnum = (typeof UsersPaymentsScalarFieldEnum)[keyof typeof UsersPaymentsScalarFieldEnum]


  export const EventsCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    created: 'created',
    modified: 'modified',
    deleted: 'deleted'
  };

  export type EventsCategoryScalarFieldEnum = (typeof EventsCategoryScalarFieldEnum)[keyof typeof EventsCategoryScalarFieldEnum]


  export const EventsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    cover: 'cover',
    startDate: 'startDate',
    endDate: 'endDate',
    capacity: 'capacity',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    postalCode: 'postalCode',
    city: 'city',
    region: 'region',
    country: 'country',
    categoryId: 'categoryId',
    status: 'status',
    created: 'created',
    modified: 'modified',
    deleted: 'deleted'
  };

  export type EventsScalarFieldEnum = (typeof EventsScalarFieldEnum)[keyof typeof EventsScalarFieldEnum]


  export const TicketsTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    created: 'created',
    modified: 'modified',
    deleted: 'deleted'
  };

  export type TicketsTypeScalarFieldEnum = (typeof TicketsTypeScalarFieldEnum)[keyof typeof TicketsTypeScalarFieldEnum]


  export const TicketsInfoScalarFieldEnum: {
    id: 'id',
    eventsId: 'eventsId',
    typeId: 'typeId',
    SKU: 'SKU',
    price: 'price',
    quantity: 'quantity',
    status: 'status',
    created: 'created',
    modified: 'modified',
    deleted: 'deleted'
  };

  export type TicketsInfoScalarFieldEnum = (typeof TicketsInfoScalarFieldEnum)[keyof typeof TicketsInfoScalarFieldEnum]


  export const OrderedTicketsScalarFieldEnum: {
    id: 'id',
    ticketsInfoId: 'ticketsInfoId',
    quantity: 'quantity',
    created: 'created',
    modified: 'modified'
  };

  export type OrderedTicketsScalarFieldEnum = (typeof OrderedTicketsScalarFieldEnum)[keyof typeof OrderedTicketsScalarFieldEnum]


  export const OrderDetailsScalarFieldEnum: {
    id: 'id',
    usersId: 'usersId',
    orderedTicketsId: 'orderedTicketsId',
    orderTotal: 'orderTotal',
    orderDate: 'orderDate',
    statusCart: 'statusCart',
    statusOrder: 'statusOrder',
    created: 'created',
    modified: 'modified'
  };

  export type OrderDetailsScalarFieldEnum = (typeof OrderDetailsScalarFieldEnum)[keyof typeof OrderDetailsScalarFieldEnum]


  export const PaymentDetailsScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    usersPaymentsId: 'usersPaymentsId',
    paymentAmount: 'paymentAmount',
    paymentDate: 'paymentDate',
    status: 'status'
  };

  export type PaymentDetailsScalarFieldEnum = (typeof PaymentDetailsScalarFieldEnum)[keyof typeof PaymentDetailsScalarFieldEnum]


  export const UsersEventsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventId: 'eventId',
    created: 'created'
  };

  export type UsersEventsScalarFieldEnum = (typeof UsersEventsScalarFieldEnum)[keyof typeof UsersEventsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UsersType'
   */
  export type EnumUsersTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UsersType'>
    


  /**
   * Reference to a field of type 'UsersType[]'
   */
  export type ListEnumUsersTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UsersType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'StatusEvents'
   */
  export type EnumStatusEventsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusEvents'>
    


  /**
   * Reference to a field of type 'StatusEvents[]'
   */
  export type ListEnumStatusEventsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusEvents[]'>
    


  /**
   * Reference to a field of type 'StatusTicketsType'
   */
  export type EnumStatusTicketsTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusTicketsType'>
    


  /**
   * Reference to a field of type 'StatusTicketsType[]'
   */
  export type ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusTicketsType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'StatusTicketsInfo'
   */
  export type EnumStatusTicketsInfoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusTicketsInfo'>
    


  /**
   * Reference to a field of type 'StatusTicketsInfo[]'
   */
  export type ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusTicketsInfo[]'>
    


  /**
   * Reference to a field of type 'StatusOnCart'
   */
  export type EnumStatusOnCartFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusOnCart'>
    


  /**
   * Reference to a field of type 'StatusOnCart[]'
   */
  export type ListEnumStatusOnCartFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusOnCart[]'>
    


  /**
   * Reference to a field of type 'StatusOrderDetails'
   */
  export type EnumStatusOrderDetailsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusOrderDetails'>
    


  /**
   * Reference to a field of type 'StatusOrderDetails[]'
   */
  export type ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusOrderDetails[]'>
    


  /**
   * Reference to a field of type 'StatusPaymentDetails'
   */
  export type EnumStatusPaymentDetailsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusPaymentDetails'>
    


  /**
   * Reference to a field of type 'StatusPaymentDetails[]'
   */
  export type ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusPaymentDetails[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersAddressWhereInput = {
    AND?: UsersAddressWhereInput | UsersAddressWhereInput[]
    OR?: UsersAddressWhereInput[]
    NOT?: UsersAddressWhereInput | UsersAddressWhereInput[]
    id?: IntFilter<"UsersAddress"> | number
    addressLine1?: StringNullableFilter<"UsersAddress"> | string | null
    addressLine2?: StringNullableFilter<"UsersAddress"> | string | null
    postalCode?: StringNullableFilter<"UsersAddress"> | string | null
    city?: StringNullableFilter<"UsersAddress"> | string | null
    region?: StringNullableFilter<"UsersAddress"> | string | null
    country?: StringNullableFilter<"UsersAddress"> | string | null
    users?: UsersListRelationFilter
  }

  export type UsersAddressOrderByWithRelationInput = {
    id?: SortOrder
    addressLine1?: SortOrderInput | SortOrder
    addressLine2?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    users?: UsersOrderByRelationAggregateInput
  }

  export type UsersAddressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UsersAddressWhereInput | UsersAddressWhereInput[]
    OR?: UsersAddressWhereInput[]
    NOT?: UsersAddressWhereInput | UsersAddressWhereInput[]
    addressLine1?: StringNullableFilter<"UsersAddress"> | string | null
    addressLine2?: StringNullableFilter<"UsersAddress"> | string | null
    postalCode?: StringNullableFilter<"UsersAddress"> | string | null
    city?: StringNullableFilter<"UsersAddress"> | string | null
    region?: StringNullableFilter<"UsersAddress"> | string | null
    country?: StringNullableFilter<"UsersAddress"> | string | null
    users?: UsersListRelationFilter
  }, "id">

  export type UsersAddressOrderByWithAggregationInput = {
    id?: SortOrder
    addressLine1?: SortOrderInput | SortOrder
    addressLine2?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    _count?: UsersAddressCountOrderByAggregateInput
    _avg?: UsersAddressAvgOrderByAggregateInput
    _max?: UsersAddressMaxOrderByAggregateInput
    _min?: UsersAddressMinOrderByAggregateInput
    _sum?: UsersAddressSumOrderByAggregateInput
  }

  export type UsersAddressScalarWhereWithAggregatesInput = {
    AND?: UsersAddressScalarWhereWithAggregatesInput | UsersAddressScalarWhereWithAggregatesInput[]
    OR?: UsersAddressScalarWhereWithAggregatesInput[]
    NOT?: UsersAddressScalarWhereWithAggregatesInput | UsersAddressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UsersAddress"> | number
    addressLine1?: StringNullableWithAggregatesFilter<"UsersAddress"> | string | null
    addressLine2?: StringNullableWithAggregatesFilter<"UsersAddress"> | string | null
    postalCode?: StringNullableWithAggregatesFilter<"UsersAddress"> | string | null
    city?: StringNullableWithAggregatesFilter<"UsersAddress"> | string | null
    region?: StringNullableWithAggregatesFilter<"UsersAddress"> | string | null
    country?: StringNullableWithAggregatesFilter<"UsersAddress"> | string | null
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    profilePic?: StringNullableFilter<"Users"> | string | null
    userName?: StringNullableFilter<"Users"> | string | null
    userPassword?: StringFilter<"Users"> | string
    usersType?: EnumUsersTypeFilter<"Users"> | $Enums.UsersType
    firstName?: StringNullableFilter<"Users"> | string | null
    lastName?: StringNullableFilter<"Users"> | string | null
    phone?: StringNullableFilter<"Users"> | string | null
    email?: StringFilter<"Users"> | string
    addressId?: IntNullableFilter<"Users"> | number | null
    created?: DateTimeFilter<"Users"> | Date | string
    modified?: DateTimeFilter<"Users"> | Date | string
    deleted?: DateTimeNullableFilter<"Users"> | Date | string | null
    address?: XOR<UsersAddressNullableRelationFilter, UsersAddressWhereInput> | null
    payments?: UsersPaymentsListRelationFilter
    orders?: OrderDetailsListRelationFilter
    addEvents?: UsersEventsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    profilePic?: SortOrderInput | SortOrder
    userName?: SortOrderInput | SortOrder
    userPassword?: SortOrder
    usersType?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrder
    addressId?: SortOrderInput | SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    address?: UsersAddressOrderByWithRelationInput
    payments?: UsersPaymentsOrderByRelationAggregateInput
    orders?: OrderDetailsOrderByRelationAggregateInput
    addEvents?: UsersEventsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userName?: string
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    profilePic?: StringNullableFilter<"Users"> | string | null
    userPassword?: StringFilter<"Users"> | string
    usersType?: EnumUsersTypeFilter<"Users"> | $Enums.UsersType
    firstName?: StringNullableFilter<"Users"> | string | null
    lastName?: StringNullableFilter<"Users"> | string | null
    phone?: StringNullableFilter<"Users"> | string | null
    addressId?: IntNullableFilter<"Users"> | number | null
    created?: DateTimeFilter<"Users"> | Date | string
    modified?: DateTimeFilter<"Users"> | Date | string
    deleted?: DateTimeNullableFilter<"Users"> | Date | string | null
    address?: XOR<UsersAddressNullableRelationFilter, UsersAddressWhereInput> | null
    payments?: UsersPaymentsListRelationFilter
    orders?: OrderDetailsListRelationFilter
    addEvents?: UsersEventsListRelationFilter
  }, "id" | "userName" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    profilePic?: SortOrderInput | SortOrder
    userName?: SortOrderInput | SortOrder
    userPassword?: SortOrder
    usersType?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrder
    addressId?: SortOrderInput | SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    profilePic?: StringNullableWithAggregatesFilter<"Users"> | string | null
    userName?: StringNullableWithAggregatesFilter<"Users"> | string | null
    userPassword?: StringWithAggregatesFilter<"Users"> | string
    usersType?: EnumUsersTypeWithAggregatesFilter<"Users"> | $Enums.UsersType
    firstName?: StringNullableWithAggregatesFilter<"Users"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Users"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Users"> | string | null
    email?: StringWithAggregatesFilter<"Users"> | string
    addressId?: IntNullableWithAggregatesFilter<"Users"> | number | null
    created?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    modified?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
  }

  export type UsersPaymentsWhereInput = {
    AND?: UsersPaymentsWhereInput | UsersPaymentsWhereInput[]
    OR?: UsersPaymentsWhereInput[]
    NOT?: UsersPaymentsWhereInput | UsersPaymentsWhereInput[]
    id?: IntFilter<"UsersPayments"> | number
    usersId?: IntFilter<"UsersPayments"> | number
    paymentType?: StringFilter<"UsersPayments"> | string
    paymentProvider?: StringFilter<"UsersPayments"> | string
    created?: DateTimeFilter<"UsersPayments"> | Date | string
    modified?: DateTimeFilter<"UsersPayments"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    paymentDetails?: PaymentDetailsListRelationFilter
  }

  export type UsersPaymentsOrderByWithRelationInput = {
    id?: SortOrder
    usersId?: SortOrder
    paymentType?: SortOrder
    paymentProvider?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    user?: UsersOrderByWithRelationInput
    paymentDetails?: PaymentDetailsOrderByRelationAggregateInput
  }

  export type UsersPaymentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UsersPaymentsWhereInput | UsersPaymentsWhereInput[]
    OR?: UsersPaymentsWhereInput[]
    NOT?: UsersPaymentsWhereInput | UsersPaymentsWhereInput[]
    usersId?: IntFilter<"UsersPayments"> | number
    paymentType?: StringFilter<"UsersPayments"> | string
    paymentProvider?: StringFilter<"UsersPayments"> | string
    created?: DateTimeFilter<"UsersPayments"> | Date | string
    modified?: DateTimeFilter<"UsersPayments"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    paymentDetails?: PaymentDetailsListRelationFilter
  }, "id">

  export type UsersPaymentsOrderByWithAggregationInput = {
    id?: SortOrder
    usersId?: SortOrder
    paymentType?: SortOrder
    paymentProvider?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    _count?: UsersPaymentsCountOrderByAggregateInput
    _avg?: UsersPaymentsAvgOrderByAggregateInput
    _max?: UsersPaymentsMaxOrderByAggregateInput
    _min?: UsersPaymentsMinOrderByAggregateInput
    _sum?: UsersPaymentsSumOrderByAggregateInput
  }

  export type UsersPaymentsScalarWhereWithAggregatesInput = {
    AND?: UsersPaymentsScalarWhereWithAggregatesInput | UsersPaymentsScalarWhereWithAggregatesInput[]
    OR?: UsersPaymentsScalarWhereWithAggregatesInput[]
    NOT?: UsersPaymentsScalarWhereWithAggregatesInput | UsersPaymentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UsersPayments"> | number
    usersId?: IntWithAggregatesFilter<"UsersPayments"> | number
    paymentType?: StringWithAggregatesFilter<"UsersPayments"> | string
    paymentProvider?: StringWithAggregatesFilter<"UsersPayments"> | string
    created?: DateTimeWithAggregatesFilter<"UsersPayments"> | Date | string
    modified?: DateTimeWithAggregatesFilter<"UsersPayments"> | Date | string
  }

  export type EventsCategoryWhereInput = {
    AND?: EventsCategoryWhereInput | EventsCategoryWhereInput[]
    OR?: EventsCategoryWhereInput[]
    NOT?: EventsCategoryWhereInput | EventsCategoryWhereInput[]
    id?: IntFilter<"EventsCategory"> | number
    name?: StringFilter<"EventsCategory"> | string
    description?: StringNullableFilter<"EventsCategory"> | string | null
    created?: DateTimeFilter<"EventsCategory"> | Date | string
    modified?: DateTimeFilter<"EventsCategory"> | Date | string
    deleted?: DateTimeNullableFilter<"EventsCategory"> | Date | string | null
    events?: EventsListRelationFilter
  }

  export type EventsCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    events?: EventsOrderByRelationAggregateInput
  }

  export type EventsCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: EventsCategoryWhereInput | EventsCategoryWhereInput[]
    OR?: EventsCategoryWhereInput[]
    NOT?: EventsCategoryWhereInput | EventsCategoryWhereInput[]
    description?: StringNullableFilter<"EventsCategory"> | string | null
    created?: DateTimeFilter<"EventsCategory"> | Date | string
    modified?: DateTimeFilter<"EventsCategory"> | Date | string
    deleted?: DateTimeNullableFilter<"EventsCategory"> | Date | string | null
    events?: EventsListRelationFilter
  }, "id" | "name">

  export type EventsCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    _count?: EventsCategoryCountOrderByAggregateInput
    _avg?: EventsCategoryAvgOrderByAggregateInput
    _max?: EventsCategoryMaxOrderByAggregateInput
    _min?: EventsCategoryMinOrderByAggregateInput
    _sum?: EventsCategorySumOrderByAggregateInput
  }

  export type EventsCategoryScalarWhereWithAggregatesInput = {
    AND?: EventsCategoryScalarWhereWithAggregatesInput | EventsCategoryScalarWhereWithAggregatesInput[]
    OR?: EventsCategoryScalarWhereWithAggregatesInput[]
    NOT?: EventsCategoryScalarWhereWithAggregatesInput | EventsCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EventsCategory"> | number
    name?: StringWithAggregatesFilter<"EventsCategory"> | string
    description?: StringNullableWithAggregatesFilter<"EventsCategory"> | string | null
    created?: DateTimeWithAggregatesFilter<"EventsCategory"> | Date | string
    modified?: DateTimeWithAggregatesFilter<"EventsCategory"> | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter<"EventsCategory"> | Date | string | null
  }

  export type EventsWhereInput = {
    AND?: EventsWhereInput | EventsWhereInput[]
    OR?: EventsWhereInput[]
    NOT?: EventsWhereInput | EventsWhereInput[]
    id?: IntFilter<"Events"> | number
    name?: StringFilter<"Events"> | string
    description?: StringNullableFilter<"Events"> | string | null
    cover?: StringNullableFilter<"Events"> | string | null
    startDate?: DateTimeFilter<"Events"> | Date | string
    endDate?: DateTimeFilter<"Events"> | Date | string
    capacity?: IntFilter<"Events"> | number
    addressLine1?: StringFilter<"Events"> | string
    addressLine2?: StringNullableFilter<"Events"> | string | null
    postalCode?: StringFilter<"Events"> | string
    city?: StringFilter<"Events"> | string
    region?: StringFilter<"Events"> | string
    country?: StringFilter<"Events"> | string
    categoryId?: IntNullableFilter<"Events"> | number | null
    status?: EnumStatusEventsFilter<"Events"> | $Enums.StatusEvents
    created?: DateTimeFilter<"Events"> | Date | string
    modified?: DateTimeFilter<"Events"> | Date | string
    deleted?: DateTimeNullableFilter<"Events"> | Date | string | null
    category?: XOR<EventsCategoryNullableRelationFilter, EventsCategoryWhereInput> | null
    tickets?: TicketsInfoListRelationFilter
    addEvents?: UsersEventsListRelationFilter
  }

  export type EventsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cover?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    capacity?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    region?: SortOrder
    country?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    category?: EventsCategoryOrderByWithRelationInput
    tickets?: TicketsInfoOrderByRelationAggregateInput
    addEvents?: UsersEventsOrderByRelationAggregateInput
  }

  export type EventsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventsWhereInput | EventsWhereInput[]
    OR?: EventsWhereInput[]
    NOT?: EventsWhereInput | EventsWhereInput[]
    name?: StringFilter<"Events"> | string
    description?: StringNullableFilter<"Events"> | string | null
    cover?: StringNullableFilter<"Events"> | string | null
    startDate?: DateTimeFilter<"Events"> | Date | string
    endDate?: DateTimeFilter<"Events"> | Date | string
    capacity?: IntFilter<"Events"> | number
    addressLine1?: StringFilter<"Events"> | string
    addressLine2?: StringNullableFilter<"Events"> | string | null
    postalCode?: StringFilter<"Events"> | string
    city?: StringFilter<"Events"> | string
    region?: StringFilter<"Events"> | string
    country?: StringFilter<"Events"> | string
    categoryId?: IntNullableFilter<"Events"> | number | null
    status?: EnumStatusEventsFilter<"Events"> | $Enums.StatusEvents
    created?: DateTimeFilter<"Events"> | Date | string
    modified?: DateTimeFilter<"Events"> | Date | string
    deleted?: DateTimeNullableFilter<"Events"> | Date | string | null
    category?: XOR<EventsCategoryNullableRelationFilter, EventsCategoryWhereInput> | null
    tickets?: TicketsInfoListRelationFilter
    addEvents?: UsersEventsListRelationFilter
  }, "id">

  export type EventsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cover?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    capacity?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    region?: SortOrder
    country?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    _count?: EventsCountOrderByAggregateInput
    _avg?: EventsAvgOrderByAggregateInput
    _max?: EventsMaxOrderByAggregateInput
    _min?: EventsMinOrderByAggregateInput
    _sum?: EventsSumOrderByAggregateInput
  }

  export type EventsScalarWhereWithAggregatesInput = {
    AND?: EventsScalarWhereWithAggregatesInput | EventsScalarWhereWithAggregatesInput[]
    OR?: EventsScalarWhereWithAggregatesInput[]
    NOT?: EventsScalarWhereWithAggregatesInput | EventsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Events"> | number
    name?: StringWithAggregatesFilter<"Events"> | string
    description?: StringNullableWithAggregatesFilter<"Events"> | string | null
    cover?: StringNullableWithAggregatesFilter<"Events"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Events"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Events"> | Date | string
    capacity?: IntWithAggregatesFilter<"Events"> | number
    addressLine1?: StringWithAggregatesFilter<"Events"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"Events"> | string | null
    postalCode?: StringWithAggregatesFilter<"Events"> | string
    city?: StringWithAggregatesFilter<"Events"> | string
    region?: StringWithAggregatesFilter<"Events"> | string
    country?: StringWithAggregatesFilter<"Events"> | string
    categoryId?: IntNullableWithAggregatesFilter<"Events"> | number | null
    status?: EnumStatusEventsWithAggregatesFilter<"Events"> | $Enums.StatusEvents
    created?: DateTimeWithAggregatesFilter<"Events"> | Date | string
    modified?: DateTimeWithAggregatesFilter<"Events"> | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter<"Events"> | Date | string | null
  }

  export type TicketsTypeWhereInput = {
    AND?: TicketsTypeWhereInput | TicketsTypeWhereInput[]
    OR?: TicketsTypeWhereInput[]
    NOT?: TicketsTypeWhereInput | TicketsTypeWhereInput[]
    id?: IntFilter<"TicketsType"> | number
    name?: StringFilter<"TicketsType"> | string
    description?: StringNullableFilter<"TicketsType"> | string | null
    status?: EnumStatusTicketsTypeFilter<"TicketsType"> | $Enums.StatusTicketsType
    created?: DateTimeFilter<"TicketsType"> | Date | string
    modified?: DateTimeFilter<"TicketsType"> | Date | string
    deleted?: DateTimeNullableFilter<"TicketsType"> | Date | string | null
    tickets?: TicketsInfoListRelationFilter
  }

  export type TicketsTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    tickets?: TicketsInfoOrderByRelationAggregateInput
  }

  export type TicketsTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TicketsTypeWhereInput | TicketsTypeWhereInput[]
    OR?: TicketsTypeWhereInput[]
    NOT?: TicketsTypeWhereInput | TicketsTypeWhereInput[]
    description?: StringNullableFilter<"TicketsType"> | string | null
    status?: EnumStatusTicketsTypeFilter<"TicketsType"> | $Enums.StatusTicketsType
    created?: DateTimeFilter<"TicketsType"> | Date | string
    modified?: DateTimeFilter<"TicketsType"> | Date | string
    deleted?: DateTimeNullableFilter<"TicketsType"> | Date | string | null
    tickets?: TicketsInfoListRelationFilter
  }, "id" | "name">

  export type TicketsTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    _count?: TicketsTypeCountOrderByAggregateInput
    _avg?: TicketsTypeAvgOrderByAggregateInput
    _max?: TicketsTypeMaxOrderByAggregateInput
    _min?: TicketsTypeMinOrderByAggregateInput
    _sum?: TicketsTypeSumOrderByAggregateInput
  }

  export type TicketsTypeScalarWhereWithAggregatesInput = {
    AND?: TicketsTypeScalarWhereWithAggregatesInput | TicketsTypeScalarWhereWithAggregatesInput[]
    OR?: TicketsTypeScalarWhereWithAggregatesInput[]
    NOT?: TicketsTypeScalarWhereWithAggregatesInput | TicketsTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TicketsType"> | number
    name?: StringWithAggregatesFilter<"TicketsType"> | string
    description?: StringNullableWithAggregatesFilter<"TicketsType"> | string | null
    status?: EnumStatusTicketsTypeWithAggregatesFilter<"TicketsType"> | $Enums.StatusTicketsType
    created?: DateTimeWithAggregatesFilter<"TicketsType"> | Date | string
    modified?: DateTimeWithAggregatesFilter<"TicketsType"> | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter<"TicketsType"> | Date | string | null
  }

  export type TicketsInfoWhereInput = {
    AND?: TicketsInfoWhereInput | TicketsInfoWhereInput[]
    OR?: TicketsInfoWhereInput[]
    NOT?: TicketsInfoWhereInput | TicketsInfoWhereInput[]
    id?: IntFilter<"TicketsInfo"> | number
    eventsId?: IntFilter<"TicketsInfo"> | number
    typeId?: IntNullableFilter<"TicketsInfo"> | number | null
    SKU?: StringFilter<"TicketsInfo"> | string
    price?: FloatFilter<"TicketsInfo"> | number
    quantity?: IntFilter<"TicketsInfo"> | number
    status?: EnumStatusTicketsInfoFilter<"TicketsInfo"> | $Enums.StatusTicketsInfo
    created?: DateTimeFilter<"TicketsInfo"> | Date | string
    modified?: DateTimeFilter<"TicketsInfo"> | Date | string
    deleted?: DateTimeNullableFilter<"TicketsInfo"> | Date | string | null
    event?: XOR<EventsRelationFilter, EventsWhereInput>
    type?: XOR<TicketsTypeNullableRelationFilter, TicketsTypeWhereInput> | null
    orderedTickets?: OrderedTicketsListRelationFilter
  }

  export type TicketsInfoOrderByWithRelationInput = {
    id?: SortOrder
    eventsId?: SortOrder
    typeId?: SortOrderInput | SortOrder
    SKU?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    event?: EventsOrderByWithRelationInput
    type?: TicketsTypeOrderByWithRelationInput
    orderedTickets?: OrderedTicketsOrderByRelationAggregateInput
  }

  export type TicketsInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TicketsInfoWhereInput | TicketsInfoWhereInput[]
    OR?: TicketsInfoWhereInput[]
    NOT?: TicketsInfoWhereInput | TicketsInfoWhereInput[]
    eventsId?: IntFilter<"TicketsInfo"> | number
    typeId?: IntNullableFilter<"TicketsInfo"> | number | null
    SKU?: StringFilter<"TicketsInfo"> | string
    price?: FloatFilter<"TicketsInfo"> | number
    quantity?: IntFilter<"TicketsInfo"> | number
    status?: EnumStatusTicketsInfoFilter<"TicketsInfo"> | $Enums.StatusTicketsInfo
    created?: DateTimeFilter<"TicketsInfo"> | Date | string
    modified?: DateTimeFilter<"TicketsInfo"> | Date | string
    deleted?: DateTimeNullableFilter<"TicketsInfo"> | Date | string | null
    event?: XOR<EventsRelationFilter, EventsWhereInput>
    type?: XOR<TicketsTypeNullableRelationFilter, TicketsTypeWhereInput> | null
    orderedTickets?: OrderedTicketsListRelationFilter
  }, "id">

  export type TicketsInfoOrderByWithAggregationInput = {
    id?: SortOrder
    eventsId?: SortOrder
    typeId?: SortOrderInput | SortOrder
    SKU?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrderInput | SortOrder
    _count?: TicketsInfoCountOrderByAggregateInput
    _avg?: TicketsInfoAvgOrderByAggregateInput
    _max?: TicketsInfoMaxOrderByAggregateInput
    _min?: TicketsInfoMinOrderByAggregateInput
    _sum?: TicketsInfoSumOrderByAggregateInput
  }

  export type TicketsInfoScalarWhereWithAggregatesInput = {
    AND?: TicketsInfoScalarWhereWithAggregatesInput | TicketsInfoScalarWhereWithAggregatesInput[]
    OR?: TicketsInfoScalarWhereWithAggregatesInput[]
    NOT?: TicketsInfoScalarWhereWithAggregatesInput | TicketsInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TicketsInfo"> | number
    eventsId?: IntWithAggregatesFilter<"TicketsInfo"> | number
    typeId?: IntNullableWithAggregatesFilter<"TicketsInfo"> | number | null
    SKU?: StringWithAggregatesFilter<"TicketsInfo"> | string
    price?: FloatWithAggregatesFilter<"TicketsInfo"> | number
    quantity?: IntWithAggregatesFilter<"TicketsInfo"> | number
    status?: EnumStatusTicketsInfoWithAggregatesFilter<"TicketsInfo"> | $Enums.StatusTicketsInfo
    created?: DateTimeWithAggregatesFilter<"TicketsInfo"> | Date | string
    modified?: DateTimeWithAggregatesFilter<"TicketsInfo"> | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter<"TicketsInfo"> | Date | string | null
  }

  export type OrderedTicketsWhereInput = {
    AND?: OrderedTicketsWhereInput | OrderedTicketsWhereInput[]
    OR?: OrderedTicketsWhereInput[]
    NOT?: OrderedTicketsWhereInput | OrderedTicketsWhereInput[]
    id?: IntFilter<"OrderedTickets"> | number
    ticketsInfoId?: IntFilter<"OrderedTickets"> | number
    quantity?: IntFilter<"OrderedTickets"> | number
    created?: DateTimeFilter<"OrderedTickets"> | Date | string
    modified?: DateTimeFilter<"OrderedTickets"> | Date | string
    ticketsInfo?: XOR<TicketsInfoRelationFilter, TicketsInfoWhereInput>
    orders?: OrderDetailsListRelationFilter
  }

  export type OrderedTicketsOrderByWithRelationInput = {
    id?: SortOrder
    ticketsInfoId?: SortOrder
    quantity?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    ticketsInfo?: TicketsInfoOrderByWithRelationInput
    orders?: OrderDetailsOrderByRelationAggregateInput
  }

  export type OrderedTicketsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderedTicketsWhereInput | OrderedTicketsWhereInput[]
    OR?: OrderedTicketsWhereInput[]
    NOT?: OrderedTicketsWhereInput | OrderedTicketsWhereInput[]
    ticketsInfoId?: IntFilter<"OrderedTickets"> | number
    quantity?: IntFilter<"OrderedTickets"> | number
    created?: DateTimeFilter<"OrderedTickets"> | Date | string
    modified?: DateTimeFilter<"OrderedTickets"> | Date | string
    ticketsInfo?: XOR<TicketsInfoRelationFilter, TicketsInfoWhereInput>
    orders?: OrderDetailsListRelationFilter
  }, "id">

  export type OrderedTicketsOrderByWithAggregationInput = {
    id?: SortOrder
    ticketsInfoId?: SortOrder
    quantity?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    _count?: OrderedTicketsCountOrderByAggregateInput
    _avg?: OrderedTicketsAvgOrderByAggregateInput
    _max?: OrderedTicketsMaxOrderByAggregateInput
    _min?: OrderedTicketsMinOrderByAggregateInput
    _sum?: OrderedTicketsSumOrderByAggregateInput
  }

  export type OrderedTicketsScalarWhereWithAggregatesInput = {
    AND?: OrderedTicketsScalarWhereWithAggregatesInput | OrderedTicketsScalarWhereWithAggregatesInput[]
    OR?: OrderedTicketsScalarWhereWithAggregatesInput[]
    NOT?: OrderedTicketsScalarWhereWithAggregatesInput | OrderedTicketsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderedTickets"> | number
    ticketsInfoId?: IntWithAggregatesFilter<"OrderedTickets"> | number
    quantity?: IntWithAggregatesFilter<"OrderedTickets"> | number
    created?: DateTimeWithAggregatesFilter<"OrderedTickets"> | Date | string
    modified?: DateTimeWithAggregatesFilter<"OrderedTickets"> | Date | string
  }

  export type OrderDetailsWhereInput = {
    AND?: OrderDetailsWhereInput | OrderDetailsWhereInput[]
    OR?: OrderDetailsWhereInput[]
    NOT?: OrderDetailsWhereInput | OrderDetailsWhereInput[]
    id?: IntFilter<"OrderDetails"> | number
    usersId?: IntFilter<"OrderDetails"> | number
    orderedTicketsId?: IntFilter<"OrderDetails"> | number
    orderTotal?: FloatFilter<"OrderDetails"> | number
    orderDate?: DateTimeFilter<"OrderDetails"> | Date | string
    statusCart?: EnumStatusOnCartFilter<"OrderDetails"> | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFilter<"OrderDetails"> | $Enums.StatusOrderDetails
    created?: DateTimeFilter<"OrderDetails"> | Date | string
    modified?: DateTimeFilter<"OrderDetails"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    orderedTickets?: XOR<OrderedTicketsRelationFilter, OrderedTicketsWhereInput>
    paymentDetails?: PaymentDetailsListRelationFilter
  }

  export type OrderDetailsOrderByWithRelationInput = {
    id?: SortOrder
    usersId?: SortOrder
    orderedTicketsId?: SortOrder
    orderTotal?: SortOrder
    orderDate?: SortOrder
    statusCart?: SortOrder
    statusOrder?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    user?: UsersOrderByWithRelationInput
    orderedTickets?: OrderedTicketsOrderByWithRelationInput
    paymentDetails?: PaymentDetailsOrderByRelationAggregateInput
  }

  export type OrderDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderDetailsWhereInput | OrderDetailsWhereInput[]
    OR?: OrderDetailsWhereInput[]
    NOT?: OrderDetailsWhereInput | OrderDetailsWhereInput[]
    usersId?: IntFilter<"OrderDetails"> | number
    orderedTicketsId?: IntFilter<"OrderDetails"> | number
    orderTotal?: FloatFilter<"OrderDetails"> | number
    orderDate?: DateTimeFilter<"OrderDetails"> | Date | string
    statusCart?: EnumStatusOnCartFilter<"OrderDetails"> | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFilter<"OrderDetails"> | $Enums.StatusOrderDetails
    created?: DateTimeFilter<"OrderDetails"> | Date | string
    modified?: DateTimeFilter<"OrderDetails"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    orderedTickets?: XOR<OrderedTicketsRelationFilter, OrderedTicketsWhereInput>
    paymentDetails?: PaymentDetailsListRelationFilter
  }, "id">

  export type OrderDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    usersId?: SortOrder
    orderedTicketsId?: SortOrder
    orderTotal?: SortOrder
    orderDate?: SortOrder
    statusCart?: SortOrder
    statusOrder?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    _count?: OrderDetailsCountOrderByAggregateInput
    _avg?: OrderDetailsAvgOrderByAggregateInput
    _max?: OrderDetailsMaxOrderByAggregateInput
    _min?: OrderDetailsMinOrderByAggregateInput
    _sum?: OrderDetailsSumOrderByAggregateInput
  }

  export type OrderDetailsScalarWhereWithAggregatesInput = {
    AND?: OrderDetailsScalarWhereWithAggregatesInput | OrderDetailsScalarWhereWithAggregatesInput[]
    OR?: OrderDetailsScalarWhereWithAggregatesInput[]
    NOT?: OrderDetailsScalarWhereWithAggregatesInput | OrderDetailsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderDetails"> | number
    usersId?: IntWithAggregatesFilter<"OrderDetails"> | number
    orderedTicketsId?: IntWithAggregatesFilter<"OrderDetails"> | number
    orderTotal?: FloatWithAggregatesFilter<"OrderDetails"> | number
    orderDate?: DateTimeWithAggregatesFilter<"OrderDetails"> | Date | string
    statusCart?: EnumStatusOnCartWithAggregatesFilter<"OrderDetails"> | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsWithAggregatesFilter<"OrderDetails"> | $Enums.StatusOrderDetails
    created?: DateTimeWithAggregatesFilter<"OrderDetails"> | Date | string
    modified?: DateTimeWithAggregatesFilter<"OrderDetails"> | Date | string
  }

  export type PaymentDetailsWhereInput = {
    AND?: PaymentDetailsWhereInput | PaymentDetailsWhereInput[]
    OR?: PaymentDetailsWhereInput[]
    NOT?: PaymentDetailsWhereInput | PaymentDetailsWhereInput[]
    id?: IntFilter<"PaymentDetails"> | number
    orderId?: IntFilter<"PaymentDetails"> | number
    usersPaymentsId?: IntFilter<"PaymentDetails"> | number
    paymentAmount?: FloatFilter<"PaymentDetails"> | number
    paymentDate?: DateTimeFilter<"PaymentDetails"> | Date | string
    status?: EnumStatusPaymentDetailsFilter<"PaymentDetails"> | $Enums.StatusPaymentDetails
    order?: XOR<OrderDetailsRelationFilter, OrderDetailsWhereInput>
    usersPayments?: XOR<UsersPaymentsRelationFilter, UsersPaymentsWhereInput>
  }

  export type PaymentDetailsOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    usersPaymentsId?: SortOrder
    paymentAmount?: SortOrder
    paymentDate?: SortOrder
    status?: SortOrder
    order?: OrderDetailsOrderByWithRelationInput
    usersPayments?: UsersPaymentsOrderByWithRelationInput
  }

  export type PaymentDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentDetailsWhereInput | PaymentDetailsWhereInput[]
    OR?: PaymentDetailsWhereInput[]
    NOT?: PaymentDetailsWhereInput | PaymentDetailsWhereInput[]
    orderId?: IntFilter<"PaymentDetails"> | number
    usersPaymentsId?: IntFilter<"PaymentDetails"> | number
    paymentAmount?: FloatFilter<"PaymentDetails"> | number
    paymentDate?: DateTimeFilter<"PaymentDetails"> | Date | string
    status?: EnumStatusPaymentDetailsFilter<"PaymentDetails"> | $Enums.StatusPaymentDetails
    order?: XOR<OrderDetailsRelationFilter, OrderDetailsWhereInput>
    usersPayments?: XOR<UsersPaymentsRelationFilter, UsersPaymentsWhereInput>
  }, "id">

  export type PaymentDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    usersPaymentsId?: SortOrder
    paymentAmount?: SortOrder
    paymentDate?: SortOrder
    status?: SortOrder
    _count?: PaymentDetailsCountOrderByAggregateInput
    _avg?: PaymentDetailsAvgOrderByAggregateInput
    _max?: PaymentDetailsMaxOrderByAggregateInput
    _min?: PaymentDetailsMinOrderByAggregateInput
    _sum?: PaymentDetailsSumOrderByAggregateInput
  }

  export type PaymentDetailsScalarWhereWithAggregatesInput = {
    AND?: PaymentDetailsScalarWhereWithAggregatesInput | PaymentDetailsScalarWhereWithAggregatesInput[]
    OR?: PaymentDetailsScalarWhereWithAggregatesInput[]
    NOT?: PaymentDetailsScalarWhereWithAggregatesInput | PaymentDetailsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PaymentDetails"> | number
    orderId?: IntWithAggregatesFilter<"PaymentDetails"> | number
    usersPaymentsId?: IntWithAggregatesFilter<"PaymentDetails"> | number
    paymentAmount?: FloatWithAggregatesFilter<"PaymentDetails"> | number
    paymentDate?: DateTimeWithAggregatesFilter<"PaymentDetails"> | Date | string
    status?: EnumStatusPaymentDetailsWithAggregatesFilter<"PaymentDetails"> | $Enums.StatusPaymentDetails
  }

  export type UsersEventsWhereInput = {
    AND?: UsersEventsWhereInput | UsersEventsWhereInput[]
    OR?: UsersEventsWhereInput[]
    NOT?: UsersEventsWhereInput | UsersEventsWhereInput[]
    id?: IntFilter<"UsersEvents"> | number
    userId?: IntFilter<"UsersEvents"> | number
    eventId?: IntFilter<"UsersEvents"> | number
    created?: DateTimeFilter<"UsersEvents"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    event?: XOR<EventsRelationFilter, EventsWhereInput>
  }

  export type UsersEventsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    created?: SortOrder
    user?: UsersOrderByWithRelationInput
    event?: EventsOrderByWithRelationInput
  }

  export type UsersEventsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UsersEventsWhereInput | UsersEventsWhereInput[]
    OR?: UsersEventsWhereInput[]
    NOT?: UsersEventsWhereInput | UsersEventsWhereInput[]
    userId?: IntFilter<"UsersEvents"> | number
    eventId?: IntFilter<"UsersEvents"> | number
    created?: DateTimeFilter<"UsersEvents"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    event?: XOR<EventsRelationFilter, EventsWhereInput>
  }, "id">

  export type UsersEventsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    created?: SortOrder
    _count?: UsersEventsCountOrderByAggregateInput
    _avg?: UsersEventsAvgOrderByAggregateInput
    _max?: UsersEventsMaxOrderByAggregateInput
    _min?: UsersEventsMinOrderByAggregateInput
    _sum?: UsersEventsSumOrderByAggregateInput
  }

  export type UsersEventsScalarWhereWithAggregatesInput = {
    AND?: UsersEventsScalarWhereWithAggregatesInput | UsersEventsScalarWhereWithAggregatesInput[]
    OR?: UsersEventsScalarWhereWithAggregatesInput[]
    NOT?: UsersEventsScalarWhereWithAggregatesInput | UsersEventsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UsersEvents"> | number
    userId?: IntWithAggregatesFilter<"UsersEvents"> | number
    eventId?: IntWithAggregatesFilter<"UsersEvents"> | number
    created?: DateTimeWithAggregatesFilter<"UsersEvents"> | Date | string
  }

  export type UsersAddressCreateInput = {
    addressLine1?: string | null
    addressLine2?: string | null
    postalCode?: string | null
    city?: string | null
    region?: string | null
    country?: string | null
    users?: UsersCreateNestedManyWithoutAddressInput
  }

  export type UsersAddressUncheckedCreateInput = {
    id?: number
    addressLine1?: string | null
    addressLine2?: string | null
    postalCode?: string | null
    city?: string | null
    region?: string | null
    country?: string | null
    users?: UsersUncheckedCreateNestedManyWithoutAddressInput
  }

  export type UsersAddressUpdateInput = {
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UsersUpdateManyWithoutAddressNestedInput
  }

  export type UsersAddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UsersUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type UsersAddressCreateManyInput = {
    id?: number
    addressLine1?: string | null
    addressLine2?: string | null
    postalCode?: string | null
    city?: string | null
    region?: string | null
    country?: string | null
  }

  export type UsersAddressUpdateManyMutationInput = {
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersAddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersCreateInput = {
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    address?: UsersAddressCreateNestedOneWithoutUsersInput
    payments?: UsersPaymentsCreateNestedManyWithoutUserInput
    orders?: OrderDetailsCreateNestedManyWithoutUserInput
    addEvents?: UsersEventsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    addressId?: number | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    payments?: UsersPaymentsUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderDetailsUncheckedCreateNestedManyWithoutUserInput
    addEvents?: UsersEventsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: UsersAddressUpdateOneWithoutUsersNestedInput
    payments?: UsersPaymentsUpdateManyWithoutUserNestedInput
    orders?: OrderDetailsUpdateManyWithoutUserNestedInput
    addEvents?: UsersEventsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: UsersPaymentsUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderDetailsUncheckedUpdateManyWithoutUserNestedInput
    addEvents?: UsersEventsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    addressId?: number | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type UsersUpdateManyMutationInput = {
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersPaymentsCreateInput = {
    paymentType: string
    paymentProvider: string
    created?: Date | string
    modified?: Date | string
    user: UsersCreateNestedOneWithoutPaymentsInput
    paymentDetails?: PaymentDetailsCreateNestedManyWithoutUsersPaymentsInput
  }

  export type UsersPaymentsUncheckedCreateInput = {
    id?: number
    usersId: number
    paymentType: string
    paymentProvider: string
    created?: Date | string
    modified?: Date | string
    paymentDetails?: PaymentDetailsUncheckedCreateNestedManyWithoutUsersPaymentsInput
  }

  export type UsersPaymentsUpdateInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutPaymentsNestedInput
    paymentDetails?: PaymentDetailsUpdateManyWithoutUsersPaymentsNestedInput
  }

  export type UsersPaymentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDetails?: PaymentDetailsUncheckedUpdateManyWithoutUsersPaymentsNestedInput
  }

  export type UsersPaymentsCreateManyInput = {
    id?: number
    usersId: number
    paymentType: string
    paymentProvider: string
    created?: Date | string
    modified?: Date | string
  }

  export type UsersPaymentsUpdateManyMutationInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersPaymentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventsCategoryCreateInput = {
    name: string
    description?: string | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    events?: EventsCreateNestedManyWithoutCategoryInput
  }

  export type EventsCategoryUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    events?: EventsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type EventsCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    events?: EventsUpdateManyWithoutCategoryNestedInput
  }

  export type EventsCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    events?: EventsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type EventsCategoryCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type EventsCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventsCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventsCreateInput = {
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    category?: EventsCategoryCreateNestedOneWithoutEventsInput
    tickets?: TicketsInfoCreateNestedManyWithoutEventInput
    addEvents?: UsersEventsCreateNestedManyWithoutEventInput
  }

  export type EventsUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    categoryId?: number | null
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    tickets?: TicketsInfoUncheckedCreateNestedManyWithoutEventInput
    addEvents?: UsersEventsUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EventsCategoryUpdateOneWithoutEventsNestedInput
    tickets?: TicketsInfoUpdateManyWithoutEventNestedInput
    addEvents?: UsersEventsUpdateManyWithoutEventNestedInput
  }

  export type EventsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketsInfoUncheckedUpdateManyWithoutEventNestedInput
    addEvents?: UsersEventsUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventsCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    categoryId?: number | null
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type EventsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketsTypeCreateInput = {
    name: string
    description?: string | null
    status?: $Enums.StatusTicketsType
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    tickets?: TicketsInfoCreateNestedManyWithoutTypeInput
  }

  export type TicketsTypeUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    status?: $Enums.StatusTicketsType
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    tickets?: TicketsInfoUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TicketsTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusTicketsTypeFieldUpdateOperationsInput | $Enums.StatusTicketsType
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketsInfoUpdateManyWithoutTypeNestedInput
  }

  export type TicketsTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusTicketsTypeFieldUpdateOperationsInput | $Enums.StatusTicketsType
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketsInfoUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type TicketsTypeCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    status?: $Enums.StatusTicketsType
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type TicketsTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusTicketsTypeFieldUpdateOperationsInput | $Enums.StatusTicketsType
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketsTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusTicketsTypeFieldUpdateOperationsInput | $Enums.StatusTicketsType
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketsInfoCreateInput = {
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    event: EventsCreateNestedOneWithoutTicketsInput
    type?: TicketsTypeCreateNestedOneWithoutTicketsInput
    orderedTickets?: OrderedTicketsCreateNestedManyWithoutTicketsInfoInput
  }

  export type TicketsInfoUncheckedCreateInput = {
    id?: number
    eventsId: number
    typeId?: number | null
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    orderedTickets?: OrderedTicketsUncheckedCreateNestedManyWithoutTicketsInfoInput
  }

  export type TicketsInfoUpdateInput = {
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event?: EventsUpdateOneRequiredWithoutTicketsNestedInput
    type?: TicketsTypeUpdateOneWithoutTicketsNestedInput
    orderedTickets?: OrderedTicketsUpdateManyWithoutTicketsInfoNestedInput
  }

  export type TicketsInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventsId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderedTickets?: OrderedTicketsUncheckedUpdateManyWithoutTicketsInfoNestedInput
  }

  export type TicketsInfoCreateManyInput = {
    id?: number
    eventsId: number
    typeId?: number | null
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type TicketsInfoUpdateManyMutationInput = {
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketsInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventsId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderedTicketsCreateInput = {
    quantity: number
    created?: Date | string
    modified?: Date | string
    ticketsInfo: TicketsInfoCreateNestedOneWithoutOrderedTicketsInput
    orders?: OrderDetailsCreateNestedManyWithoutOrderedTicketsInput
  }

  export type OrderedTicketsUncheckedCreateInput = {
    id?: number
    ticketsInfoId: number
    quantity: number
    created?: Date | string
    modified?: Date | string
    orders?: OrderDetailsUncheckedCreateNestedManyWithoutOrderedTicketsInput
  }

  export type OrderedTicketsUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketsInfo?: TicketsInfoUpdateOneRequiredWithoutOrderedTicketsNestedInput
    orders?: OrderDetailsUpdateManyWithoutOrderedTicketsNestedInput
  }

  export type OrderedTicketsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticketsInfoId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderDetailsUncheckedUpdateManyWithoutOrderedTicketsNestedInput
  }

  export type OrderedTicketsCreateManyInput = {
    id?: number
    ticketsInfoId: number
    quantity: number
    created?: Date | string
    modified?: Date | string
  }

  export type OrderedTicketsUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedTicketsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticketsInfoId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDetailsCreateInput = {
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
    user: UsersCreateNestedOneWithoutOrdersInput
    orderedTickets: OrderedTicketsCreateNestedOneWithoutOrdersInput
    paymentDetails?: PaymentDetailsCreateNestedManyWithoutOrderInput
  }

  export type OrderDetailsUncheckedCreateInput = {
    id?: number
    usersId: number
    orderedTicketsId: number
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
    paymentDetails?: PaymentDetailsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderDetailsUpdateInput = {
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutOrdersNestedInput
    orderedTickets?: OrderedTicketsUpdateOneRequiredWithoutOrdersNestedInput
    paymentDetails?: PaymentDetailsUpdateManyWithoutOrderNestedInput
  }

  export type OrderDetailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    orderedTicketsId?: IntFieldUpdateOperationsInput | number
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDetails?: PaymentDetailsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderDetailsCreateManyInput = {
    id?: number
    usersId: number
    orderedTicketsId: number
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
  }

  export type OrderDetailsUpdateManyMutationInput = {
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDetailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    orderedTicketsId?: IntFieldUpdateOperationsInput | number
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentDetailsCreateInput = {
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
    order: OrderDetailsCreateNestedOneWithoutPaymentDetailsInput
    usersPayments: UsersPaymentsCreateNestedOneWithoutPaymentDetailsInput
  }

  export type PaymentDetailsUncheckedCreateInput = {
    id?: number
    orderId: number
    usersPaymentsId: number
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsUpdateInput = {
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
    order?: OrderDetailsUpdateOneRequiredWithoutPaymentDetailsNestedInput
    usersPayments?: UsersPaymentsUpdateOneRequiredWithoutPaymentDetailsNestedInput
  }

  export type PaymentDetailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    usersPaymentsId?: IntFieldUpdateOperationsInput | number
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsCreateManyInput = {
    id?: number
    orderId: number
    usersPaymentsId: number
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsUpdateManyMutationInput = {
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    usersPaymentsId?: IntFieldUpdateOperationsInput | number
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
  }

  export type UsersEventsCreateInput = {
    created?: Date | string
    user: UsersCreateNestedOneWithoutAddEventsInput
    event: EventsCreateNestedOneWithoutAddEventsInput
  }

  export type UsersEventsUncheckedCreateInput = {
    id?: number
    userId: number
    eventId: number
    created?: Date | string
  }

  export type UsersEventsUpdateInput = {
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutAddEventsNestedInput
    event?: EventsUpdateOneRequiredWithoutAddEventsNestedInput
  }

  export type UsersEventsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersEventsCreateManyInput = {
    id?: number
    userId: number
    eventId: number
    created?: Date | string
  }

  export type UsersEventsUpdateManyMutationInput = {
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersEventsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersAddressCountOrderByAggregateInput = {
    id?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    region?: SortOrder
    country?: SortOrder
  }

  export type UsersAddressAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    region?: SortOrder
    country?: SortOrder
  }

  export type UsersAddressMinOrderByAggregateInput = {
    id?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    region?: SortOrder
    country?: SortOrder
  }

  export type UsersAddressSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUsersTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UsersType | EnumUsersTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UsersType[] | ListEnumUsersTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UsersType[] | ListEnumUsersTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUsersTypeFilter<$PrismaModel> | $Enums.UsersType
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UsersAddressNullableRelationFilter = {
    is?: UsersAddressWhereInput | null
    isNot?: UsersAddressWhereInput | null
  }

  export type UsersPaymentsListRelationFilter = {
    every?: UsersPaymentsWhereInput
    some?: UsersPaymentsWhereInput
    none?: UsersPaymentsWhereInput
  }

  export type OrderDetailsListRelationFilter = {
    every?: OrderDetailsWhereInput
    some?: OrderDetailsWhereInput
    none?: OrderDetailsWhereInput
  }

  export type UsersEventsListRelationFilter = {
    every?: UsersEventsWhereInput
    some?: UsersEventsWhereInput
    none?: UsersEventsWhereInput
  }

  export type UsersPaymentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderDetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersEventsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    profilePic?: SortOrder
    userName?: SortOrder
    userPassword?: SortOrder
    usersType?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    addressId?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    profilePic?: SortOrder
    userName?: SortOrder
    userPassword?: SortOrder
    usersType?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    addressId?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    profilePic?: SortOrder
    userName?: SortOrder
    userPassword?: SortOrder
    usersType?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    addressId?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUsersTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UsersType | EnumUsersTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UsersType[] | ListEnumUsersTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UsersType[] | ListEnumUsersTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUsersTypeWithAggregatesFilter<$PrismaModel> | $Enums.UsersType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUsersTypeFilter<$PrismaModel>
    _max?: NestedEnumUsersTypeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type PaymentDetailsListRelationFilter = {
    every?: PaymentDetailsWhereInput
    some?: PaymentDetailsWhereInput
    none?: PaymentDetailsWhereInput
  }

  export type PaymentDetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersPaymentsCountOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    paymentType?: SortOrder
    paymentProvider?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type UsersPaymentsAvgOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
  }

  export type UsersPaymentsMaxOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    paymentType?: SortOrder
    paymentProvider?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type UsersPaymentsMinOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    paymentType?: SortOrder
    paymentProvider?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type UsersPaymentsSumOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
  }

  export type EventsListRelationFilter = {
    every?: EventsWhereInput
    some?: EventsWhereInput
    none?: EventsWhereInput
  }

  export type EventsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventsCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type EventsCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EventsCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type EventsCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type EventsCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumStatusEventsFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEvents | EnumStatusEventsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEvents[] | ListEnumStatusEventsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusEvents[] | ListEnumStatusEventsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusEventsFilter<$PrismaModel> | $Enums.StatusEvents
  }

  export type EventsCategoryNullableRelationFilter = {
    is?: EventsCategoryWhereInput | null
    isNot?: EventsCategoryWhereInput | null
  }

  export type TicketsInfoListRelationFilter = {
    every?: TicketsInfoWhereInput
    some?: TicketsInfoWhereInput
    none?: TicketsInfoWhereInput
  }

  export type TicketsInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cover?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    capacity?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    region?: SortOrder
    country?: SortOrder
    categoryId?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type EventsAvgOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    categoryId?: SortOrder
  }

  export type EventsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cover?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    capacity?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    region?: SortOrder
    country?: SortOrder
    categoryId?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type EventsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cover?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    capacity?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    region?: SortOrder
    country?: SortOrder
    categoryId?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type EventsSumOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    categoryId?: SortOrder
  }

  export type EnumStatusEventsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEvents | EnumStatusEventsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEvents[] | ListEnumStatusEventsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusEvents[] | ListEnumStatusEventsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusEventsWithAggregatesFilter<$PrismaModel> | $Enums.StatusEvents
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusEventsFilter<$PrismaModel>
    _max?: NestedEnumStatusEventsFilter<$PrismaModel>
  }

  export type EnumStatusTicketsTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusTicketsType | EnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StatusTicketsType[] | ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusTicketsType[] | ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusTicketsTypeFilter<$PrismaModel> | $Enums.StatusTicketsType
  }

  export type TicketsTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type TicketsTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TicketsTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type TicketsTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type TicketsTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumStatusTicketsTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusTicketsType | EnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StatusTicketsType[] | ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusTicketsType[] | ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusTicketsTypeWithAggregatesFilter<$PrismaModel> | $Enums.StatusTicketsType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusTicketsTypeFilter<$PrismaModel>
    _max?: NestedEnumStatusTicketsTypeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumStatusTicketsInfoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusTicketsInfo | EnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusTicketsInfo[] | ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusTicketsInfo[] | ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusTicketsInfoFilter<$PrismaModel> | $Enums.StatusTicketsInfo
  }

  export type EventsRelationFilter = {
    is?: EventsWhereInput
    isNot?: EventsWhereInput
  }

  export type TicketsTypeNullableRelationFilter = {
    is?: TicketsTypeWhereInput | null
    isNot?: TicketsTypeWhereInput | null
  }

  export type OrderedTicketsListRelationFilter = {
    every?: OrderedTicketsWhereInput
    some?: OrderedTicketsWhereInput
    none?: OrderedTicketsWhereInput
  }

  export type OrderedTicketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketsInfoCountOrderByAggregateInput = {
    id?: SortOrder
    eventsId?: SortOrder
    typeId?: SortOrder
    SKU?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type TicketsInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    eventsId?: SortOrder
    typeId?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
  }

  export type TicketsInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    eventsId?: SortOrder
    typeId?: SortOrder
    SKU?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type TicketsInfoMinOrderByAggregateInput = {
    id?: SortOrder
    eventsId?: SortOrder
    typeId?: SortOrder
    SKU?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    created?: SortOrder
    modified?: SortOrder
    deleted?: SortOrder
  }

  export type TicketsInfoSumOrderByAggregateInput = {
    id?: SortOrder
    eventsId?: SortOrder
    typeId?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumStatusTicketsInfoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusTicketsInfo | EnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusTicketsInfo[] | ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusTicketsInfo[] | ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusTicketsInfoWithAggregatesFilter<$PrismaModel> | $Enums.StatusTicketsInfo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusTicketsInfoFilter<$PrismaModel>
    _max?: NestedEnumStatusTicketsInfoFilter<$PrismaModel>
  }

  export type TicketsInfoRelationFilter = {
    is?: TicketsInfoWhereInput
    isNot?: TicketsInfoWhereInput
  }

  export type OrderedTicketsCountOrderByAggregateInput = {
    id?: SortOrder
    ticketsInfoId?: SortOrder
    quantity?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type OrderedTicketsAvgOrderByAggregateInput = {
    id?: SortOrder
    ticketsInfoId?: SortOrder
    quantity?: SortOrder
  }

  export type OrderedTicketsMaxOrderByAggregateInput = {
    id?: SortOrder
    ticketsInfoId?: SortOrder
    quantity?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type OrderedTicketsMinOrderByAggregateInput = {
    id?: SortOrder
    ticketsInfoId?: SortOrder
    quantity?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type OrderedTicketsSumOrderByAggregateInput = {
    id?: SortOrder
    ticketsInfoId?: SortOrder
    quantity?: SortOrder
  }

  export type EnumStatusOnCartFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOnCart | EnumStatusOnCartFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOnCart[] | ListEnumStatusOnCartFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOnCart[] | ListEnumStatusOnCartFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOnCartFilter<$PrismaModel> | $Enums.StatusOnCart
  }

  export type EnumStatusOrderDetailsFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOrderDetails | EnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOrderDetails[] | ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOrderDetails[] | ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOrderDetailsFilter<$PrismaModel> | $Enums.StatusOrderDetails
  }

  export type OrderedTicketsRelationFilter = {
    is?: OrderedTicketsWhereInput
    isNot?: OrderedTicketsWhereInput
  }

  export type OrderDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    orderedTicketsId?: SortOrder
    orderTotal?: SortOrder
    orderDate?: SortOrder
    statusCart?: SortOrder
    statusOrder?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type OrderDetailsAvgOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    orderedTicketsId?: SortOrder
    orderTotal?: SortOrder
  }

  export type OrderDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    orderedTicketsId?: SortOrder
    orderTotal?: SortOrder
    orderDate?: SortOrder
    statusCart?: SortOrder
    statusOrder?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type OrderDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    orderedTicketsId?: SortOrder
    orderTotal?: SortOrder
    orderDate?: SortOrder
    statusCart?: SortOrder
    statusOrder?: SortOrder
    created?: SortOrder
    modified?: SortOrder
  }

  export type OrderDetailsSumOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
    orderedTicketsId?: SortOrder
    orderTotal?: SortOrder
  }

  export type EnumStatusOnCartWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOnCart | EnumStatusOnCartFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOnCart[] | ListEnumStatusOnCartFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOnCart[] | ListEnumStatusOnCartFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOnCartWithAggregatesFilter<$PrismaModel> | $Enums.StatusOnCart
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusOnCartFilter<$PrismaModel>
    _max?: NestedEnumStatusOnCartFilter<$PrismaModel>
  }

  export type EnumStatusOrderDetailsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOrderDetails | EnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOrderDetails[] | ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOrderDetails[] | ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOrderDetailsWithAggregatesFilter<$PrismaModel> | $Enums.StatusOrderDetails
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusOrderDetailsFilter<$PrismaModel>
    _max?: NestedEnumStatusOrderDetailsFilter<$PrismaModel>
  }

  export type EnumStatusPaymentDetailsFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusPaymentDetails | EnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusPaymentDetails[] | ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusPaymentDetails[] | ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusPaymentDetailsFilter<$PrismaModel> | $Enums.StatusPaymentDetails
  }

  export type OrderDetailsRelationFilter = {
    is?: OrderDetailsWhereInput
    isNot?: OrderDetailsWhereInput
  }

  export type UsersPaymentsRelationFilter = {
    is?: UsersPaymentsWhereInput
    isNot?: UsersPaymentsWhereInput
  }

  export type PaymentDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    usersPaymentsId?: SortOrder
    paymentAmount?: SortOrder
    paymentDate?: SortOrder
    status?: SortOrder
  }

  export type PaymentDetailsAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    usersPaymentsId?: SortOrder
    paymentAmount?: SortOrder
  }

  export type PaymentDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    usersPaymentsId?: SortOrder
    paymentAmount?: SortOrder
    paymentDate?: SortOrder
    status?: SortOrder
  }

  export type PaymentDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    usersPaymentsId?: SortOrder
    paymentAmount?: SortOrder
    paymentDate?: SortOrder
    status?: SortOrder
  }

  export type PaymentDetailsSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    usersPaymentsId?: SortOrder
    paymentAmount?: SortOrder
  }

  export type EnumStatusPaymentDetailsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusPaymentDetails | EnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusPaymentDetails[] | ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusPaymentDetails[] | ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusPaymentDetailsWithAggregatesFilter<$PrismaModel> | $Enums.StatusPaymentDetails
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusPaymentDetailsFilter<$PrismaModel>
    _max?: NestedEnumStatusPaymentDetailsFilter<$PrismaModel>
  }

  export type UsersEventsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    created?: SortOrder
  }

  export type UsersEventsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
  }

  export type UsersEventsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    created?: SortOrder
  }

  export type UsersEventsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    created?: SortOrder
  }

  export type UsersEventsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
  }

  export type UsersCreateNestedManyWithoutAddressInput = {
    create?: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput> | UsersCreateWithoutAddressInput[] | UsersUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAddressInput | UsersCreateOrConnectWithoutAddressInput[]
    createMany?: UsersCreateManyAddressInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput> | UsersCreateWithoutAddressInput[] | UsersUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAddressInput | UsersCreateOrConnectWithoutAddressInput[]
    createMany?: UsersCreateManyAddressInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsersUpdateManyWithoutAddressNestedInput = {
    create?: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput> | UsersCreateWithoutAddressInput[] | UsersUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAddressInput | UsersCreateOrConnectWithoutAddressInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutAddressInput | UsersUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: UsersCreateManyAddressInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutAddressInput | UsersUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutAddressInput | UsersUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput> | UsersCreateWithoutAddressInput[] | UsersUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAddressInput | UsersCreateOrConnectWithoutAddressInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutAddressInput | UsersUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: UsersCreateManyAddressInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutAddressInput | UsersUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutAddressInput | UsersUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersAddressCreateNestedOneWithoutUsersInput = {
    create?: XOR<UsersAddressCreateWithoutUsersInput, UsersAddressUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UsersAddressCreateOrConnectWithoutUsersInput
    connect?: UsersAddressWhereUniqueInput
  }

  export type UsersPaymentsCreateNestedManyWithoutUserInput = {
    create?: XOR<UsersPaymentsCreateWithoutUserInput, UsersPaymentsUncheckedCreateWithoutUserInput> | UsersPaymentsCreateWithoutUserInput[] | UsersPaymentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersPaymentsCreateOrConnectWithoutUserInput | UsersPaymentsCreateOrConnectWithoutUserInput[]
    createMany?: UsersPaymentsCreateManyUserInputEnvelope
    connect?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
  }

  export type OrderDetailsCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderDetailsCreateWithoutUserInput, OrderDetailsUncheckedCreateWithoutUserInput> | OrderDetailsCreateWithoutUserInput[] | OrderDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutUserInput | OrderDetailsCreateOrConnectWithoutUserInput[]
    createMany?: OrderDetailsCreateManyUserInputEnvelope
    connect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
  }

  export type UsersEventsCreateNestedManyWithoutUserInput = {
    create?: XOR<UsersEventsCreateWithoutUserInput, UsersEventsUncheckedCreateWithoutUserInput> | UsersEventsCreateWithoutUserInput[] | UsersEventsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersEventsCreateOrConnectWithoutUserInput | UsersEventsCreateOrConnectWithoutUserInput[]
    createMany?: UsersEventsCreateManyUserInputEnvelope
    connect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
  }

  export type UsersPaymentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UsersPaymentsCreateWithoutUserInput, UsersPaymentsUncheckedCreateWithoutUserInput> | UsersPaymentsCreateWithoutUserInput[] | UsersPaymentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersPaymentsCreateOrConnectWithoutUserInput | UsersPaymentsCreateOrConnectWithoutUserInput[]
    createMany?: UsersPaymentsCreateManyUserInputEnvelope
    connect?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
  }

  export type OrderDetailsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderDetailsCreateWithoutUserInput, OrderDetailsUncheckedCreateWithoutUserInput> | OrderDetailsCreateWithoutUserInput[] | OrderDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutUserInput | OrderDetailsCreateOrConnectWithoutUserInput[]
    createMany?: OrderDetailsCreateManyUserInputEnvelope
    connect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
  }

  export type UsersEventsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UsersEventsCreateWithoutUserInput, UsersEventsUncheckedCreateWithoutUserInput> | UsersEventsCreateWithoutUserInput[] | UsersEventsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersEventsCreateOrConnectWithoutUserInput | UsersEventsCreateOrConnectWithoutUserInput[]
    createMany?: UsersEventsCreateManyUserInputEnvelope
    connect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUsersTypeFieldUpdateOperationsInput = {
    set?: $Enums.UsersType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UsersAddressUpdateOneWithoutUsersNestedInput = {
    create?: XOR<UsersAddressCreateWithoutUsersInput, UsersAddressUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UsersAddressCreateOrConnectWithoutUsersInput
    upsert?: UsersAddressUpsertWithoutUsersInput
    disconnect?: UsersAddressWhereInput | boolean
    delete?: UsersAddressWhereInput | boolean
    connect?: UsersAddressWhereUniqueInput
    update?: XOR<XOR<UsersAddressUpdateToOneWithWhereWithoutUsersInput, UsersAddressUpdateWithoutUsersInput>, UsersAddressUncheckedUpdateWithoutUsersInput>
  }

  export type UsersPaymentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsersPaymentsCreateWithoutUserInput, UsersPaymentsUncheckedCreateWithoutUserInput> | UsersPaymentsCreateWithoutUserInput[] | UsersPaymentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersPaymentsCreateOrConnectWithoutUserInput | UsersPaymentsCreateOrConnectWithoutUserInput[]
    upsert?: UsersPaymentsUpsertWithWhereUniqueWithoutUserInput | UsersPaymentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsersPaymentsCreateManyUserInputEnvelope
    set?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
    disconnect?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
    delete?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
    connect?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
    update?: UsersPaymentsUpdateWithWhereUniqueWithoutUserInput | UsersPaymentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsersPaymentsUpdateManyWithWhereWithoutUserInput | UsersPaymentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsersPaymentsScalarWhereInput | UsersPaymentsScalarWhereInput[]
  }

  export type OrderDetailsUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderDetailsCreateWithoutUserInput, OrderDetailsUncheckedCreateWithoutUserInput> | OrderDetailsCreateWithoutUserInput[] | OrderDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutUserInput | OrderDetailsCreateOrConnectWithoutUserInput[]
    upsert?: OrderDetailsUpsertWithWhereUniqueWithoutUserInput | OrderDetailsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderDetailsCreateManyUserInputEnvelope
    set?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    disconnect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    delete?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    connect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    update?: OrderDetailsUpdateWithWhereUniqueWithoutUserInput | OrderDetailsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderDetailsUpdateManyWithWhereWithoutUserInput | OrderDetailsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderDetailsScalarWhereInput | OrderDetailsScalarWhereInput[]
  }

  export type UsersEventsUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsersEventsCreateWithoutUserInput, UsersEventsUncheckedCreateWithoutUserInput> | UsersEventsCreateWithoutUserInput[] | UsersEventsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersEventsCreateOrConnectWithoutUserInput | UsersEventsCreateOrConnectWithoutUserInput[]
    upsert?: UsersEventsUpsertWithWhereUniqueWithoutUserInput | UsersEventsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsersEventsCreateManyUserInputEnvelope
    set?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    disconnect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    delete?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    connect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    update?: UsersEventsUpdateWithWhereUniqueWithoutUserInput | UsersEventsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsersEventsUpdateManyWithWhereWithoutUserInput | UsersEventsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsersEventsScalarWhereInput | UsersEventsScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersPaymentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsersPaymentsCreateWithoutUserInput, UsersPaymentsUncheckedCreateWithoutUserInput> | UsersPaymentsCreateWithoutUserInput[] | UsersPaymentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersPaymentsCreateOrConnectWithoutUserInput | UsersPaymentsCreateOrConnectWithoutUserInput[]
    upsert?: UsersPaymentsUpsertWithWhereUniqueWithoutUserInput | UsersPaymentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsersPaymentsCreateManyUserInputEnvelope
    set?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
    disconnect?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
    delete?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
    connect?: UsersPaymentsWhereUniqueInput | UsersPaymentsWhereUniqueInput[]
    update?: UsersPaymentsUpdateWithWhereUniqueWithoutUserInput | UsersPaymentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsersPaymentsUpdateManyWithWhereWithoutUserInput | UsersPaymentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsersPaymentsScalarWhereInput | UsersPaymentsScalarWhereInput[]
  }

  export type OrderDetailsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderDetailsCreateWithoutUserInput, OrderDetailsUncheckedCreateWithoutUserInput> | OrderDetailsCreateWithoutUserInput[] | OrderDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutUserInput | OrderDetailsCreateOrConnectWithoutUserInput[]
    upsert?: OrderDetailsUpsertWithWhereUniqueWithoutUserInput | OrderDetailsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderDetailsCreateManyUserInputEnvelope
    set?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    disconnect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    delete?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    connect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    update?: OrderDetailsUpdateWithWhereUniqueWithoutUserInput | OrderDetailsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderDetailsUpdateManyWithWhereWithoutUserInput | OrderDetailsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderDetailsScalarWhereInput | OrderDetailsScalarWhereInput[]
  }

  export type UsersEventsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsersEventsCreateWithoutUserInput, UsersEventsUncheckedCreateWithoutUserInput> | UsersEventsCreateWithoutUserInput[] | UsersEventsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsersEventsCreateOrConnectWithoutUserInput | UsersEventsCreateOrConnectWithoutUserInput[]
    upsert?: UsersEventsUpsertWithWhereUniqueWithoutUserInput | UsersEventsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsersEventsCreateManyUserInputEnvelope
    set?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    disconnect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    delete?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    connect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    update?: UsersEventsUpdateWithWhereUniqueWithoutUserInput | UsersEventsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsersEventsUpdateManyWithWhereWithoutUserInput | UsersEventsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsersEventsScalarWhereInput | UsersEventsScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<UsersCreateWithoutPaymentsInput, UsersUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPaymentsInput
    connect?: UsersWhereUniqueInput
  }

  export type PaymentDetailsCreateNestedManyWithoutUsersPaymentsInput = {
    create?: XOR<PaymentDetailsCreateWithoutUsersPaymentsInput, PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput> | PaymentDetailsCreateWithoutUsersPaymentsInput[] | PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput[]
    connectOrCreate?: PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput | PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput[]
    createMany?: PaymentDetailsCreateManyUsersPaymentsInputEnvelope
    connect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
  }

  export type PaymentDetailsUncheckedCreateNestedManyWithoutUsersPaymentsInput = {
    create?: XOR<PaymentDetailsCreateWithoutUsersPaymentsInput, PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput> | PaymentDetailsCreateWithoutUsersPaymentsInput[] | PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput[]
    connectOrCreate?: PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput | PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput[]
    createMany?: PaymentDetailsCreateManyUsersPaymentsInputEnvelope
    connect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
  }

  export type UsersUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<UsersCreateWithoutPaymentsInput, UsersUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPaymentsInput
    upsert?: UsersUpsertWithoutPaymentsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutPaymentsInput, UsersUpdateWithoutPaymentsInput>, UsersUncheckedUpdateWithoutPaymentsInput>
  }

  export type PaymentDetailsUpdateManyWithoutUsersPaymentsNestedInput = {
    create?: XOR<PaymentDetailsCreateWithoutUsersPaymentsInput, PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput> | PaymentDetailsCreateWithoutUsersPaymentsInput[] | PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput[]
    connectOrCreate?: PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput | PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput[]
    upsert?: PaymentDetailsUpsertWithWhereUniqueWithoutUsersPaymentsInput | PaymentDetailsUpsertWithWhereUniqueWithoutUsersPaymentsInput[]
    createMany?: PaymentDetailsCreateManyUsersPaymentsInputEnvelope
    set?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    disconnect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    delete?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    connect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    update?: PaymentDetailsUpdateWithWhereUniqueWithoutUsersPaymentsInput | PaymentDetailsUpdateWithWhereUniqueWithoutUsersPaymentsInput[]
    updateMany?: PaymentDetailsUpdateManyWithWhereWithoutUsersPaymentsInput | PaymentDetailsUpdateManyWithWhereWithoutUsersPaymentsInput[]
    deleteMany?: PaymentDetailsScalarWhereInput | PaymentDetailsScalarWhereInput[]
  }

  export type PaymentDetailsUncheckedUpdateManyWithoutUsersPaymentsNestedInput = {
    create?: XOR<PaymentDetailsCreateWithoutUsersPaymentsInput, PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput> | PaymentDetailsCreateWithoutUsersPaymentsInput[] | PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput[]
    connectOrCreate?: PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput | PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput[]
    upsert?: PaymentDetailsUpsertWithWhereUniqueWithoutUsersPaymentsInput | PaymentDetailsUpsertWithWhereUniqueWithoutUsersPaymentsInput[]
    createMany?: PaymentDetailsCreateManyUsersPaymentsInputEnvelope
    set?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    disconnect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    delete?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    connect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    update?: PaymentDetailsUpdateWithWhereUniqueWithoutUsersPaymentsInput | PaymentDetailsUpdateWithWhereUniqueWithoutUsersPaymentsInput[]
    updateMany?: PaymentDetailsUpdateManyWithWhereWithoutUsersPaymentsInput | PaymentDetailsUpdateManyWithWhereWithoutUsersPaymentsInput[]
    deleteMany?: PaymentDetailsScalarWhereInput | PaymentDetailsScalarWhereInput[]
  }

  export type EventsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<EventsCreateWithoutCategoryInput, EventsUncheckedCreateWithoutCategoryInput> | EventsCreateWithoutCategoryInput[] | EventsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: EventsCreateOrConnectWithoutCategoryInput | EventsCreateOrConnectWithoutCategoryInput[]
    createMany?: EventsCreateManyCategoryInputEnvelope
    connect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
  }

  export type EventsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<EventsCreateWithoutCategoryInput, EventsUncheckedCreateWithoutCategoryInput> | EventsCreateWithoutCategoryInput[] | EventsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: EventsCreateOrConnectWithoutCategoryInput | EventsCreateOrConnectWithoutCategoryInput[]
    createMany?: EventsCreateManyCategoryInputEnvelope
    connect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
  }

  export type EventsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<EventsCreateWithoutCategoryInput, EventsUncheckedCreateWithoutCategoryInput> | EventsCreateWithoutCategoryInput[] | EventsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: EventsCreateOrConnectWithoutCategoryInput | EventsCreateOrConnectWithoutCategoryInput[]
    upsert?: EventsUpsertWithWhereUniqueWithoutCategoryInput | EventsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: EventsCreateManyCategoryInputEnvelope
    set?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    disconnect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    delete?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    connect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    update?: EventsUpdateWithWhereUniqueWithoutCategoryInput | EventsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: EventsUpdateManyWithWhereWithoutCategoryInput | EventsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: EventsScalarWhereInput | EventsScalarWhereInput[]
  }

  export type EventsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<EventsCreateWithoutCategoryInput, EventsUncheckedCreateWithoutCategoryInput> | EventsCreateWithoutCategoryInput[] | EventsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: EventsCreateOrConnectWithoutCategoryInput | EventsCreateOrConnectWithoutCategoryInput[]
    upsert?: EventsUpsertWithWhereUniqueWithoutCategoryInput | EventsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: EventsCreateManyCategoryInputEnvelope
    set?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    disconnect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    delete?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    connect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    update?: EventsUpdateWithWhereUniqueWithoutCategoryInput | EventsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: EventsUpdateManyWithWhereWithoutCategoryInput | EventsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: EventsScalarWhereInput | EventsScalarWhereInput[]
  }

  export type EventsCategoryCreateNestedOneWithoutEventsInput = {
    create?: XOR<EventsCategoryCreateWithoutEventsInput, EventsCategoryUncheckedCreateWithoutEventsInput>
    connectOrCreate?: EventsCategoryCreateOrConnectWithoutEventsInput
    connect?: EventsCategoryWhereUniqueInput
  }

  export type TicketsInfoCreateNestedManyWithoutEventInput = {
    create?: XOR<TicketsInfoCreateWithoutEventInput, TicketsInfoUncheckedCreateWithoutEventInput> | TicketsInfoCreateWithoutEventInput[] | TicketsInfoUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutEventInput | TicketsInfoCreateOrConnectWithoutEventInput[]
    createMany?: TicketsInfoCreateManyEventInputEnvelope
    connect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
  }

  export type UsersEventsCreateNestedManyWithoutEventInput = {
    create?: XOR<UsersEventsCreateWithoutEventInput, UsersEventsUncheckedCreateWithoutEventInput> | UsersEventsCreateWithoutEventInput[] | UsersEventsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UsersEventsCreateOrConnectWithoutEventInput | UsersEventsCreateOrConnectWithoutEventInput[]
    createMany?: UsersEventsCreateManyEventInputEnvelope
    connect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
  }

  export type TicketsInfoUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<TicketsInfoCreateWithoutEventInput, TicketsInfoUncheckedCreateWithoutEventInput> | TicketsInfoCreateWithoutEventInput[] | TicketsInfoUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutEventInput | TicketsInfoCreateOrConnectWithoutEventInput[]
    createMany?: TicketsInfoCreateManyEventInputEnvelope
    connect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
  }

  export type UsersEventsUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<UsersEventsCreateWithoutEventInput, UsersEventsUncheckedCreateWithoutEventInput> | UsersEventsCreateWithoutEventInput[] | UsersEventsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UsersEventsCreateOrConnectWithoutEventInput | UsersEventsCreateOrConnectWithoutEventInput[]
    createMany?: UsersEventsCreateManyEventInputEnvelope
    connect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
  }

  export type EnumStatusEventsFieldUpdateOperationsInput = {
    set?: $Enums.StatusEvents
  }

  export type EventsCategoryUpdateOneWithoutEventsNestedInput = {
    create?: XOR<EventsCategoryCreateWithoutEventsInput, EventsCategoryUncheckedCreateWithoutEventsInput>
    connectOrCreate?: EventsCategoryCreateOrConnectWithoutEventsInput
    upsert?: EventsCategoryUpsertWithoutEventsInput
    disconnect?: EventsCategoryWhereInput | boolean
    delete?: EventsCategoryWhereInput | boolean
    connect?: EventsCategoryWhereUniqueInput
    update?: XOR<XOR<EventsCategoryUpdateToOneWithWhereWithoutEventsInput, EventsCategoryUpdateWithoutEventsInput>, EventsCategoryUncheckedUpdateWithoutEventsInput>
  }

  export type TicketsInfoUpdateManyWithoutEventNestedInput = {
    create?: XOR<TicketsInfoCreateWithoutEventInput, TicketsInfoUncheckedCreateWithoutEventInput> | TicketsInfoCreateWithoutEventInput[] | TicketsInfoUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutEventInput | TicketsInfoCreateOrConnectWithoutEventInput[]
    upsert?: TicketsInfoUpsertWithWhereUniqueWithoutEventInput | TicketsInfoUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TicketsInfoCreateManyEventInputEnvelope
    set?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    disconnect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    delete?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    connect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    update?: TicketsInfoUpdateWithWhereUniqueWithoutEventInput | TicketsInfoUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TicketsInfoUpdateManyWithWhereWithoutEventInput | TicketsInfoUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TicketsInfoScalarWhereInput | TicketsInfoScalarWhereInput[]
  }

  export type UsersEventsUpdateManyWithoutEventNestedInput = {
    create?: XOR<UsersEventsCreateWithoutEventInput, UsersEventsUncheckedCreateWithoutEventInput> | UsersEventsCreateWithoutEventInput[] | UsersEventsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UsersEventsCreateOrConnectWithoutEventInput | UsersEventsCreateOrConnectWithoutEventInput[]
    upsert?: UsersEventsUpsertWithWhereUniqueWithoutEventInput | UsersEventsUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: UsersEventsCreateManyEventInputEnvelope
    set?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    disconnect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    delete?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    connect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    update?: UsersEventsUpdateWithWhereUniqueWithoutEventInput | UsersEventsUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: UsersEventsUpdateManyWithWhereWithoutEventInput | UsersEventsUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: UsersEventsScalarWhereInput | UsersEventsScalarWhereInput[]
  }

  export type TicketsInfoUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<TicketsInfoCreateWithoutEventInput, TicketsInfoUncheckedCreateWithoutEventInput> | TicketsInfoCreateWithoutEventInput[] | TicketsInfoUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutEventInput | TicketsInfoCreateOrConnectWithoutEventInput[]
    upsert?: TicketsInfoUpsertWithWhereUniqueWithoutEventInput | TicketsInfoUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TicketsInfoCreateManyEventInputEnvelope
    set?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    disconnect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    delete?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    connect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    update?: TicketsInfoUpdateWithWhereUniqueWithoutEventInput | TicketsInfoUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TicketsInfoUpdateManyWithWhereWithoutEventInput | TicketsInfoUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TicketsInfoScalarWhereInput | TicketsInfoScalarWhereInput[]
  }

  export type UsersEventsUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<UsersEventsCreateWithoutEventInput, UsersEventsUncheckedCreateWithoutEventInput> | UsersEventsCreateWithoutEventInput[] | UsersEventsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UsersEventsCreateOrConnectWithoutEventInput | UsersEventsCreateOrConnectWithoutEventInput[]
    upsert?: UsersEventsUpsertWithWhereUniqueWithoutEventInput | UsersEventsUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: UsersEventsCreateManyEventInputEnvelope
    set?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    disconnect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    delete?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    connect?: UsersEventsWhereUniqueInput | UsersEventsWhereUniqueInput[]
    update?: UsersEventsUpdateWithWhereUniqueWithoutEventInput | UsersEventsUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: UsersEventsUpdateManyWithWhereWithoutEventInput | UsersEventsUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: UsersEventsScalarWhereInput | UsersEventsScalarWhereInput[]
  }

  export type TicketsInfoCreateNestedManyWithoutTypeInput = {
    create?: XOR<TicketsInfoCreateWithoutTypeInput, TicketsInfoUncheckedCreateWithoutTypeInput> | TicketsInfoCreateWithoutTypeInput[] | TicketsInfoUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutTypeInput | TicketsInfoCreateOrConnectWithoutTypeInput[]
    createMany?: TicketsInfoCreateManyTypeInputEnvelope
    connect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
  }

  export type TicketsInfoUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<TicketsInfoCreateWithoutTypeInput, TicketsInfoUncheckedCreateWithoutTypeInput> | TicketsInfoCreateWithoutTypeInput[] | TicketsInfoUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutTypeInput | TicketsInfoCreateOrConnectWithoutTypeInput[]
    createMany?: TicketsInfoCreateManyTypeInputEnvelope
    connect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
  }

  export type EnumStatusTicketsTypeFieldUpdateOperationsInput = {
    set?: $Enums.StatusTicketsType
  }

  export type TicketsInfoUpdateManyWithoutTypeNestedInput = {
    create?: XOR<TicketsInfoCreateWithoutTypeInput, TicketsInfoUncheckedCreateWithoutTypeInput> | TicketsInfoCreateWithoutTypeInput[] | TicketsInfoUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutTypeInput | TicketsInfoCreateOrConnectWithoutTypeInput[]
    upsert?: TicketsInfoUpsertWithWhereUniqueWithoutTypeInput | TicketsInfoUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: TicketsInfoCreateManyTypeInputEnvelope
    set?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    disconnect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    delete?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    connect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    update?: TicketsInfoUpdateWithWhereUniqueWithoutTypeInput | TicketsInfoUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: TicketsInfoUpdateManyWithWhereWithoutTypeInput | TicketsInfoUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: TicketsInfoScalarWhereInput | TicketsInfoScalarWhereInput[]
  }

  export type TicketsInfoUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<TicketsInfoCreateWithoutTypeInput, TicketsInfoUncheckedCreateWithoutTypeInput> | TicketsInfoCreateWithoutTypeInput[] | TicketsInfoUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutTypeInput | TicketsInfoCreateOrConnectWithoutTypeInput[]
    upsert?: TicketsInfoUpsertWithWhereUniqueWithoutTypeInput | TicketsInfoUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: TicketsInfoCreateManyTypeInputEnvelope
    set?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    disconnect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    delete?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    connect?: TicketsInfoWhereUniqueInput | TicketsInfoWhereUniqueInput[]
    update?: TicketsInfoUpdateWithWhereUniqueWithoutTypeInput | TicketsInfoUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: TicketsInfoUpdateManyWithWhereWithoutTypeInput | TicketsInfoUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: TicketsInfoScalarWhereInput | TicketsInfoScalarWhereInput[]
  }

  export type EventsCreateNestedOneWithoutTicketsInput = {
    create?: XOR<EventsCreateWithoutTicketsInput, EventsUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: EventsCreateOrConnectWithoutTicketsInput
    connect?: EventsWhereUniqueInput
  }

  export type TicketsTypeCreateNestedOneWithoutTicketsInput = {
    create?: XOR<TicketsTypeCreateWithoutTicketsInput, TicketsTypeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: TicketsTypeCreateOrConnectWithoutTicketsInput
    connect?: TicketsTypeWhereUniqueInput
  }

  export type OrderedTicketsCreateNestedManyWithoutTicketsInfoInput = {
    create?: XOR<OrderedTicketsCreateWithoutTicketsInfoInput, OrderedTicketsUncheckedCreateWithoutTicketsInfoInput> | OrderedTicketsCreateWithoutTicketsInfoInput[] | OrderedTicketsUncheckedCreateWithoutTicketsInfoInput[]
    connectOrCreate?: OrderedTicketsCreateOrConnectWithoutTicketsInfoInput | OrderedTicketsCreateOrConnectWithoutTicketsInfoInput[]
    createMany?: OrderedTicketsCreateManyTicketsInfoInputEnvelope
    connect?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
  }

  export type OrderedTicketsUncheckedCreateNestedManyWithoutTicketsInfoInput = {
    create?: XOR<OrderedTicketsCreateWithoutTicketsInfoInput, OrderedTicketsUncheckedCreateWithoutTicketsInfoInput> | OrderedTicketsCreateWithoutTicketsInfoInput[] | OrderedTicketsUncheckedCreateWithoutTicketsInfoInput[]
    connectOrCreate?: OrderedTicketsCreateOrConnectWithoutTicketsInfoInput | OrderedTicketsCreateOrConnectWithoutTicketsInfoInput[]
    createMany?: OrderedTicketsCreateManyTicketsInfoInputEnvelope
    connect?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumStatusTicketsInfoFieldUpdateOperationsInput = {
    set?: $Enums.StatusTicketsInfo
  }

  export type EventsUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<EventsCreateWithoutTicketsInput, EventsUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: EventsCreateOrConnectWithoutTicketsInput
    upsert?: EventsUpsertWithoutTicketsInput
    connect?: EventsWhereUniqueInput
    update?: XOR<XOR<EventsUpdateToOneWithWhereWithoutTicketsInput, EventsUpdateWithoutTicketsInput>, EventsUncheckedUpdateWithoutTicketsInput>
  }

  export type TicketsTypeUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<TicketsTypeCreateWithoutTicketsInput, TicketsTypeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: TicketsTypeCreateOrConnectWithoutTicketsInput
    upsert?: TicketsTypeUpsertWithoutTicketsInput
    disconnect?: TicketsTypeWhereInput | boolean
    delete?: TicketsTypeWhereInput | boolean
    connect?: TicketsTypeWhereUniqueInput
    update?: XOR<XOR<TicketsTypeUpdateToOneWithWhereWithoutTicketsInput, TicketsTypeUpdateWithoutTicketsInput>, TicketsTypeUncheckedUpdateWithoutTicketsInput>
  }

  export type OrderedTicketsUpdateManyWithoutTicketsInfoNestedInput = {
    create?: XOR<OrderedTicketsCreateWithoutTicketsInfoInput, OrderedTicketsUncheckedCreateWithoutTicketsInfoInput> | OrderedTicketsCreateWithoutTicketsInfoInput[] | OrderedTicketsUncheckedCreateWithoutTicketsInfoInput[]
    connectOrCreate?: OrderedTicketsCreateOrConnectWithoutTicketsInfoInput | OrderedTicketsCreateOrConnectWithoutTicketsInfoInput[]
    upsert?: OrderedTicketsUpsertWithWhereUniqueWithoutTicketsInfoInput | OrderedTicketsUpsertWithWhereUniqueWithoutTicketsInfoInput[]
    createMany?: OrderedTicketsCreateManyTicketsInfoInputEnvelope
    set?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
    disconnect?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
    delete?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
    connect?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
    update?: OrderedTicketsUpdateWithWhereUniqueWithoutTicketsInfoInput | OrderedTicketsUpdateWithWhereUniqueWithoutTicketsInfoInput[]
    updateMany?: OrderedTicketsUpdateManyWithWhereWithoutTicketsInfoInput | OrderedTicketsUpdateManyWithWhereWithoutTicketsInfoInput[]
    deleteMany?: OrderedTicketsScalarWhereInput | OrderedTicketsScalarWhereInput[]
  }

  export type OrderedTicketsUncheckedUpdateManyWithoutTicketsInfoNestedInput = {
    create?: XOR<OrderedTicketsCreateWithoutTicketsInfoInput, OrderedTicketsUncheckedCreateWithoutTicketsInfoInput> | OrderedTicketsCreateWithoutTicketsInfoInput[] | OrderedTicketsUncheckedCreateWithoutTicketsInfoInput[]
    connectOrCreate?: OrderedTicketsCreateOrConnectWithoutTicketsInfoInput | OrderedTicketsCreateOrConnectWithoutTicketsInfoInput[]
    upsert?: OrderedTicketsUpsertWithWhereUniqueWithoutTicketsInfoInput | OrderedTicketsUpsertWithWhereUniqueWithoutTicketsInfoInput[]
    createMany?: OrderedTicketsCreateManyTicketsInfoInputEnvelope
    set?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
    disconnect?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
    delete?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
    connect?: OrderedTicketsWhereUniqueInput | OrderedTicketsWhereUniqueInput[]
    update?: OrderedTicketsUpdateWithWhereUniqueWithoutTicketsInfoInput | OrderedTicketsUpdateWithWhereUniqueWithoutTicketsInfoInput[]
    updateMany?: OrderedTicketsUpdateManyWithWhereWithoutTicketsInfoInput | OrderedTicketsUpdateManyWithWhereWithoutTicketsInfoInput[]
    deleteMany?: OrderedTicketsScalarWhereInput | OrderedTicketsScalarWhereInput[]
  }

  export type TicketsInfoCreateNestedOneWithoutOrderedTicketsInput = {
    create?: XOR<TicketsInfoCreateWithoutOrderedTicketsInput, TicketsInfoUncheckedCreateWithoutOrderedTicketsInput>
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutOrderedTicketsInput
    connect?: TicketsInfoWhereUniqueInput
  }

  export type OrderDetailsCreateNestedManyWithoutOrderedTicketsInput = {
    create?: XOR<OrderDetailsCreateWithoutOrderedTicketsInput, OrderDetailsUncheckedCreateWithoutOrderedTicketsInput> | OrderDetailsCreateWithoutOrderedTicketsInput[] | OrderDetailsUncheckedCreateWithoutOrderedTicketsInput[]
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutOrderedTicketsInput | OrderDetailsCreateOrConnectWithoutOrderedTicketsInput[]
    createMany?: OrderDetailsCreateManyOrderedTicketsInputEnvelope
    connect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
  }

  export type OrderDetailsUncheckedCreateNestedManyWithoutOrderedTicketsInput = {
    create?: XOR<OrderDetailsCreateWithoutOrderedTicketsInput, OrderDetailsUncheckedCreateWithoutOrderedTicketsInput> | OrderDetailsCreateWithoutOrderedTicketsInput[] | OrderDetailsUncheckedCreateWithoutOrderedTicketsInput[]
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutOrderedTicketsInput | OrderDetailsCreateOrConnectWithoutOrderedTicketsInput[]
    createMany?: OrderDetailsCreateManyOrderedTicketsInputEnvelope
    connect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
  }

  export type TicketsInfoUpdateOneRequiredWithoutOrderedTicketsNestedInput = {
    create?: XOR<TicketsInfoCreateWithoutOrderedTicketsInput, TicketsInfoUncheckedCreateWithoutOrderedTicketsInput>
    connectOrCreate?: TicketsInfoCreateOrConnectWithoutOrderedTicketsInput
    upsert?: TicketsInfoUpsertWithoutOrderedTicketsInput
    connect?: TicketsInfoWhereUniqueInput
    update?: XOR<XOR<TicketsInfoUpdateToOneWithWhereWithoutOrderedTicketsInput, TicketsInfoUpdateWithoutOrderedTicketsInput>, TicketsInfoUncheckedUpdateWithoutOrderedTicketsInput>
  }

  export type OrderDetailsUpdateManyWithoutOrderedTicketsNestedInput = {
    create?: XOR<OrderDetailsCreateWithoutOrderedTicketsInput, OrderDetailsUncheckedCreateWithoutOrderedTicketsInput> | OrderDetailsCreateWithoutOrderedTicketsInput[] | OrderDetailsUncheckedCreateWithoutOrderedTicketsInput[]
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutOrderedTicketsInput | OrderDetailsCreateOrConnectWithoutOrderedTicketsInput[]
    upsert?: OrderDetailsUpsertWithWhereUniqueWithoutOrderedTicketsInput | OrderDetailsUpsertWithWhereUniqueWithoutOrderedTicketsInput[]
    createMany?: OrderDetailsCreateManyOrderedTicketsInputEnvelope
    set?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    disconnect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    delete?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    connect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    update?: OrderDetailsUpdateWithWhereUniqueWithoutOrderedTicketsInput | OrderDetailsUpdateWithWhereUniqueWithoutOrderedTicketsInput[]
    updateMany?: OrderDetailsUpdateManyWithWhereWithoutOrderedTicketsInput | OrderDetailsUpdateManyWithWhereWithoutOrderedTicketsInput[]
    deleteMany?: OrderDetailsScalarWhereInput | OrderDetailsScalarWhereInput[]
  }

  export type OrderDetailsUncheckedUpdateManyWithoutOrderedTicketsNestedInput = {
    create?: XOR<OrderDetailsCreateWithoutOrderedTicketsInput, OrderDetailsUncheckedCreateWithoutOrderedTicketsInput> | OrderDetailsCreateWithoutOrderedTicketsInput[] | OrderDetailsUncheckedCreateWithoutOrderedTicketsInput[]
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutOrderedTicketsInput | OrderDetailsCreateOrConnectWithoutOrderedTicketsInput[]
    upsert?: OrderDetailsUpsertWithWhereUniqueWithoutOrderedTicketsInput | OrderDetailsUpsertWithWhereUniqueWithoutOrderedTicketsInput[]
    createMany?: OrderDetailsCreateManyOrderedTicketsInputEnvelope
    set?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    disconnect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    delete?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    connect?: OrderDetailsWhereUniqueInput | OrderDetailsWhereUniqueInput[]
    update?: OrderDetailsUpdateWithWhereUniqueWithoutOrderedTicketsInput | OrderDetailsUpdateWithWhereUniqueWithoutOrderedTicketsInput[]
    updateMany?: OrderDetailsUpdateManyWithWhereWithoutOrderedTicketsInput | OrderDetailsUpdateManyWithWhereWithoutOrderedTicketsInput[]
    deleteMany?: OrderDetailsScalarWhereInput | OrderDetailsScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutOrdersInput
    connect?: UsersWhereUniqueInput
  }

  export type OrderedTicketsCreateNestedOneWithoutOrdersInput = {
    create?: XOR<OrderedTicketsCreateWithoutOrdersInput, OrderedTicketsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: OrderedTicketsCreateOrConnectWithoutOrdersInput
    connect?: OrderedTicketsWhereUniqueInput
  }

  export type PaymentDetailsCreateNestedManyWithoutOrderInput = {
    create?: XOR<PaymentDetailsCreateWithoutOrderInput, PaymentDetailsUncheckedCreateWithoutOrderInput> | PaymentDetailsCreateWithoutOrderInput[] | PaymentDetailsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentDetailsCreateOrConnectWithoutOrderInput | PaymentDetailsCreateOrConnectWithoutOrderInput[]
    createMany?: PaymentDetailsCreateManyOrderInputEnvelope
    connect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
  }

  export type PaymentDetailsUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<PaymentDetailsCreateWithoutOrderInput, PaymentDetailsUncheckedCreateWithoutOrderInput> | PaymentDetailsCreateWithoutOrderInput[] | PaymentDetailsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentDetailsCreateOrConnectWithoutOrderInput | PaymentDetailsCreateOrConnectWithoutOrderInput[]
    createMany?: PaymentDetailsCreateManyOrderInputEnvelope
    connect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
  }

  export type EnumStatusOnCartFieldUpdateOperationsInput = {
    set?: $Enums.StatusOnCart
  }

  export type EnumStatusOrderDetailsFieldUpdateOperationsInput = {
    set?: $Enums.StatusOrderDetails
  }

  export type UsersUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutOrdersInput
    upsert?: UsersUpsertWithoutOrdersInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutOrdersInput, UsersUpdateWithoutOrdersInput>, UsersUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderedTicketsUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<OrderedTicketsCreateWithoutOrdersInput, OrderedTicketsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: OrderedTicketsCreateOrConnectWithoutOrdersInput
    upsert?: OrderedTicketsUpsertWithoutOrdersInput
    connect?: OrderedTicketsWhereUniqueInput
    update?: XOR<XOR<OrderedTicketsUpdateToOneWithWhereWithoutOrdersInput, OrderedTicketsUpdateWithoutOrdersInput>, OrderedTicketsUncheckedUpdateWithoutOrdersInput>
  }

  export type PaymentDetailsUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PaymentDetailsCreateWithoutOrderInput, PaymentDetailsUncheckedCreateWithoutOrderInput> | PaymentDetailsCreateWithoutOrderInput[] | PaymentDetailsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentDetailsCreateOrConnectWithoutOrderInput | PaymentDetailsCreateOrConnectWithoutOrderInput[]
    upsert?: PaymentDetailsUpsertWithWhereUniqueWithoutOrderInput | PaymentDetailsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PaymentDetailsCreateManyOrderInputEnvelope
    set?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    disconnect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    delete?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    connect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    update?: PaymentDetailsUpdateWithWhereUniqueWithoutOrderInput | PaymentDetailsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PaymentDetailsUpdateManyWithWhereWithoutOrderInput | PaymentDetailsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PaymentDetailsScalarWhereInput | PaymentDetailsScalarWhereInput[]
  }

  export type PaymentDetailsUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PaymentDetailsCreateWithoutOrderInput, PaymentDetailsUncheckedCreateWithoutOrderInput> | PaymentDetailsCreateWithoutOrderInput[] | PaymentDetailsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentDetailsCreateOrConnectWithoutOrderInput | PaymentDetailsCreateOrConnectWithoutOrderInput[]
    upsert?: PaymentDetailsUpsertWithWhereUniqueWithoutOrderInput | PaymentDetailsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PaymentDetailsCreateManyOrderInputEnvelope
    set?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    disconnect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    delete?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    connect?: PaymentDetailsWhereUniqueInput | PaymentDetailsWhereUniqueInput[]
    update?: PaymentDetailsUpdateWithWhereUniqueWithoutOrderInput | PaymentDetailsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PaymentDetailsUpdateManyWithWhereWithoutOrderInput | PaymentDetailsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PaymentDetailsScalarWhereInput | PaymentDetailsScalarWhereInput[]
  }

  export type OrderDetailsCreateNestedOneWithoutPaymentDetailsInput = {
    create?: XOR<OrderDetailsCreateWithoutPaymentDetailsInput, OrderDetailsUncheckedCreateWithoutPaymentDetailsInput>
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutPaymentDetailsInput
    connect?: OrderDetailsWhereUniqueInput
  }

  export type UsersPaymentsCreateNestedOneWithoutPaymentDetailsInput = {
    create?: XOR<UsersPaymentsCreateWithoutPaymentDetailsInput, UsersPaymentsUncheckedCreateWithoutPaymentDetailsInput>
    connectOrCreate?: UsersPaymentsCreateOrConnectWithoutPaymentDetailsInput
    connect?: UsersPaymentsWhereUniqueInput
  }

  export type EnumStatusPaymentDetailsFieldUpdateOperationsInput = {
    set?: $Enums.StatusPaymentDetails
  }

  export type OrderDetailsUpdateOneRequiredWithoutPaymentDetailsNestedInput = {
    create?: XOR<OrderDetailsCreateWithoutPaymentDetailsInput, OrderDetailsUncheckedCreateWithoutPaymentDetailsInput>
    connectOrCreate?: OrderDetailsCreateOrConnectWithoutPaymentDetailsInput
    upsert?: OrderDetailsUpsertWithoutPaymentDetailsInput
    connect?: OrderDetailsWhereUniqueInput
    update?: XOR<XOR<OrderDetailsUpdateToOneWithWhereWithoutPaymentDetailsInput, OrderDetailsUpdateWithoutPaymentDetailsInput>, OrderDetailsUncheckedUpdateWithoutPaymentDetailsInput>
  }

  export type UsersPaymentsUpdateOneRequiredWithoutPaymentDetailsNestedInput = {
    create?: XOR<UsersPaymentsCreateWithoutPaymentDetailsInput, UsersPaymentsUncheckedCreateWithoutPaymentDetailsInput>
    connectOrCreate?: UsersPaymentsCreateOrConnectWithoutPaymentDetailsInput
    upsert?: UsersPaymentsUpsertWithoutPaymentDetailsInput
    connect?: UsersPaymentsWhereUniqueInput
    update?: XOR<XOR<UsersPaymentsUpdateToOneWithWhereWithoutPaymentDetailsInput, UsersPaymentsUpdateWithoutPaymentDetailsInput>, UsersPaymentsUncheckedUpdateWithoutPaymentDetailsInput>
  }

  export type UsersCreateNestedOneWithoutAddEventsInput = {
    create?: XOR<UsersCreateWithoutAddEventsInput, UsersUncheckedCreateWithoutAddEventsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAddEventsInput
    connect?: UsersWhereUniqueInput
  }

  export type EventsCreateNestedOneWithoutAddEventsInput = {
    create?: XOR<EventsCreateWithoutAddEventsInput, EventsUncheckedCreateWithoutAddEventsInput>
    connectOrCreate?: EventsCreateOrConnectWithoutAddEventsInput
    connect?: EventsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutAddEventsNestedInput = {
    create?: XOR<UsersCreateWithoutAddEventsInput, UsersUncheckedCreateWithoutAddEventsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAddEventsInput
    upsert?: UsersUpsertWithoutAddEventsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAddEventsInput, UsersUpdateWithoutAddEventsInput>, UsersUncheckedUpdateWithoutAddEventsInput>
  }

  export type EventsUpdateOneRequiredWithoutAddEventsNestedInput = {
    create?: XOR<EventsCreateWithoutAddEventsInput, EventsUncheckedCreateWithoutAddEventsInput>
    connectOrCreate?: EventsCreateOrConnectWithoutAddEventsInput
    upsert?: EventsUpsertWithoutAddEventsInput
    connect?: EventsWhereUniqueInput
    update?: XOR<XOR<EventsUpdateToOneWithWhereWithoutAddEventsInput, EventsUpdateWithoutAddEventsInput>, EventsUncheckedUpdateWithoutAddEventsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUsersTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UsersType | EnumUsersTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UsersType[] | ListEnumUsersTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UsersType[] | ListEnumUsersTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUsersTypeFilter<$PrismaModel> | $Enums.UsersType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUsersTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UsersType | EnumUsersTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UsersType[] | ListEnumUsersTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UsersType[] | ListEnumUsersTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUsersTypeWithAggregatesFilter<$PrismaModel> | $Enums.UsersType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUsersTypeFilter<$PrismaModel>
    _max?: NestedEnumUsersTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatusEventsFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEvents | EnumStatusEventsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEvents[] | ListEnumStatusEventsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusEvents[] | ListEnumStatusEventsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusEventsFilter<$PrismaModel> | $Enums.StatusEvents
  }

  export type NestedEnumStatusEventsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEvents | EnumStatusEventsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEvents[] | ListEnumStatusEventsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusEvents[] | ListEnumStatusEventsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusEventsWithAggregatesFilter<$PrismaModel> | $Enums.StatusEvents
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusEventsFilter<$PrismaModel>
    _max?: NestedEnumStatusEventsFilter<$PrismaModel>
  }

  export type NestedEnumStatusTicketsTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusTicketsType | EnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StatusTicketsType[] | ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusTicketsType[] | ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusTicketsTypeFilter<$PrismaModel> | $Enums.StatusTicketsType
  }

  export type NestedEnumStatusTicketsTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusTicketsType | EnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StatusTicketsType[] | ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusTicketsType[] | ListEnumStatusTicketsTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusTicketsTypeWithAggregatesFilter<$PrismaModel> | $Enums.StatusTicketsType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusTicketsTypeFilter<$PrismaModel>
    _max?: NestedEnumStatusTicketsTypeFilter<$PrismaModel>
  }

  export type NestedEnumStatusTicketsInfoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusTicketsInfo | EnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusTicketsInfo[] | ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusTicketsInfo[] | ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusTicketsInfoFilter<$PrismaModel> | $Enums.StatusTicketsInfo
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumStatusTicketsInfoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusTicketsInfo | EnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusTicketsInfo[] | ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusTicketsInfo[] | ListEnumStatusTicketsInfoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusTicketsInfoWithAggregatesFilter<$PrismaModel> | $Enums.StatusTicketsInfo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusTicketsInfoFilter<$PrismaModel>
    _max?: NestedEnumStatusTicketsInfoFilter<$PrismaModel>
  }

  export type NestedEnumStatusOnCartFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOnCart | EnumStatusOnCartFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOnCart[] | ListEnumStatusOnCartFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOnCart[] | ListEnumStatusOnCartFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOnCartFilter<$PrismaModel> | $Enums.StatusOnCart
  }

  export type NestedEnumStatusOrderDetailsFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOrderDetails | EnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOrderDetails[] | ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOrderDetails[] | ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOrderDetailsFilter<$PrismaModel> | $Enums.StatusOrderDetails
  }

  export type NestedEnumStatusOnCartWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOnCart | EnumStatusOnCartFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOnCart[] | ListEnumStatusOnCartFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOnCart[] | ListEnumStatusOnCartFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOnCartWithAggregatesFilter<$PrismaModel> | $Enums.StatusOnCart
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusOnCartFilter<$PrismaModel>
    _max?: NestedEnumStatusOnCartFilter<$PrismaModel>
  }

  export type NestedEnumStatusOrderDetailsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusOrderDetails | EnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusOrderDetails[] | ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusOrderDetails[] | ListEnumStatusOrderDetailsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusOrderDetailsWithAggregatesFilter<$PrismaModel> | $Enums.StatusOrderDetails
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusOrderDetailsFilter<$PrismaModel>
    _max?: NestedEnumStatusOrderDetailsFilter<$PrismaModel>
  }

  export type NestedEnumStatusPaymentDetailsFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusPaymentDetails | EnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusPaymentDetails[] | ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusPaymentDetails[] | ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusPaymentDetailsFilter<$PrismaModel> | $Enums.StatusPaymentDetails
  }

  export type NestedEnumStatusPaymentDetailsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusPaymentDetails | EnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    in?: $Enums.StatusPaymentDetails[] | ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusPaymentDetails[] | ListEnumStatusPaymentDetailsFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusPaymentDetailsWithAggregatesFilter<$PrismaModel> | $Enums.StatusPaymentDetails
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusPaymentDetailsFilter<$PrismaModel>
    _max?: NestedEnumStatusPaymentDetailsFilter<$PrismaModel>
  }

  export type UsersCreateWithoutAddressInput = {
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    payments?: UsersPaymentsCreateNestedManyWithoutUserInput
    orders?: OrderDetailsCreateNestedManyWithoutUserInput
    addEvents?: UsersEventsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutAddressInput = {
    id?: number
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    payments?: UsersPaymentsUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderDetailsUncheckedCreateNestedManyWithoutUserInput
    addEvents?: UsersEventsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutAddressInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput>
  }

  export type UsersCreateManyAddressInputEnvelope = {
    data: UsersCreateManyAddressInput | UsersCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithWhereUniqueWithoutAddressInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutAddressInput, UsersUncheckedUpdateWithoutAddressInput>
    create: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutAddressInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutAddressInput, UsersUncheckedUpdateWithoutAddressInput>
  }

  export type UsersUpdateManyWithWhereWithoutAddressInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutAddressInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    id?: IntFilter<"Users"> | number
    profilePic?: StringNullableFilter<"Users"> | string | null
    userName?: StringNullableFilter<"Users"> | string | null
    userPassword?: StringFilter<"Users"> | string
    usersType?: EnumUsersTypeFilter<"Users"> | $Enums.UsersType
    firstName?: StringNullableFilter<"Users"> | string | null
    lastName?: StringNullableFilter<"Users"> | string | null
    phone?: StringNullableFilter<"Users"> | string | null
    email?: StringFilter<"Users"> | string
    addressId?: IntNullableFilter<"Users"> | number | null
    created?: DateTimeFilter<"Users"> | Date | string
    modified?: DateTimeFilter<"Users"> | Date | string
    deleted?: DateTimeNullableFilter<"Users"> | Date | string | null
  }

  export type UsersAddressCreateWithoutUsersInput = {
    addressLine1?: string | null
    addressLine2?: string | null
    postalCode?: string | null
    city?: string | null
    region?: string | null
    country?: string | null
  }

  export type UsersAddressUncheckedCreateWithoutUsersInput = {
    id?: number
    addressLine1?: string | null
    addressLine2?: string | null
    postalCode?: string | null
    city?: string | null
    region?: string | null
    country?: string | null
  }

  export type UsersAddressCreateOrConnectWithoutUsersInput = {
    where: UsersAddressWhereUniqueInput
    create: XOR<UsersAddressCreateWithoutUsersInput, UsersAddressUncheckedCreateWithoutUsersInput>
  }

  export type UsersPaymentsCreateWithoutUserInput = {
    paymentType: string
    paymentProvider: string
    created?: Date | string
    modified?: Date | string
    paymentDetails?: PaymentDetailsCreateNestedManyWithoutUsersPaymentsInput
  }

  export type UsersPaymentsUncheckedCreateWithoutUserInput = {
    id?: number
    paymentType: string
    paymentProvider: string
    created?: Date | string
    modified?: Date | string
    paymentDetails?: PaymentDetailsUncheckedCreateNestedManyWithoutUsersPaymentsInput
  }

  export type UsersPaymentsCreateOrConnectWithoutUserInput = {
    where: UsersPaymentsWhereUniqueInput
    create: XOR<UsersPaymentsCreateWithoutUserInput, UsersPaymentsUncheckedCreateWithoutUserInput>
  }

  export type UsersPaymentsCreateManyUserInputEnvelope = {
    data: UsersPaymentsCreateManyUserInput | UsersPaymentsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderDetailsCreateWithoutUserInput = {
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
    orderedTickets: OrderedTicketsCreateNestedOneWithoutOrdersInput
    paymentDetails?: PaymentDetailsCreateNestedManyWithoutOrderInput
  }

  export type OrderDetailsUncheckedCreateWithoutUserInput = {
    id?: number
    orderedTicketsId: number
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
    paymentDetails?: PaymentDetailsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderDetailsCreateOrConnectWithoutUserInput = {
    where: OrderDetailsWhereUniqueInput
    create: XOR<OrderDetailsCreateWithoutUserInput, OrderDetailsUncheckedCreateWithoutUserInput>
  }

  export type OrderDetailsCreateManyUserInputEnvelope = {
    data: OrderDetailsCreateManyUserInput | OrderDetailsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UsersEventsCreateWithoutUserInput = {
    created?: Date | string
    event: EventsCreateNestedOneWithoutAddEventsInput
  }

  export type UsersEventsUncheckedCreateWithoutUserInput = {
    id?: number
    eventId: number
    created?: Date | string
  }

  export type UsersEventsCreateOrConnectWithoutUserInput = {
    where: UsersEventsWhereUniqueInput
    create: XOR<UsersEventsCreateWithoutUserInput, UsersEventsUncheckedCreateWithoutUserInput>
  }

  export type UsersEventsCreateManyUserInputEnvelope = {
    data: UsersEventsCreateManyUserInput | UsersEventsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UsersAddressUpsertWithoutUsersInput = {
    update: XOR<UsersAddressUpdateWithoutUsersInput, UsersAddressUncheckedUpdateWithoutUsersInput>
    create: XOR<UsersAddressCreateWithoutUsersInput, UsersAddressUncheckedCreateWithoutUsersInput>
    where?: UsersAddressWhereInput
  }

  export type UsersAddressUpdateToOneWithWhereWithoutUsersInput = {
    where?: UsersAddressWhereInput
    data: XOR<UsersAddressUpdateWithoutUsersInput, UsersAddressUncheckedUpdateWithoutUsersInput>
  }

  export type UsersAddressUpdateWithoutUsersInput = {
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersAddressUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersPaymentsUpsertWithWhereUniqueWithoutUserInput = {
    where: UsersPaymentsWhereUniqueInput
    update: XOR<UsersPaymentsUpdateWithoutUserInput, UsersPaymentsUncheckedUpdateWithoutUserInput>
    create: XOR<UsersPaymentsCreateWithoutUserInput, UsersPaymentsUncheckedCreateWithoutUserInput>
  }

  export type UsersPaymentsUpdateWithWhereUniqueWithoutUserInput = {
    where: UsersPaymentsWhereUniqueInput
    data: XOR<UsersPaymentsUpdateWithoutUserInput, UsersPaymentsUncheckedUpdateWithoutUserInput>
  }

  export type UsersPaymentsUpdateManyWithWhereWithoutUserInput = {
    where: UsersPaymentsScalarWhereInput
    data: XOR<UsersPaymentsUpdateManyMutationInput, UsersPaymentsUncheckedUpdateManyWithoutUserInput>
  }

  export type UsersPaymentsScalarWhereInput = {
    AND?: UsersPaymentsScalarWhereInput | UsersPaymentsScalarWhereInput[]
    OR?: UsersPaymentsScalarWhereInput[]
    NOT?: UsersPaymentsScalarWhereInput | UsersPaymentsScalarWhereInput[]
    id?: IntFilter<"UsersPayments"> | number
    usersId?: IntFilter<"UsersPayments"> | number
    paymentType?: StringFilter<"UsersPayments"> | string
    paymentProvider?: StringFilter<"UsersPayments"> | string
    created?: DateTimeFilter<"UsersPayments"> | Date | string
    modified?: DateTimeFilter<"UsersPayments"> | Date | string
  }

  export type OrderDetailsUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderDetailsWhereUniqueInput
    update: XOR<OrderDetailsUpdateWithoutUserInput, OrderDetailsUncheckedUpdateWithoutUserInput>
    create: XOR<OrderDetailsCreateWithoutUserInput, OrderDetailsUncheckedCreateWithoutUserInput>
  }

  export type OrderDetailsUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderDetailsWhereUniqueInput
    data: XOR<OrderDetailsUpdateWithoutUserInput, OrderDetailsUncheckedUpdateWithoutUserInput>
  }

  export type OrderDetailsUpdateManyWithWhereWithoutUserInput = {
    where: OrderDetailsScalarWhereInput
    data: XOR<OrderDetailsUpdateManyMutationInput, OrderDetailsUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderDetailsScalarWhereInput = {
    AND?: OrderDetailsScalarWhereInput | OrderDetailsScalarWhereInput[]
    OR?: OrderDetailsScalarWhereInput[]
    NOT?: OrderDetailsScalarWhereInput | OrderDetailsScalarWhereInput[]
    id?: IntFilter<"OrderDetails"> | number
    usersId?: IntFilter<"OrderDetails"> | number
    orderedTicketsId?: IntFilter<"OrderDetails"> | number
    orderTotal?: FloatFilter<"OrderDetails"> | number
    orderDate?: DateTimeFilter<"OrderDetails"> | Date | string
    statusCart?: EnumStatusOnCartFilter<"OrderDetails"> | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFilter<"OrderDetails"> | $Enums.StatusOrderDetails
    created?: DateTimeFilter<"OrderDetails"> | Date | string
    modified?: DateTimeFilter<"OrderDetails"> | Date | string
  }

  export type UsersEventsUpsertWithWhereUniqueWithoutUserInput = {
    where: UsersEventsWhereUniqueInput
    update: XOR<UsersEventsUpdateWithoutUserInput, UsersEventsUncheckedUpdateWithoutUserInput>
    create: XOR<UsersEventsCreateWithoutUserInput, UsersEventsUncheckedCreateWithoutUserInput>
  }

  export type UsersEventsUpdateWithWhereUniqueWithoutUserInput = {
    where: UsersEventsWhereUniqueInput
    data: XOR<UsersEventsUpdateWithoutUserInput, UsersEventsUncheckedUpdateWithoutUserInput>
  }

  export type UsersEventsUpdateManyWithWhereWithoutUserInput = {
    where: UsersEventsScalarWhereInput
    data: XOR<UsersEventsUpdateManyMutationInput, UsersEventsUncheckedUpdateManyWithoutUserInput>
  }

  export type UsersEventsScalarWhereInput = {
    AND?: UsersEventsScalarWhereInput | UsersEventsScalarWhereInput[]
    OR?: UsersEventsScalarWhereInput[]
    NOT?: UsersEventsScalarWhereInput | UsersEventsScalarWhereInput[]
    id?: IntFilter<"UsersEvents"> | number
    userId?: IntFilter<"UsersEvents"> | number
    eventId?: IntFilter<"UsersEvents"> | number
    created?: DateTimeFilter<"UsersEvents"> | Date | string
  }

  export type UsersCreateWithoutPaymentsInput = {
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    address?: UsersAddressCreateNestedOneWithoutUsersInput
    orders?: OrderDetailsCreateNestedManyWithoutUserInput
    addEvents?: UsersEventsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutPaymentsInput = {
    id?: number
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    addressId?: number | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    orders?: OrderDetailsUncheckedCreateNestedManyWithoutUserInput
    addEvents?: UsersEventsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutPaymentsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPaymentsInput, UsersUncheckedCreateWithoutPaymentsInput>
  }

  export type PaymentDetailsCreateWithoutUsersPaymentsInput = {
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
    order: OrderDetailsCreateNestedOneWithoutPaymentDetailsInput
  }

  export type PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput = {
    id?: number
    orderId: number
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsCreateOrConnectWithoutUsersPaymentsInput = {
    where: PaymentDetailsWhereUniqueInput
    create: XOR<PaymentDetailsCreateWithoutUsersPaymentsInput, PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput>
  }

  export type PaymentDetailsCreateManyUsersPaymentsInputEnvelope = {
    data: PaymentDetailsCreateManyUsersPaymentsInput | PaymentDetailsCreateManyUsersPaymentsInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutPaymentsInput = {
    update: XOR<UsersUpdateWithoutPaymentsInput, UsersUncheckedUpdateWithoutPaymentsInput>
    create: XOR<UsersCreateWithoutPaymentsInput, UsersUncheckedCreateWithoutPaymentsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutPaymentsInput, UsersUncheckedUpdateWithoutPaymentsInput>
  }

  export type UsersUpdateWithoutPaymentsInput = {
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: UsersAddressUpdateOneWithoutUsersNestedInput
    orders?: OrderDetailsUpdateManyWithoutUserNestedInput
    addEvents?: UsersEventsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: OrderDetailsUncheckedUpdateManyWithoutUserNestedInput
    addEvents?: UsersEventsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PaymentDetailsUpsertWithWhereUniqueWithoutUsersPaymentsInput = {
    where: PaymentDetailsWhereUniqueInput
    update: XOR<PaymentDetailsUpdateWithoutUsersPaymentsInput, PaymentDetailsUncheckedUpdateWithoutUsersPaymentsInput>
    create: XOR<PaymentDetailsCreateWithoutUsersPaymentsInput, PaymentDetailsUncheckedCreateWithoutUsersPaymentsInput>
  }

  export type PaymentDetailsUpdateWithWhereUniqueWithoutUsersPaymentsInput = {
    where: PaymentDetailsWhereUniqueInput
    data: XOR<PaymentDetailsUpdateWithoutUsersPaymentsInput, PaymentDetailsUncheckedUpdateWithoutUsersPaymentsInput>
  }

  export type PaymentDetailsUpdateManyWithWhereWithoutUsersPaymentsInput = {
    where: PaymentDetailsScalarWhereInput
    data: XOR<PaymentDetailsUpdateManyMutationInput, PaymentDetailsUncheckedUpdateManyWithoutUsersPaymentsInput>
  }

  export type PaymentDetailsScalarWhereInput = {
    AND?: PaymentDetailsScalarWhereInput | PaymentDetailsScalarWhereInput[]
    OR?: PaymentDetailsScalarWhereInput[]
    NOT?: PaymentDetailsScalarWhereInput | PaymentDetailsScalarWhereInput[]
    id?: IntFilter<"PaymentDetails"> | number
    orderId?: IntFilter<"PaymentDetails"> | number
    usersPaymentsId?: IntFilter<"PaymentDetails"> | number
    paymentAmount?: FloatFilter<"PaymentDetails"> | number
    paymentDate?: DateTimeFilter<"PaymentDetails"> | Date | string
    status?: EnumStatusPaymentDetailsFilter<"PaymentDetails"> | $Enums.StatusPaymentDetails
  }

  export type EventsCreateWithoutCategoryInput = {
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    tickets?: TicketsInfoCreateNestedManyWithoutEventInput
    addEvents?: UsersEventsCreateNestedManyWithoutEventInput
  }

  export type EventsUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    tickets?: TicketsInfoUncheckedCreateNestedManyWithoutEventInput
    addEvents?: UsersEventsUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventsCreateOrConnectWithoutCategoryInput = {
    where: EventsWhereUniqueInput
    create: XOR<EventsCreateWithoutCategoryInput, EventsUncheckedCreateWithoutCategoryInput>
  }

  export type EventsCreateManyCategoryInputEnvelope = {
    data: EventsCreateManyCategoryInput | EventsCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type EventsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: EventsWhereUniqueInput
    update: XOR<EventsUpdateWithoutCategoryInput, EventsUncheckedUpdateWithoutCategoryInput>
    create: XOR<EventsCreateWithoutCategoryInput, EventsUncheckedCreateWithoutCategoryInput>
  }

  export type EventsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: EventsWhereUniqueInput
    data: XOR<EventsUpdateWithoutCategoryInput, EventsUncheckedUpdateWithoutCategoryInput>
  }

  export type EventsUpdateManyWithWhereWithoutCategoryInput = {
    where: EventsScalarWhereInput
    data: XOR<EventsUpdateManyMutationInput, EventsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type EventsScalarWhereInput = {
    AND?: EventsScalarWhereInput | EventsScalarWhereInput[]
    OR?: EventsScalarWhereInput[]
    NOT?: EventsScalarWhereInput | EventsScalarWhereInput[]
    id?: IntFilter<"Events"> | number
    name?: StringFilter<"Events"> | string
    description?: StringNullableFilter<"Events"> | string | null
    cover?: StringNullableFilter<"Events"> | string | null
    startDate?: DateTimeFilter<"Events"> | Date | string
    endDate?: DateTimeFilter<"Events"> | Date | string
    capacity?: IntFilter<"Events"> | number
    addressLine1?: StringFilter<"Events"> | string
    addressLine2?: StringNullableFilter<"Events"> | string | null
    postalCode?: StringFilter<"Events"> | string
    city?: StringFilter<"Events"> | string
    region?: StringFilter<"Events"> | string
    country?: StringFilter<"Events"> | string
    categoryId?: IntNullableFilter<"Events"> | number | null
    status?: EnumStatusEventsFilter<"Events"> | $Enums.StatusEvents
    created?: DateTimeFilter<"Events"> | Date | string
    modified?: DateTimeFilter<"Events"> | Date | string
    deleted?: DateTimeNullableFilter<"Events"> | Date | string | null
  }

  export type EventsCategoryCreateWithoutEventsInput = {
    name: string
    description?: string | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type EventsCategoryUncheckedCreateWithoutEventsInput = {
    id?: number
    name: string
    description?: string | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type EventsCategoryCreateOrConnectWithoutEventsInput = {
    where: EventsCategoryWhereUniqueInput
    create: XOR<EventsCategoryCreateWithoutEventsInput, EventsCategoryUncheckedCreateWithoutEventsInput>
  }

  export type TicketsInfoCreateWithoutEventInput = {
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    type?: TicketsTypeCreateNestedOneWithoutTicketsInput
    orderedTickets?: OrderedTicketsCreateNestedManyWithoutTicketsInfoInput
  }

  export type TicketsInfoUncheckedCreateWithoutEventInput = {
    id?: number
    typeId?: number | null
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    orderedTickets?: OrderedTicketsUncheckedCreateNestedManyWithoutTicketsInfoInput
  }

  export type TicketsInfoCreateOrConnectWithoutEventInput = {
    where: TicketsInfoWhereUniqueInput
    create: XOR<TicketsInfoCreateWithoutEventInput, TicketsInfoUncheckedCreateWithoutEventInput>
  }

  export type TicketsInfoCreateManyEventInputEnvelope = {
    data: TicketsInfoCreateManyEventInput | TicketsInfoCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type UsersEventsCreateWithoutEventInput = {
    created?: Date | string
    user: UsersCreateNestedOneWithoutAddEventsInput
  }

  export type UsersEventsUncheckedCreateWithoutEventInput = {
    id?: number
    userId: number
    created?: Date | string
  }

  export type UsersEventsCreateOrConnectWithoutEventInput = {
    where: UsersEventsWhereUniqueInput
    create: XOR<UsersEventsCreateWithoutEventInput, UsersEventsUncheckedCreateWithoutEventInput>
  }

  export type UsersEventsCreateManyEventInputEnvelope = {
    data: UsersEventsCreateManyEventInput | UsersEventsCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventsCategoryUpsertWithoutEventsInput = {
    update: XOR<EventsCategoryUpdateWithoutEventsInput, EventsCategoryUncheckedUpdateWithoutEventsInput>
    create: XOR<EventsCategoryCreateWithoutEventsInput, EventsCategoryUncheckedCreateWithoutEventsInput>
    where?: EventsCategoryWhereInput
  }

  export type EventsCategoryUpdateToOneWithWhereWithoutEventsInput = {
    where?: EventsCategoryWhereInput
    data: XOR<EventsCategoryUpdateWithoutEventsInput, EventsCategoryUncheckedUpdateWithoutEventsInput>
  }

  export type EventsCategoryUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventsCategoryUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketsInfoUpsertWithWhereUniqueWithoutEventInput = {
    where: TicketsInfoWhereUniqueInput
    update: XOR<TicketsInfoUpdateWithoutEventInput, TicketsInfoUncheckedUpdateWithoutEventInput>
    create: XOR<TicketsInfoCreateWithoutEventInput, TicketsInfoUncheckedCreateWithoutEventInput>
  }

  export type TicketsInfoUpdateWithWhereUniqueWithoutEventInput = {
    where: TicketsInfoWhereUniqueInput
    data: XOR<TicketsInfoUpdateWithoutEventInput, TicketsInfoUncheckedUpdateWithoutEventInput>
  }

  export type TicketsInfoUpdateManyWithWhereWithoutEventInput = {
    where: TicketsInfoScalarWhereInput
    data: XOR<TicketsInfoUpdateManyMutationInput, TicketsInfoUncheckedUpdateManyWithoutEventInput>
  }

  export type TicketsInfoScalarWhereInput = {
    AND?: TicketsInfoScalarWhereInput | TicketsInfoScalarWhereInput[]
    OR?: TicketsInfoScalarWhereInput[]
    NOT?: TicketsInfoScalarWhereInput | TicketsInfoScalarWhereInput[]
    id?: IntFilter<"TicketsInfo"> | number
    eventsId?: IntFilter<"TicketsInfo"> | number
    typeId?: IntNullableFilter<"TicketsInfo"> | number | null
    SKU?: StringFilter<"TicketsInfo"> | string
    price?: FloatFilter<"TicketsInfo"> | number
    quantity?: IntFilter<"TicketsInfo"> | number
    status?: EnumStatusTicketsInfoFilter<"TicketsInfo"> | $Enums.StatusTicketsInfo
    created?: DateTimeFilter<"TicketsInfo"> | Date | string
    modified?: DateTimeFilter<"TicketsInfo"> | Date | string
    deleted?: DateTimeNullableFilter<"TicketsInfo"> | Date | string | null
  }

  export type UsersEventsUpsertWithWhereUniqueWithoutEventInput = {
    where: UsersEventsWhereUniqueInput
    update: XOR<UsersEventsUpdateWithoutEventInput, UsersEventsUncheckedUpdateWithoutEventInput>
    create: XOR<UsersEventsCreateWithoutEventInput, UsersEventsUncheckedCreateWithoutEventInput>
  }

  export type UsersEventsUpdateWithWhereUniqueWithoutEventInput = {
    where: UsersEventsWhereUniqueInput
    data: XOR<UsersEventsUpdateWithoutEventInput, UsersEventsUncheckedUpdateWithoutEventInput>
  }

  export type UsersEventsUpdateManyWithWhereWithoutEventInput = {
    where: UsersEventsScalarWhereInput
    data: XOR<UsersEventsUpdateManyMutationInput, UsersEventsUncheckedUpdateManyWithoutEventInput>
  }

  export type TicketsInfoCreateWithoutTypeInput = {
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    event: EventsCreateNestedOneWithoutTicketsInput
    orderedTickets?: OrderedTicketsCreateNestedManyWithoutTicketsInfoInput
  }

  export type TicketsInfoUncheckedCreateWithoutTypeInput = {
    id?: number
    eventsId: number
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    orderedTickets?: OrderedTicketsUncheckedCreateNestedManyWithoutTicketsInfoInput
  }

  export type TicketsInfoCreateOrConnectWithoutTypeInput = {
    where: TicketsInfoWhereUniqueInput
    create: XOR<TicketsInfoCreateWithoutTypeInput, TicketsInfoUncheckedCreateWithoutTypeInput>
  }

  export type TicketsInfoCreateManyTypeInputEnvelope = {
    data: TicketsInfoCreateManyTypeInput | TicketsInfoCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type TicketsInfoUpsertWithWhereUniqueWithoutTypeInput = {
    where: TicketsInfoWhereUniqueInput
    update: XOR<TicketsInfoUpdateWithoutTypeInput, TicketsInfoUncheckedUpdateWithoutTypeInput>
    create: XOR<TicketsInfoCreateWithoutTypeInput, TicketsInfoUncheckedCreateWithoutTypeInput>
  }

  export type TicketsInfoUpdateWithWhereUniqueWithoutTypeInput = {
    where: TicketsInfoWhereUniqueInput
    data: XOR<TicketsInfoUpdateWithoutTypeInput, TicketsInfoUncheckedUpdateWithoutTypeInput>
  }

  export type TicketsInfoUpdateManyWithWhereWithoutTypeInput = {
    where: TicketsInfoScalarWhereInput
    data: XOR<TicketsInfoUpdateManyMutationInput, TicketsInfoUncheckedUpdateManyWithoutTypeInput>
  }

  export type EventsCreateWithoutTicketsInput = {
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    category?: EventsCategoryCreateNestedOneWithoutEventsInput
    addEvents?: UsersEventsCreateNestedManyWithoutEventInput
  }

  export type EventsUncheckedCreateWithoutTicketsInput = {
    id?: number
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    categoryId?: number | null
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    addEvents?: UsersEventsUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventsCreateOrConnectWithoutTicketsInput = {
    where: EventsWhereUniqueInput
    create: XOR<EventsCreateWithoutTicketsInput, EventsUncheckedCreateWithoutTicketsInput>
  }

  export type TicketsTypeCreateWithoutTicketsInput = {
    name: string
    description?: string | null
    status?: $Enums.StatusTicketsType
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type TicketsTypeUncheckedCreateWithoutTicketsInput = {
    id?: number
    name: string
    description?: string | null
    status?: $Enums.StatusTicketsType
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type TicketsTypeCreateOrConnectWithoutTicketsInput = {
    where: TicketsTypeWhereUniqueInput
    create: XOR<TicketsTypeCreateWithoutTicketsInput, TicketsTypeUncheckedCreateWithoutTicketsInput>
  }

  export type OrderedTicketsCreateWithoutTicketsInfoInput = {
    quantity: number
    created?: Date | string
    modified?: Date | string
    orders?: OrderDetailsCreateNestedManyWithoutOrderedTicketsInput
  }

  export type OrderedTicketsUncheckedCreateWithoutTicketsInfoInput = {
    id?: number
    quantity: number
    created?: Date | string
    modified?: Date | string
    orders?: OrderDetailsUncheckedCreateNestedManyWithoutOrderedTicketsInput
  }

  export type OrderedTicketsCreateOrConnectWithoutTicketsInfoInput = {
    where: OrderedTicketsWhereUniqueInput
    create: XOR<OrderedTicketsCreateWithoutTicketsInfoInput, OrderedTicketsUncheckedCreateWithoutTicketsInfoInput>
  }

  export type OrderedTicketsCreateManyTicketsInfoInputEnvelope = {
    data: OrderedTicketsCreateManyTicketsInfoInput | OrderedTicketsCreateManyTicketsInfoInput[]
    skipDuplicates?: boolean
  }

  export type EventsUpsertWithoutTicketsInput = {
    update: XOR<EventsUpdateWithoutTicketsInput, EventsUncheckedUpdateWithoutTicketsInput>
    create: XOR<EventsCreateWithoutTicketsInput, EventsUncheckedCreateWithoutTicketsInput>
    where?: EventsWhereInput
  }

  export type EventsUpdateToOneWithWhereWithoutTicketsInput = {
    where?: EventsWhereInput
    data: XOR<EventsUpdateWithoutTicketsInput, EventsUncheckedUpdateWithoutTicketsInput>
  }

  export type EventsUpdateWithoutTicketsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EventsCategoryUpdateOneWithoutEventsNestedInput
    addEvents?: UsersEventsUpdateManyWithoutEventNestedInput
  }

  export type EventsUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addEvents?: UsersEventsUncheckedUpdateManyWithoutEventNestedInput
  }

  export type TicketsTypeUpsertWithoutTicketsInput = {
    update: XOR<TicketsTypeUpdateWithoutTicketsInput, TicketsTypeUncheckedUpdateWithoutTicketsInput>
    create: XOR<TicketsTypeCreateWithoutTicketsInput, TicketsTypeUncheckedCreateWithoutTicketsInput>
    where?: TicketsTypeWhereInput
  }

  export type TicketsTypeUpdateToOneWithWhereWithoutTicketsInput = {
    where?: TicketsTypeWhereInput
    data: XOR<TicketsTypeUpdateWithoutTicketsInput, TicketsTypeUncheckedUpdateWithoutTicketsInput>
  }

  export type TicketsTypeUpdateWithoutTicketsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusTicketsTypeFieldUpdateOperationsInput | $Enums.StatusTicketsType
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketsTypeUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusTicketsTypeFieldUpdateOperationsInput | $Enums.StatusTicketsType
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderedTicketsUpsertWithWhereUniqueWithoutTicketsInfoInput = {
    where: OrderedTicketsWhereUniqueInput
    update: XOR<OrderedTicketsUpdateWithoutTicketsInfoInput, OrderedTicketsUncheckedUpdateWithoutTicketsInfoInput>
    create: XOR<OrderedTicketsCreateWithoutTicketsInfoInput, OrderedTicketsUncheckedCreateWithoutTicketsInfoInput>
  }

  export type OrderedTicketsUpdateWithWhereUniqueWithoutTicketsInfoInput = {
    where: OrderedTicketsWhereUniqueInput
    data: XOR<OrderedTicketsUpdateWithoutTicketsInfoInput, OrderedTicketsUncheckedUpdateWithoutTicketsInfoInput>
  }

  export type OrderedTicketsUpdateManyWithWhereWithoutTicketsInfoInput = {
    where: OrderedTicketsScalarWhereInput
    data: XOR<OrderedTicketsUpdateManyMutationInput, OrderedTicketsUncheckedUpdateManyWithoutTicketsInfoInput>
  }

  export type OrderedTicketsScalarWhereInput = {
    AND?: OrderedTicketsScalarWhereInput | OrderedTicketsScalarWhereInput[]
    OR?: OrderedTicketsScalarWhereInput[]
    NOT?: OrderedTicketsScalarWhereInput | OrderedTicketsScalarWhereInput[]
    id?: IntFilter<"OrderedTickets"> | number
    ticketsInfoId?: IntFilter<"OrderedTickets"> | number
    quantity?: IntFilter<"OrderedTickets"> | number
    created?: DateTimeFilter<"OrderedTickets"> | Date | string
    modified?: DateTimeFilter<"OrderedTickets"> | Date | string
  }

  export type TicketsInfoCreateWithoutOrderedTicketsInput = {
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    event: EventsCreateNestedOneWithoutTicketsInput
    type?: TicketsTypeCreateNestedOneWithoutTicketsInput
  }

  export type TicketsInfoUncheckedCreateWithoutOrderedTicketsInput = {
    id?: number
    eventsId: number
    typeId?: number | null
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type TicketsInfoCreateOrConnectWithoutOrderedTicketsInput = {
    where: TicketsInfoWhereUniqueInput
    create: XOR<TicketsInfoCreateWithoutOrderedTicketsInput, TicketsInfoUncheckedCreateWithoutOrderedTicketsInput>
  }

  export type OrderDetailsCreateWithoutOrderedTicketsInput = {
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
    user: UsersCreateNestedOneWithoutOrdersInput
    paymentDetails?: PaymentDetailsCreateNestedManyWithoutOrderInput
  }

  export type OrderDetailsUncheckedCreateWithoutOrderedTicketsInput = {
    id?: number
    usersId: number
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
    paymentDetails?: PaymentDetailsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderDetailsCreateOrConnectWithoutOrderedTicketsInput = {
    where: OrderDetailsWhereUniqueInput
    create: XOR<OrderDetailsCreateWithoutOrderedTicketsInput, OrderDetailsUncheckedCreateWithoutOrderedTicketsInput>
  }

  export type OrderDetailsCreateManyOrderedTicketsInputEnvelope = {
    data: OrderDetailsCreateManyOrderedTicketsInput | OrderDetailsCreateManyOrderedTicketsInput[]
    skipDuplicates?: boolean
  }

  export type TicketsInfoUpsertWithoutOrderedTicketsInput = {
    update: XOR<TicketsInfoUpdateWithoutOrderedTicketsInput, TicketsInfoUncheckedUpdateWithoutOrderedTicketsInput>
    create: XOR<TicketsInfoCreateWithoutOrderedTicketsInput, TicketsInfoUncheckedCreateWithoutOrderedTicketsInput>
    where?: TicketsInfoWhereInput
  }

  export type TicketsInfoUpdateToOneWithWhereWithoutOrderedTicketsInput = {
    where?: TicketsInfoWhereInput
    data: XOR<TicketsInfoUpdateWithoutOrderedTicketsInput, TicketsInfoUncheckedUpdateWithoutOrderedTicketsInput>
  }

  export type TicketsInfoUpdateWithoutOrderedTicketsInput = {
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event?: EventsUpdateOneRequiredWithoutTicketsNestedInput
    type?: TicketsTypeUpdateOneWithoutTicketsNestedInput
  }

  export type TicketsInfoUncheckedUpdateWithoutOrderedTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventsId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderDetailsUpsertWithWhereUniqueWithoutOrderedTicketsInput = {
    where: OrderDetailsWhereUniqueInput
    update: XOR<OrderDetailsUpdateWithoutOrderedTicketsInput, OrderDetailsUncheckedUpdateWithoutOrderedTicketsInput>
    create: XOR<OrderDetailsCreateWithoutOrderedTicketsInput, OrderDetailsUncheckedCreateWithoutOrderedTicketsInput>
  }

  export type OrderDetailsUpdateWithWhereUniqueWithoutOrderedTicketsInput = {
    where: OrderDetailsWhereUniqueInput
    data: XOR<OrderDetailsUpdateWithoutOrderedTicketsInput, OrderDetailsUncheckedUpdateWithoutOrderedTicketsInput>
  }

  export type OrderDetailsUpdateManyWithWhereWithoutOrderedTicketsInput = {
    where: OrderDetailsScalarWhereInput
    data: XOR<OrderDetailsUpdateManyMutationInput, OrderDetailsUncheckedUpdateManyWithoutOrderedTicketsInput>
  }

  export type UsersCreateWithoutOrdersInput = {
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    address?: UsersAddressCreateNestedOneWithoutUsersInput
    payments?: UsersPaymentsCreateNestedManyWithoutUserInput
    addEvents?: UsersEventsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutOrdersInput = {
    id?: number
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    addressId?: number | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    payments?: UsersPaymentsUncheckedCreateNestedManyWithoutUserInput
    addEvents?: UsersEventsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutOrdersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
  }

  export type OrderedTicketsCreateWithoutOrdersInput = {
    quantity: number
    created?: Date | string
    modified?: Date | string
    ticketsInfo: TicketsInfoCreateNestedOneWithoutOrderedTicketsInput
  }

  export type OrderedTicketsUncheckedCreateWithoutOrdersInput = {
    id?: number
    ticketsInfoId: number
    quantity: number
    created?: Date | string
    modified?: Date | string
  }

  export type OrderedTicketsCreateOrConnectWithoutOrdersInput = {
    where: OrderedTicketsWhereUniqueInput
    create: XOR<OrderedTicketsCreateWithoutOrdersInput, OrderedTicketsUncheckedCreateWithoutOrdersInput>
  }

  export type PaymentDetailsCreateWithoutOrderInput = {
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
    usersPayments: UsersPaymentsCreateNestedOneWithoutPaymentDetailsInput
  }

  export type PaymentDetailsUncheckedCreateWithoutOrderInput = {
    id?: number
    usersPaymentsId: number
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsCreateOrConnectWithoutOrderInput = {
    where: PaymentDetailsWhereUniqueInput
    create: XOR<PaymentDetailsCreateWithoutOrderInput, PaymentDetailsUncheckedCreateWithoutOrderInput>
  }

  export type PaymentDetailsCreateManyOrderInputEnvelope = {
    data: PaymentDetailsCreateManyOrderInput | PaymentDetailsCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutOrdersInput = {
    update: XOR<UsersUpdateWithoutOrdersInput, UsersUncheckedUpdateWithoutOrdersInput>
    create: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutOrdersInput, UsersUncheckedUpdateWithoutOrdersInput>
  }

  export type UsersUpdateWithoutOrdersInput = {
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: UsersAddressUpdateOneWithoutUsersNestedInput
    payments?: UsersPaymentsUpdateManyWithoutUserNestedInput
    addEvents?: UsersEventsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: UsersPaymentsUncheckedUpdateManyWithoutUserNestedInput
    addEvents?: UsersEventsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderedTicketsUpsertWithoutOrdersInput = {
    update: XOR<OrderedTicketsUpdateWithoutOrdersInput, OrderedTicketsUncheckedUpdateWithoutOrdersInput>
    create: XOR<OrderedTicketsCreateWithoutOrdersInput, OrderedTicketsUncheckedCreateWithoutOrdersInput>
    where?: OrderedTicketsWhereInput
  }

  export type OrderedTicketsUpdateToOneWithWhereWithoutOrdersInput = {
    where?: OrderedTicketsWhereInput
    data: XOR<OrderedTicketsUpdateWithoutOrdersInput, OrderedTicketsUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderedTicketsUpdateWithoutOrdersInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketsInfo?: TicketsInfoUpdateOneRequiredWithoutOrderedTicketsNestedInput
  }

  export type OrderedTicketsUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticketsInfoId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentDetailsUpsertWithWhereUniqueWithoutOrderInput = {
    where: PaymentDetailsWhereUniqueInput
    update: XOR<PaymentDetailsUpdateWithoutOrderInput, PaymentDetailsUncheckedUpdateWithoutOrderInput>
    create: XOR<PaymentDetailsCreateWithoutOrderInput, PaymentDetailsUncheckedCreateWithoutOrderInput>
  }

  export type PaymentDetailsUpdateWithWhereUniqueWithoutOrderInput = {
    where: PaymentDetailsWhereUniqueInput
    data: XOR<PaymentDetailsUpdateWithoutOrderInput, PaymentDetailsUncheckedUpdateWithoutOrderInput>
  }

  export type PaymentDetailsUpdateManyWithWhereWithoutOrderInput = {
    where: PaymentDetailsScalarWhereInput
    data: XOR<PaymentDetailsUpdateManyMutationInput, PaymentDetailsUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderDetailsCreateWithoutPaymentDetailsInput = {
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
    user: UsersCreateNestedOneWithoutOrdersInput
    orderedTickets: OrderedTicketsCreateNestedOneWithoutOrdersInput
  }

  export type OrderDetailsUncheckedCreateWithoutPaymentDetailsInput = {
    id?: number
    usersId: number
    orderedTicketsId: number
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
  }

  export type OrderDetailsCreateOrConnectWithoutPaymentDetailsInput = {
    where: OrderDetailsWhereUniqueInput
    create: XOR<OrderDetailsCreateWithoutPaymentDetailsInput, OrderDetailsUncheckedCreateWithoutPaymentDetailsInput>
  }

  export type UsersPaymentsCreateWithoutPaymentDetailsInput = {
    paymentType: string
    paymentProvider: string
    created?: Date | string
    modified?: Date | string
    user: UsersCreateNestedOneWithoutPaymentsInput
  }

  export type UsersPaymentsUncheckedCreateWithoutPaymentDetailsInput = {
    id?: number
    usersId: number
    paymentType: string
    paymentProvider: string
    created?: Date | string
    modified?: Date | string
  }

  export type UsersPaymentsCreateOrConnectWithoutPaymentDetailsInput = {
    where: UsersPaymentsWhereUniqueInput
    create: XOR<UsersPaymentsCreateWithoutPaymentDetailsInput, UsersPaymentsUncheckedCreateWithoutPaymentDetailsInput>
  }

  export type OrderDetailsUpsertWithoutPaymentDetailsInput = {
    update: XOR<OrderDetailsUpdateWithoutPaymentDetailsInput, OrderDetailsUncheckedUpdateWithoutPaymentDetailsInput>
    create: XOR<OrderDetailsCreateWithoutPaymentDetailsInput, OrderDetailsUncheckedCreateWithoutPaymentDetailsInput>
    where?: OrderDetailsWhereInput
  }

  export type OrderDetailsUpdateToOneWithWhereWithoutPaymentDetailsInput = {
    where?: OrderDetailsWhereInput
    data: XOR<OrderDetailsUpdateWithoutPaymentDetailsInput, OrderDetailsUncheckedUpdateWithoutPaymentDetailsInput>
  }

  export type OrderDetailsUpdateWithoutPaymentDetailsInput = {
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutOrdersNestedInput
    orderedTickets?: OrderedTicketsUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderDetailsUncheckedUpdateWithoutPaymentDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    orderedTicketsId?: IntFieldUpdateOperationsInput | number
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersPaymentsUpsertWithoutPaymentDetailsInput = {
    update: XOR<UsersPaymentsUpdateWithoutPaymentDetailsInput, UsersPaymentsUncheckedUpdateWithoutPaymentDetailsInput>
    create: XOR<UsersPaymentsCreateWithoutPaymentDetailsInput, UsersPaymentsUncheckedCreateWithoutPaymentDetailsInput>
    where?: UsersPaymentsWhereInput
  }

  export type UsersPaymentsUpdateToOneWithWhereWithoutPaymentDetailsInput = {
    where?: UsersPaymentsWhereInput
    data: XOR<UsersPaymentsUpdateWithoutPaymentDetailsInput, UsersPaymentsUncheckedUpdateWithoutPaymentDetailsInput>
  }

  export type UsersPaymentsUpdateWithoutPaymentDetailsInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type UsersPaymentsUncheckedUpdateWithoutPaymentDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersCreateWithoutAddEventsInput = {
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    address?: UsersAddressCreateNestedOneWithoutUsersInput
    payments?: UsersPaymentsCreateNestedManyWithoutUserInput
    orders?: OrderDetailsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutAddEventsInput = {
    id?: number
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    addressId?: number | null
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    payments?: UsersPaymentsUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderDetailsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutAddEventsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAddEventsInput, UsersUncheckedCreateWithoutAddEventsInput>
  }

  export type EventsCreateWithoutAddEventsInput = {
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    category?: EventsCategoryCreateNestedOneWithoutEventsInput
    tickets?: TicketsInfoCreateNestedManyWithoutEventInput
  }

  export type EventsUncheckedCreateWithoutAddEventsInput = {
    id?: number
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    categoryId?: number | null
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
    tickets?: TicketsInfoUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventsCreateOrConnectWithoutAddEventsInput = {
    where: EventsWhereUniqueInput
    create: XOR<EventsCreateWithoutAddEventsInput, EventsUncheckedCreateWithoutAddEventsInput>
  }

  export type UsersUpsertWithoutAddEventsInput = {
    update: XOR<UsersUpdateWithoutAddEventsInput, UsersUncheckedUpdateWithoutAddEventsInput>
    create: XOR<UsersCreateWithoutAddEventsInput, UsersUncheckedCreateWithoutAddEventsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutAddEventsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutAddEventsInput, UsersUncheckedUpdateWithoutAddEventsInput>
  }

  export type UsersUpdateWithoutAddEventsInput = {
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: UsersAddressUpdateOneWithoutUsersNestedInput
    payments?: UsersPaymentsUpdateManyWithoutUserNestedInput
    orders?: OrderDetailsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutAddEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: UsersPaymentsUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderDetailsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventsUpsertWithoutAddEventsInput = {
    update: XOR<EventsUpdateWithoutAddEventsInput, EventsUncheckedUpdateWithoutAddEventsInput>
    create: XOR<EventsCreateWithoutAddEventsInput, EventsUncheckedCreateWithoutAddEventsInput>
    where?: EventsWhereInput
  }

  export type EventsUpdateToOneWithWhereWithoutAddEventsInput = {
    where?: EventsWhereInput
    data: XOR<EventsUpdateWithoutAddEventsInput, EventsUncheckedUpdateWithoutAddEventsInput>
  }

  export type EventsUpdateWithoutAddEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EventsCategoryUpdateOneWithoutEventsNestedInput
    tickets?: TicketsInfoUpdateManyWithoutEventNestedInput
  }

  export type EventsUncheckedUpdateWithoutAddEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketsInfoUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UsersCreateManyAddressInput = {
    id?: number
    profilePic?: string | null
    userName?: string | null
    userPassword: string
    usersType?: $Enums.UsersType
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    email: string
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type UsersUpdateWithoutAddressInput = {
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: UsersPaymentsUpdateManyWithoutUserNestedInput
    orders?: OrderDetailsUpdateManyWithoutUserNestedInput
    addEvents?: UsersEventsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: UsersPaymentsUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderDetailsUncheckedUpdateManyWithoutUserNestedInput
    addEvents?: UsersEventsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    userPassword?: StringFieldUpdateOperationsInput | string
    usersType?: EnumUsersTypeFieldUpdateOperationsInput | $Enums.UsersType
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersPaymentsCreateManyUserInput = {
    id?: number
    paymentType: string
    paymentProvider: string
    created?: Date | string
    modified?: Date | string
  }

  export type OrderDetailsCreateManyUserInput = {
    id?: number
    orderedTicketsId: number
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
  }

  export type UsersEventsCreateManyUserInput = {
    id?: number
    eventId: number
    created?: Date | string
  }

  export type UsersPaymentsUpdateWithoutUserInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDetails?: PaymentDetailsUpdateManyWithoutUsersPaymentsNestedInput
  }

  export type UsersPaymentsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDetails?: PaymentDetailsUncheckedUpdateManyWithoutUsersPaymentsNestedInput
  }

  export type UsersPaymentsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    paymentProvider?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDetailsUpdateWithoutUserInput = {
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedTickets?: OrderedTicketsUpdateOneRequiredWithoutOrdersNestedInput
    paymentDetails?: PaymentDetailsUpdateManyWithoutOrderNestedInput
  }

  export type OrderDetailsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderedTicketsId?: IntFieldUpdateOperationsInput | number
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDetails?: PaymentDetailsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderDetailsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderedTicketsId?: IntFieldUpdateOperationsInput | number
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersEventsUpdateWithoutUserInput = {
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventsUpdateOneRequiredWithoutAddEventsNestedInput
  }

  export type UsersEventsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersEventsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentDetailsCreateManyUsersPaymentsInput = {
    id?: number
    orderId: number
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsUpdateWithoutUsersPaymentsInput = {
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
    order?: OrderDetailsUpdateOneRequiredWithoutPaymentDetailsNestedInput
  }

  export type PaymentDetailsUncheckedUpdateWithoutUsersPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsUncheckedUpdateManyWithoutUsersPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
  }

  export type EventsCreateManyCategoryInput = {
    id?: number
    name: string
    description?: string | null
    cover?: string | null
    startDate: Date | string
    endDate: Date | string
    capacity: number
    addressLine1: string
    addressLine2?: string | null
    postalCode: string
    city: string
    region: string
    country: string
    status?: $Enums.StatusEvents
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type EventsUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketsInfoUpdateManyWithoutEventNestedInput
    addEvents?: UsersEventsUpdateManyWithoutEventNestedInput
  }

  export type EventsUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tickets?: TicketsInfoUncheckedUpdateManyWithoutEventNestedInput
    addEvents?: UsersEventsUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventsUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusEventsFieldUpdateOperationsInput | $Enums.StatusEvents
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketsInfoCreateManyEventInput = {
    id?: number
    typeId?: number | null
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type UsersEventsCreateManyEventInput = {
    id?: number
    userId: number
    created?: Date | string
  }

  export type TicketsInfoUpdateWithoutEventInput = {
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: TicketsTypeUpdateOneWithoutTicketsNestedInput
    orderedTickets?: OrderedTicketsUpdateManyWithoutTicketsInfoNestedInput
  }

  export type TicketsInfoUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderedTickets?: OrderedTicketsUncheckedUpdateManyWithoutTicketsInfoNestedInput
  }

  export type TicketsInfoUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersEventsUpdateWithoutEventInput = {
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutAddEventsNestedInput
  }

  export type UsersEventsUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersEventsUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketsInfoCreateManyTypeInput = {
    id?: number
    eventsId: number
    SKU: string
    price: number
    quantity: number
    status?: $Enums.StatusTicketsInfo
    created?: Date | string
    modified?: Date | string
    deleted?: Date | string | null
  }

  export type TicketsInfoUpdateWithoutTypeInput = {
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event?: EventsUpdateOneRequiredWithoutTicketsNestedInput
    orderedTickets?: OrderedTicketsUpdateManyWithoutTicketsInfoNestedInput
  }

  export type TicketsInfoUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventsId?: IntFieldUpdateOperationsInput | number
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderedTickets?: OrderedTicketsUncheckedUpdateManyWithoutTicketsInfoNestedInput
  }

  export type TicketsInfoUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventsId?: IntFieldUpdateOperationsInput | number
    SKU?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTicketsInfoFieldUpdateOperationsInput | $Enums.StatusTicketsInfo
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderedTicketsCreateManyTicketsInfoInput = {
    id?: number
    quantity: number
    created?: Date | string
    modified?: Date | string
  }

  export type OrderedTicketsUpdateWithoutTicketsInfoInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderDetailsUpdateManyWithoutOrderedTicketsNestedInput
  }

  export type OrderedTicketsUncheckedUpdateWithoutTicketsInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderDetailsUncheckedUpdateManyWithoutOrderedTicketsNestedInput
  }

  export type OrderedTicketsUncheckedUpdateManyWithoutTicketsInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDetailsCreateManyOrderedTicketsInput = {
    id?: number
    usersId: number
    orderTotal: number
    orderDate?: Date | string
    statusCart?: $Enums.StatusOnCart
    statusOrder?: $Enums.StatusOrderDetails
    created?: Date | string
    modified?: Date | string
  }

  export type OrderDetailsUpdateWithoutOrderedTicketsInput = {
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutOrdersNestedInput
    paymentDetails?: PaymentDetailsUpdateManyWithoutOrderNestedInput
  }

  export type OrderDetailsUncheckedUpdateWithoutOrderedTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDetails?: PaymentDetailsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderDetailsUncheckedUpdateManyWithoutOrderedTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersId?: IntFieldUpdateOperationsInput | number
    orderTotal?: FloatFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    statusCart?: EnumStatusOnCartFieldUpdateOperationsInput | $Enums.StatusOnCart
    statusOrder?: EnumStatusOrderDetailsFieldUpdateOperationsInput | $Enums.StatusOrderDetails
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentDetailsCreateManyOrderInput = {
    id?: number
    usersPaymentsId: number
    paymentAmount: number
    paymentDate?: Date | string
    status?: $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsUpdateWithoutOrderInput = {
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
    usersPayments?: UsersPaymentsUpdateOneRequiredWithoutPaymentDetailsNestedInput
  }

  export type PaymentDetailsUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersPaymentsId?: IntFieldUpdateOperationsInput | number
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
  }

  export type PaymentDetailsUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    usersPaymentsId?: IntFieldUpdateOperationsInput | number
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPaymentDetailsFieldUpdateOperationsInput | $Enums.StatusPaymentDetails
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersAddressCountOutputTypeDefaultArgs instead
     */
    export type UsersAddressCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersAddressCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersPaymentsCountOutputTypeDefaultArgs instead
     */
    export type UsersPaymentsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersPaymentsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventsCategoryCountOutputTypeDefaultArgs instead
     */
    export type EventsCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventsCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventsCountOutputTypeDefaultArgs instead
     */
    export type EventsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsTypeCountOutputTypeDefaultArgs instead
     */
    export type TicketsTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsInfoCountOutputTypeDefaultArgs instead
     */
    export type TicketsInfoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsInfoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderedTicketsCountOutputTypeDefaultArgs instead
     */
    export type OrderedTicketsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderedTicketsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDetailsCountOutputTypeDefaultArgs instead
     */
    export type OrderDetailsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDetailsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersAddressDefaultArgs instead
     */
    export type UsersAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersAddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersPaymentsDefaultArgs instead
     */
    export type UsersPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersPaymentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventsCategoryDefaultArgs instead
     */
    export type EventsCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventsCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventsDefaultArgs instead
     */
    export type EventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsTypeDefaultArgs instead
     */
    export type TicketsTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsInfoDefaultArgs instead
     */
    export type TicketsInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderedTicketsDefaultArgs instead
     */
    export type OrderedTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderedTicketsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDetailsDefaultArgs instead
     */
    export type OrderDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDetailsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDetailsDefaultArgs instead
     */
    export type PaymentDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDetailsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersEventsDefaultArgs instead
     */
    export type UsersEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersEventsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}